Shader "NatureManufacture/HDRP/Ice/Ice Translucency Transparent"
{
    Properties
    {
        _WaterAlphaMultiply("Water Alpha Multiply", Float) = 0.66
        _WaterAlphaPower("Water Alpha Power", Float) = 1.39
        _CleanFalloffMultiply("Clean Falloff Multiply", Float) = 1.6
        _CleanFalloffPower("Clean Falloff Power", Float) = 0.34
        _ShalowFalloffMultiply("Shalow Falloff Multiply", Float) = 1.43
        _ShalowFalloffPower("Shalow Falloff Power", Float) = 3.3
        _CleanColorPower("Clean Color Power", Range(0, 1)) = 0.7
        _ShalowColor("Shalow Color", Color) = (0.7529412, 0.9215686, 0.9803922, 0)
        _DeepColor("Deep Color", Color) = (0, 0, 0, 0)
        _BaseColor("Ice Base Color", Color) = (1, 1, 1, 0)
        [NoScaleOffset]_BaseColorMap("Ice Base Map", 2D) = "white" {}
        [ToggleUI]_BaseUsePlanarUV("Ice Base Use Planar UV", Float) = 0
        _BaseTilingOffset("Ice Base Tiling and Offset", Vector) = (1, 1, 0, 0)
        _IceNoiseScale("Ice Noise Scale", Float) = 3
        _IceNoiseContrast("Ice Noise Contrast", Float) = 1
        _IceNoisePower("Ice Noise Power", Float) = 1
        [Normal][NoScaleOffset]_BaseNormalMap("Ice Normal Map", 2D) = "bump" {}
        _BaseNormalScale("Ice Base Normal Scale", Range(0, 8)) = 0.3
        [NoScaleOffset]_IceNoiseNormal("Ice Noise Normal", 2D) = "white" {}
        _NoiseNormalScale("Ice Noise Normal Scale", Range(0, 8)) = 0.05
        _BaseAO("Ice Base AO", Range(0, 1)) = 1
        _IceSmoothness("Ice Smoothness", Range(0, 1)) = 0.9
        _IceCrackSmoothness("Ice Crack Smoothness", Range(0, 1)) = 0.2
        _IceNoiseSmoothness("Ice Noise Smoothness", Range(0, 1)) = 0.9
        [NoScaleOffset]_ParalaxMap("Ice Parallax Map", 2D) = "black" {}
        _ParalaxOffset("Ice Parallax Offset", Float) = 0
        _IceParallaxSteps("Ice Parallax Steps", Float) = 40
        _IceDepth("Ice Parallax Depth", Float) = -0.1
        _ParallaxFalloff("Ice Parallax Falloff", Range(0, 1)) = 0.6
        _IceParallaxNoiseScale("Ice Parallax Noise Scale", Float) = 3
        _IceParallaxNoiseMin("Ice Parallax Noise Remap Min", Range(0, 1)) = 0
        _IceParallaxNoiseMax("Ice Parallax Noise Remap Max", Range(0, 1)) = 1
        _Ice_Thickness("Ice Thickness", Float) = 1
        _IceDistortion("Ice Distortion", Float) = 6
        _Ice_Noise_Distortion("Ice Noise Distortion", Float) = 6
        [NoScaleOffset]_DetailMap("Detail Map Base (R) Ny(G) Sm(B) Nx(A)", 2D) = "white" {}
        _DetailTilingOffset("Detail Tiling Offset", Vector) = (1, 1, 0, 0)
        _DetailAlbedoScale("Detail Albedo Scale", Range(0, 2)) = 0
        _DetailNormalScale("Detail Normal Scale", Range(0, 2)) = 0
        _DetailSmoothnessScale("Detail Smoothness Scale", Range(0, 2)) = 0
        _WetColor("Wet Color Vertex(R)", Color) = (0.7735849, 0.7735849, 0.7735849, 0)
        _WetSmoothness("Wet Smoothness Vertex(R)", Range(0, 1)) = 1
        [HideInInspector]_DiffusionProfileHash("Float", Float) = 0
        [HideInInspector]_DiffusionProfileAsset("Vector4", Vector) = (0, 0, 0, 0)
        [HideInInspector]_EmissionColor("Color", Color) = (1, 1, 1, 1)
        [HideInInspector]_RenderQueueType("Float", Float) = 4
        [HideInInspector][ToggleUI]_AddPrecomputedVelocity("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_DepthOffsetEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_ConservativeDepthOffsetEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_TransparentWritingMotionVec("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_AlphaCutoffEnable("Boolean", Float) = 0
        [HideInInspector]_TransparentSortPriority("_TransparentSortPriority", Float) = 0
        [HideInInspector][ToggleUI]_UseShadowThreshold("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_DoubleSidedEnable("Boolean", Float) = 1
        [HideInInspector][Enum(Flip, 0, Mirror, 1, None, 2)]_DoubleSidedNormalMode("Float", Float) = 1
        [HideInInspector]_DoubleSidedConstants("Vector4", Vector) = (1, 1, -1, 0)
        [HideInInspector][Enum(Auto, 0, On, 1, Off, 2)]_DoubleSidedGIMode("Float", Float) = 0
        [HideInInspector][ToggleUI]_TransparentDepthPrepassEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_TransparentDepthPostpassEnable("Boolean", Float) = 0
        [HideInInspector]_SurfaceType("Float", Float) = 1
        [HideInInspector]_BlendMode("Float", Float) = 0
        [HideInInspector]_SrcBlend("Float", Float) = 1
        [HideInInspector]_DstBlend("Float", Float) = 0
        [HideInInspector]_AlphaSrcBlend("Float", Float) = 1
        [HideInInspector]_AlphaDstBlend("Float", Float) = 0
        [HideInInspector][ToggleUI]_ZWrite("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_TransparentZWrite("Boolean", Float) = 1
        [HideInInspector]_CullMode("Float", Float) = 2
        [HideInInspector][ToggleUI]_EnableFogOnTransparent("Boolean", Float) = 1
        [HideInInspector]_CullModeForward("Float", Float) = 2
        [HideInInspector][Enum(Front, 1, Back, 2)]_TransparentCullMode("Float", Float) = 2
        [HideInInspector][Enum(UnityEditor.Rendering.HighDefinition.OpaqueCullMode)]_OpaqueCullMode("Float", Float) = 2
        [HideInInspector]_ZTestDepthEqualForOpaque("Float", Int) = 4
        [HideInInspector][Enum(UnityEngine.Rendering.CompareFunction)]_ZTestTransparent("Float", Float) = 4
        [HideInInspector][ToggleUI]_TransparentBackfaceEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_RequireSplitLighting("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_ReceivesSSR("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_ReceivesSSRTransparent("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_EnableBlendModePreserveSpecularLighting("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_SupportDecals("Boolean", Float) = 1
        [HideInInspector]_StencilRef("Float", Int) = 0
        [HideInInspector]_StencilWriteMask("Float", Int) = 6
        [HideInInspector]_StencilRefDepth("Float", Int) = 8
        [HideInInspector]_StencilWriteMaskDepth("Float", Int) = 9
        [HideInInspector]_StencilRefMV("Float", Int) = 40
        [HideInInspector]_StencilWriteMaskMV("Float", Int) = 41
        [HideInInspector]_StencilRefDistortionVec("Float", Int) = 4
        [HideInInspector]_StencilWriteMaskDistortionVec("Float", Int) = 4
        [HideInInspector]_StencilWriteMaskGBuffer("Float", Int) = 15
        [HideInInspector]_StencilRefGBuffer("Float", Int) = 10
        [HideInInspector]_ZTestGBuffer("Float", Int) = 4
        [HideInInspector][ToggleUI]_RayTracing("Boolean", Float) = 0
        [HideInInspector][Enum(None, 0, Planar, 1, Sphere, 2, Thin, 3)]_RefractionModel("Float", Float) = 0
        [HideInInspector][NoScaleOffset]unity_Lightmaps("unity_Lightmaps", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset]unity_LightmapsInd("unity_LightmapsInd", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset]unity_ShadowMasks("unity_ShadowMasks", 2DArray) = "" {}
    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="HDRenderPipeline"
            "RenderType"="HDLitShader"
            "Queue"="Transparent+0"
            "ShaderGraphShader"="true"
            "ShaderGraphTargetId"="HDLitSubTarget"
        }
        Pass
        {
            Name "ShadowCaster"
            Tags
            {
                "LightMode" = "ShadowCaster"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        ColorMask 0
        ZClip [_ZClip]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_SHADOWS
        #define REQUIRE_DEPTH_TEXTURE
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float _WaterAlphaMultiply;
        float _WaterAlphaPower;
        float _CleanFalloffMultiply;
        float _CleanFalloffPower;
        float _ShalowFalloffMultiply;
        float _ShalowFalloffPower;
        float _CleanColorPower;
        float4 _ShalowColor;
        float4 _DeepColor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float _IceNoiseScale;
        float _IceNoiseContrast;
        float _IceNoisePower;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _IceNoiseNormal_TexelSize;
        float _NoiseNormalScale;
        float _BaseAO;
        float _IceSmoothness;
        float _IceCrackSmoothness;
        float _IceNoiseSmoothness;
        float4 _ParalaxMap_TexelSize;
        float _ParalaxOffset;
        float _IceParallaxSteps;
        float _IceDepth;
        float _ParallaxFalloff;
        float _IceParallaxNoiseScale;
        float _IceParallaxNoiseMin;
        float _IceParallaxNoiseMax;
        float _Ice_Thickness;
        float _IceDistortion;
        float _Ice_Noise_Distortion;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_IceNoiseNormal);
        SAMPLER(sampler_IceNoiseNormal);
        TEXTURE2D(_ParalaxMap);
        SAMPLER(sampler_ParalaxMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpacePosition;
             float4 ScreenPosition;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float4 interp1 : INTERP1;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.color = input.interp1.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Comparison_Greater_float(float A, float B, out float Out)
        {
            Out = A > B ? 1 : 0;
        }
        
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float
        {
        float4 ScreenPosition;
        };
        
        void SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float IN, out float2 OutVector2_1)
        {
        float4 _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0 = IN.ScreenPosition;
        float _Split_b183780fdd2343708af64846c96ee2a7_R_1 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[0];
        float _Split_b183780fdd2343708af64846c96ee2a7_G_2 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[1];
        float _Split_b183780fdd2343708af64846c96ee2a7_B_3 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[2];
        float _Split_b183780fdd2343708af64846c96ee2a7_A_4 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[3];
        float2 _Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0 = float2(_Split_b183780fdd2343708af64846c96ee2a7_R_1, _Split_b183780fdd2343708af64846c96ee2a7_G_2);
        float2 _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        Unity_Divide_float2(_Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0, (_Split_b183780fdd2343708af64846c96ee2a7_A_4.xx), _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2);
        OutVector2_1 = _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        }
        
        void Unity_SceneDepth_Raw_float(float4 UV, out float Out)
        {
            Out = SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void GetClipValues_float(out float2 Out){
        Out = float2(
        
        UNITY_NEAR_CLIP_VALUE,
        
        UNITY_RAW_FAR_CLIP_VALUE
        
        );
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
        {
            Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        struct Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float
        {
        float4 ScreenPosition;
        };
        
        void SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 _DistortionUV, Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float IN, out float Out_Depth_1, out float Out_DepthDistortion_2)
        {
        float _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2;
        Unity_Comparison_Greater_float(unity_OrthoParams.w, 0, _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2);
        float _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2;
        Unity_Comparison_Greater_float(_ProjectionParams.x, 0, _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2);
        Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff;
        _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff.ScreenPosition = IN.ScreenPosition;
        half2 _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1;
        SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff, _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1);
        float _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1;
        Unity_SceneDepth_Raw_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1);
        float _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1;
        Unity_OneMinus_float(_SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1);
        float _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3);
        float _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3, _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3);
        float4 _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0 = IN.ScreenPosition;
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float2 _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0;
        GetClipValues_float(_GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0);
        float _Remap_1907dbd4ae754843a5d74245135e2923_Out_3;
        Unity_Remap_float(_Split_62277fd721f74a399bd1009f8b3cb8e3_B_3, _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0, float2 (0, 1), _Remap_1907dbd4ae754843a5d74245135e2923_Out_3);
        float _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Remap_1907dbd4ae754843a5d74245135e2923_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3);
        float _Subtract_b98f5f0e27014160829b37533239eca2_Out_2;
        Unity_Subtract_float(_Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_b98f5f0e27014160829b37533239eca2_Out_2);
        float _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1;
        Unity_Saturate_float(_Subtract_b98f5f0e27014160829b37533239eca2_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1);
        float _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1);
        float _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2;
        Unity_Multiply_float_float(_SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1, _ProjectionParams.z, _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2);
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2;
        Unity_Subtract_float(_Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2);
        float _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2, _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3);
        float2 _Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0 = _DistortionUV;
        float _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1;
        Unity_SceneDepth_Raw_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1);
        float _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1;
        Unity_OneMinus_float(_SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1);
        float _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3);
        float _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3, _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3);
        float _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2;
        Unity_Subtract_float(_Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2);
        float _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1;
        Unity_Saturate_float(_Subtract_4531c88bf2b147d7a2998422330b141f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1);
        float _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1);
        float _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2;
        Unity_Multiply_float_float(_SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1, _ProjectionParams.z, _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2);
        float _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2;
        Unity_Subtract_float(_Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2);
        float _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2, _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3);
        Out_Depth_1 = _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Out_DepthDistortion_2 = _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82;
            float3 _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float Alpha;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c;
            _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c.ScreenPosition = IN.ScreenPosition;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2;
            SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 (0, 0), _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2);
            float _Property_22da60d6cbff958696ddee1c161db229_Out_0 = _WaterAlphaMultiply;
            float _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_22da60d6cbff958696ddee1c161db229_Out_0, _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2);
            float _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3;
            Unity_Clamp_float(_Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2, 0, 1, _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3);
            float _Absolute_c4059e430bb17486afd523c0f333e478_Out_1;
            Unity_Absolute_float(_Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3, _Absolute_c4059e430bb17486afd523c0f333e478_Out_1);
            float _Property_cd34ee7769676e85b3e223f0e908967c_Out_0 = _WaterAlphaPower;
            float _Power_2c1f1e86c544138396974457f6515752_Out_2;
            Unity_Power_float(_Absolute_c4059e430bb17486afd523c0f333e478_Out_1, _Property_cd34ee7769676e85b3e223f0e908967c_Out_0, _Power_2c1f1e86c544138396974457f6515752_Out_2);
            float _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3;
            Unity_Clamp_float(_Power_2c1f1e86c544138396974457f6515752_Out_2, 0, 1, _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3);
            float _Split_5b2299b48b10138ea40c141b79bfe90e_R_1 = IN.VertexColor[0];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_G_2 = IN.VertexColor[1];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_B_3 = IN.VertexColor[2];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_A_4 = IN.VertexColor[3];
            float _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            Unity_Multiply_float_float(_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3, _Split_5b2299b48b10138ea40c141b79bfe90e_A_4, _Multiply_ffa35df91e1277898c1160f454087deb_Out_2);
            surface.Alpha = _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            surface.DiffusionProfileHash = _DiffusionProfileHash;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.WorldSpacePosition =                         input.positionRWS;
            output.ScreenPosition = ComputeScreenPos(TransformWorldToHClip(input.positionRWS), _ProjectionParams.x);
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            // normal delivered to master node
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "META"
            Tags
            {
                "LightMode" = "META"
            }
        
            // Render State
            Cull Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ EDITOR_VISUALIZATION
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_TEXCOORD3
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_POSITIONPREDISPLACEMENT_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_TEXCOORD3
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD1
            #define FRAG_INPUTS_USE_TEXCOORD2
            #define FRAG_INPUTS_USE_TEXCOORD3
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_LIGHT_TRANSPORT
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define REQUIRE_DEPTH_TEXTURE
        #define REQUIRE_OPAQUE_TEXTURE
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float _WaterAlphaMultiply;
        float _WaterAlphaPower;
        float _CleanFalloffMultiply;
        float _CleanFalloffPower;
        float _ShalowFalloffMultiply;
        float _ShalowFalloffPower;
        float _CleanColorPower;
        float4 _ShalowColor;
        float4 _DeepColor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float _IceNoiseScale;
        float _IceNoiseContrast;
        float _IceNoisePower;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _IceNoiseNormal_TexelSize;
        float _NoiseNormalScale;
        float _BaseAO;
        float _IceSmoothness;
        float _IceCrackSmoothness;
        float _IceNoiseSmoothness;
        float4 _ParalaxMap_TexelSize;
        float _ParalaxOffset;
        float _IceParallaxSteps;
        float _IceDepth;
        float _ParallaxFalloff;
        float _IceParallaxNoiseScale;
        float _IceParallaxNoiseMin;
        float _IceParallaxNoiseMax;
        float _Ice_Thickness;
        float _IceDistortion;
        float _Ice_Noise_Distortion;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_IceNoiseNormal);
        SAMPLER(sampler_IceNoiseNormal);
        TEXTURE2D(_ParalaxMap);
        SAMPLER(sampler_ParalaxMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Hashes.hlsl"
        #include "./NMParallaxLayers.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
             float4 uv3 : TEXCOORD3;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 positionPredisplacementRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 texCoord3;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 WorldSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 ScreenPosition;
             float2 NDCPosition;
             float2 PixelPosition;
             float4 uv0;
             float4 uv2;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float3 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
             float4 interp7 : INTERP7;
             float4 interp8 : INTERP8;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.positionPredisplacementRWS;
            output.interp2.xyz =  input.normalWS;
            output.interp3.xyzw =  input.tangentWS;
            output.interp4.xyzw =  input.texCoord0;
            output.interp5.xyzw =  input.texCoord1;
            output.interp6.xyzw =  input.texCoord2;
            output.interp7.xyzw =  input.texCoord3;
            output.interp8.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.positionPredisplacementRWS = input.interp1.xyz;
            output.normalWS = input.interp2.xyz;
            output.tangentWS = input.interp3.xyzw;
            output.texCoord0 = input.interp4.xyzw;
            output.texCoord1 = input.interp5.xyzw;
            output.texCoord2 = input.interp6.xyzw;
            output.texCoord3 = input.interp7.xyzw;
            output.color = input.interp8.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Branch_float4(float Predicate, float4 True, float4 False, out float4 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_058f4fba88c3437288219f1929444bf2_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_43d85b3291324c848dfbeec6adac2a71_Out_0 = IN.uv0;
        float4 _UV_36881dcaab9040168fc5215dcd00f352_Out_0 = IN.uv2;
        float4 _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3;
        Unity_Branch_float4(_Property_058f4fba88c3437288219f1929444bf2_Out_0, _UV_43d85b3291324c848dfbeec6adac2a71_Out_0, _UV_36881dcaab9040168fc5215dcd00f352_Out_0, _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float((_Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3.xy), _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3) );
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1;
        {
        float3x3 tangentTransform = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, tangentTransform, true);
        }
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        float Unity_SimpleNoise_ValueNoise_LegacySine_float (float2 uv)
        {
        float2 i = floor(uv);
        float2 f = frac(uv);
        f = f * f * (3.0 - 2.0 * f);
        uv = abs(frac(uv) - 0.5);
        float2 c0 = i + float2(0.0, 0.0);
        float2 c1 = i + float2(1.0, 0.0);
        float2 c2 = i + float2(0.0, 1.0);
        float2 c3 = i + float2(1.0, 1.0);
        float r0; Hash_LegacySine_2_1_float(c0, r0);
        float r1; Hash_LegacySine_2_1_float(c1, r1);
        float r2; Hash_LegacySine_2_1_float(c2, r2);
        float r3; Hash_LegacySine_2_1_float(c3, r3);
        float bottomOfGrid = lerp(r0, r1, f.x);
        float topOfGrid = lerp(r2, r3, f.x);
        float t = lerp(bottomOfGrid, topOfGrid, f.y);
        return t;
        }
        
        void Unity_SimpleNoise_LegacySine_float(float2 UV, float Scale, out float Out)
        {
        float freq, amp;
        Out = 0.0f;
        freq = pow(2.0, float(0));
        amp = pow(0.5, float(3-0));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(1));
        amp = pow(0.5, float(3-1));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(2));
        amp = pow(0.5, float(3-2));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(float Vector1_E4D1C13A, float Vector1_CBF4C304, Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float IN, out float XYZ_1)
        {
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0 = Vector1_CBF4C304;
        float _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2);
        float _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2);
        float _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, _Add_e855069f047fae8ea9027d56acb61e56_Out_2, _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Contrast_float(float3 In, float Contrast, out float3 Out)
        {
            float midpoint = pow(0.5, 2.2);
            Out =  (In - midpoint) * Contrast + midpoint;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Lerp_float2(float2 A, float2 B, float2 T, out float2 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_029e8e8198564838b9389b902a09fb22_Out_0 = IN.uv0;
        float4 _UV_7a6209af1506424fb75c81e87e42035a_Out_0 = IN.uv2;
        float4 _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3;
        Unity_Branch_float4(_Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0, _UV_029e8e8198564838b9389b902a09fb22_Out_0, _UV_7a6209af1506424fb75c81e87e42035a_Out_0, _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float((_Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3.xy), _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3) );
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        struct Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float IN, out float4 XZ_2)
        {
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        XZ_2 = (float4(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3, 0.0, 1.0));
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Blend_Lighten_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            Out = max(Blend, Base);
            Out = lerp(Base, Out, Opacity);
        }
        
        float3 Unity_HDRP_SampleSceneColor_float(float2 uv, float lod, float exposureMultiplier)
        {
            exposureMultiplier = 1.0;
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(_SURFACE_TYPE_TRANSPARENT) && defined(SHADERPASS) && (SHADERPASS != SHADERPASS_LIGHT_TRANSPORT) && (SHADERPASS != SHADERPASS_PATH_TRACING) && (SHADERPASS != SHADERPASS_RAYTRACING_VISIBILITY) && (SHADERPASS != SHADERPASS_RAYTRACING_FORWARD)
            return SampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(CUSTOM_PASS_SAMPLING_HLSL) && defined(SHADERPASS) && (SHADERPASS == SHADERPASS_DRAWPROCEDURAL || SHADERPASS == SHADERPASS_BLIT)
            return CustomPassSampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            return float3(0.0, 0.0, 0.0);
        }
        
        void Unity_Comparison_Greater_float(float A, float B, out float Out)
        {
            Out = A > B ? 1 : 0;
        }
        
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float
        {
        float4 ScreenPosition;
        };
        
        void SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float IN, out float2 OutVector2_1)
        {
        float4 _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0 = IN.ScreenPosition;
        float _Split_b183780fdd2343708af64846c96ee2a7_R_1 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[0];
        float _Split_b183780fdd2343708af64846c96ee2a7_G_2 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[1];
        float _Split_b183780fdd2343708af64846c96ee2a7_B_3 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[2];
        float _Split_b183780fdd2343708af64846c96ee2a7_A_4 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[3];
        float2 _Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0 = float2(_Split_b183780fdd2343708af64846c96ee2a7_R_1, _Split_b183780fdd2343708af64846c96ee2a7_G_2);
        float2 _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        Unity_Divide_float2(_Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0, (_Split_b183780fdd2343708af64846c96ee2a7_A_4.xx), _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2);
        OutVector2_1 = _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        }
        
        void Unity_SceneDepth_Raw_float(float4 UV, out float Out)
        {
            Out = SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void GetClipValues_float(out float2 Out){
        Out = float2(
        
        UNITY_NEAR_CLIP_VALUE,
        
        UNITY_RAW_FAR_CLIP_VALUE
        
        );
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
        {
            Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
        }
        
        struct Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float
        {
        float4 ScreenPosition;
        };
        
        void SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 _DistortionUV, Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float IN, out float Out_Depth_1, out float Out_DepthDistortion_2)
        {
        float _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2;
        Unity_Comparison_Greater_float(unity_OrthoParams.w, 0, _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2);
        float _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2;
        Unity_Comparison_Greater_float(_ProjectionParams.x, 0, _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2);
        Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff;
        _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff.ScreenPosition = IN.ScreenPosition;
        half2 _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1;
        SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff, _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1);
        float _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1;
        Unity_SceneDepth_Raw_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1);
        float _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1;
        Unity_OneMinus_float(_SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1);
        float _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3);
        float _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3, _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3);
        float4 _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0 = IN.ScreenPosition;
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float2 _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0;
        GetClipValues_float(_GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0);
        float _Remap_1907dbd4ae754843a5d74245135e2923_Out_3;
        Unity_Remap_float(_Split_62277fd721f74a399bd1009f8b3cb8e3_B_3, _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0, float2 (0, 1), _Remap_1907dbd4ae754843a5d74245135e2923_Out_3);
        float _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Remap_1907dbd4ae754843a5d74245135e2923_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3);
        float _Subtract_b98f5f0e27014160829b37533239eca2_Out_2;
        Unity_Subtract_float(_Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_b98f5f0e27014160829b37533239eca2_Out_2);
        float _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1;
        Unity_Saturate_float(_Subtract_b98f5f0e27014160829b37533239eca2_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1);
        float _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1);
        float _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2;
        Unity_Multiply_float_float(_SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1, _ProjectionParams.z, _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2);
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2;
        Unity_Subtract_float(_Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2);
        float _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2, _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3);
        float2 _Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0 = _DistortionUV;
        float _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1;
        Unity_SceneDepth_Raw_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1);
        float _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1;
        Unity_OneMinus_float(_SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1);
        float _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3);
        float _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3, _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3);
        float _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2;
        Unity_Subtract_float(_Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2);
        float _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1;
        Unity_Saturate_float(_Subtract_4531c88bf2b147d7a2998422330b141f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1);
        float _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1);
        float _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2;
        Unity_Multiply_float_float(_SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1, _ProjectionParams.z, _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2);
        float _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2;
        Unity_Subtract_float(_Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2);
        float _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2, _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3);
        Out_Depth_1 = _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Out_DepthDistortion_2 = _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
            // Graph Vertex
            struct VertexDescription
        {
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float2 Distortion;
            float DistortionBlur;
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            float _Property_e5176656505ae98292b155cb230ab233_Out_0 = _IceDistortion;
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_11506852e45cbb8f9732aebed8bbb210;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv0 = IN.uv0;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv2 = IN.uv2;
            float4 _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2);
            float _Split_f392619d76305f8e9a715324614291f5_R_1 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[0];
            float _Split_f392619d76305f8e9a715324614291f5_G_2 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[1];
            float _Split_f392619d76305f8e9a715324614291f5_B_3 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[2];
            float _Split_f392619d76305f8e9a715324614291f5_A_4 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[3];
            float4 _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4;
            float3 _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5;
            float2 _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6;
            Unity_Combine_float(_Split_f392619d76305f8e9a715324614291f5_R_1, _Split_f392619d76305f8e9a715324614291f5_G_2, 0, 0, _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4, _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5, _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6);
            float2 _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2;
            Unity_Multiply_float2_float2((_Property_e5176656505ae98292b155cb230ab233_Out_0.xx), _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6, _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2);
            float _Property_f0b2859614d93f86b920c65decb52ecf_Out_0 = _Ice_Noise_Distortion;
            UnityTexture2D _Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0 = UnityBuildTexture2DStructNoScale(_IceNoiseNormal);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv0 = IN.uv0;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv2 = IN.uv2;
            float4 _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2);
            float _Split_1c2740a46a2f0281ab926911287ce711_R_1 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[0];
            float _Split_1c2740a46a2f0281ab926911287ce711_G_2 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[1];
            float _Split_1c2740a46a2f0281ab926911287ce711_B_3 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[2];
            float _Split_1c2740a46a2f0281ab926911287ce711_A_4 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[3];
            float4 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4;
            float3 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5;
            float2 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6;
            Unity_Combine_float(_Split_1c2740a46a2f0281ab926911287ce711_R_1, _Split_1c2740a46a2f0281ab926911287ce711_G_2, 0, 0, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6);
            float2 _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2;
            Unity_Multiply_float2_float2((_Property_f0b2859614d93f86b920c65decb52ecf_Out_0.xx), _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2);
            float _Property_852d221028b884858f029fedb8de47d1_Out_0 = _IceNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_852d221028b884858f029fedb8de47d1_Out_0, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1);
            float _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1;
            Unity_Absolute_float(_TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1, _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1);
            float _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0 = _IceNoisePower;
            float _Power_1497f6299359e780a9aa8dde441d98cf_Out_2;
            Unity_Power_float(_Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1, _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0, _Power_1497f6299359e780a9aa8dde441d98cf_Out_2);
            float _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0 = _IceNoiseContrast;
            float3 _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2;
            Unity_Contrast_float((_Power_1497f6299359e780a9aa8dde441d98cf_Out_2.xxx), _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0, _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2);
            float _Split_f399eb1f3ad77580a75b6122d38451b5_R_1 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[0];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_G_2 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[1];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_B_3 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[2];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_A_4 = 0;
            float _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3;
            Unity_Clamp_float(_Split_f399eb1f3ad77580a75b6122d38451b5_R_1, 0, 1, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3);
            float2 _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            Unity_Lerp_float2(_Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xx), _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3);
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_893a7c3932a452849a5239a91f337a35;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv0 = IN.uv0;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv2 = IN.uv2;
            float4 _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_893a7c3932a452849a5239a91f337a35, _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2);
            float _Property_771911a99405a780908dd542012af7b8_Out_0 = _IceParallaxSteps;
            Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float _PlanarNMparallax_e8f8353657858a87933a47a40c74654d;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.uv0 = IN.uv0;
            float4 _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2;
            SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(_Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2);
            float _Property_efee416de222038a93fa523171fb9f0d_Out_0 = _ParalaxOffset;
            float _Property_720bc7e00a412889a10ca999204543f8_Out_0 = _IceParallaxNoiseMin;
            float _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0 = _IceParallaxNoiseMax;
            float _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0 = _IceParallaxNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1);
            float _Lerp_87de925175c62a8986309dc80655ce2f_Out_3;
            Unity_Lerp_float(_Property_720bc7e00a412889a10ca999204543f8_Out_0, _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3);
            float _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3;
            Unity_Lerp_float(_Property_efee416de222038a93fa523171fb9f0d_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3);
            float _Property_acfd17e181f6108ba7921d3e04df886d_Out_0 = _IceDepth;
            float _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0 = _ParallaxFalloff;
            float _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3;
            Unity_Lerp_float(_Property_eede9dad69eea580b2a3fdc05280f02f_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3);
            UnityTexture2D _Property_7c5c99f2c1b340ec980675a076619f86_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            float4 _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2;
            ParallaxLayers_float(_Property_771911a99405a780908dd542012af7b8_Out_0, (_PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2.xy), _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3, _Property_acfd17e181f6108ba7921d3e04df886d_Out_0, IN.TangentSpaceViewDirection, IN.WorldSpaceViewDirection, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _Property_7c5c99f2c1b340ec980675a076619f86_Out_0, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2);
            float4 _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2;
            Unity_Blend_Lighten_float4(_PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2, _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            float3 _HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2 = Unity_HDRP_SampleSceneColor_float(float4(IN.NDCPosition.xy, 0, 0).xy, 0, 1.0);
            float _Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0 = _CleanColorPower;
            float3 _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2;
            Unity_Multiply_float3_float3(_HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2, (_Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0.xxx), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2);
            float4 _Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0 = _DeepColor;
            float4 _Property_7094041d89afbd878cb83460f4ab68b8_Out_0 = _ShalowColor;
            Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c;
            _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c.ScreenPosition = IN.ScreenPosition;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2;
            SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 (0, 0), _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2);
            float _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0 = _ShalowFalloffMultiply;
            float _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0, _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2);
            float _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1;
            Unity_Absolute_float(_Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2, _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1);
            float _Property_e6dd087698d3e984bd5eb642347af797_Out_0 = _ShalowFalloffPower;
            float _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2;
            Unity_Multiply_float_float(_Property_e6dd087698d3e984bd5eb642347af797_Out_0, -1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2);
            float _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2;
            Unity_Power_float(_Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2, _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2);
            float _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1;
            Unity_Saturate_float(_Power_aaf82c5db3291a8bb2095cce38670a92_Out_2, _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1);
            float _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3;
            Unity_Clamp_float(_Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1, 0, 1, _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3);
            float4 _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3;
            Unity_Lerp_float4(_Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0, _Property_7094041d89afbd878cb83460f4ab68b8_Out_0, (_Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3.xxxx), _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3);
            float3 _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2;
            Unity_Multiply_float3_float3((_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2);
            float _Property_22da60d6cbff958696ddee1c161db229_Out_0 = _WaterAlphaMultiply;
            float _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_22da60d6cbff958696ddee1c161db229_Out_0, _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2);
            float _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3;
            Unity_Clamp_float(_Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2, 0, 1, _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3);
            float _Absolute_c4059e430bb17486afd523c0f333e478_Out_1;
            Unity_Absolute_float(_Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3, _Absolute_c4059e430bb17486afd523c0f333e478_Out_1);
            float _Property_cd34ee7769676e85b3e223f0e908967c_Out_0 = _WaterAlphaPower;
            float _Power_2c1f1e86c544138396974457f6515752_Out_2;
            Unity_Power_float(_Absolute_c4059e430bb17486afd523c0f333e478_Out_1, _Property_cd34ee7769676e85b3e223f0e908967c_Out_0, _Power_2c1f1e86c544138396974457f6515752_Out_2);
            float _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3;
            Unity_Clamp_float(_Power_2c1f1e86c544138396974457f6515752_Out_2, 0, 1, _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3);
            float3 _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3;
            Unity_Lerp_float3(_Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2, (_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), (_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3.xxx), _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3);
            float _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0 = _CleanFalloffMultiply;
            float _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0, _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2);
            float _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3;
            Unity_Clamp_float(_Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2, 0, 1, _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3);
            float _Absolute_2efac825a986e28190f26200795ca9ec_Out_1;
            Unity_Absolute_float(_Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3, _Absolute_2efac825a986e28190f26200795ca9ec_Out_1);
            float _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0 = _CleanFalloffPower;
            float _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2;
            Unity_Power_float(_Absolute_2efac825a986e28190f26200795ca9ec_Out_1, _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0, _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2);
            float _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3;
            Unity_Clamp_float(_Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2, 0, 1, _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3);
            float3 _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3;
            Unity_Lerp_float3(_Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3, (_Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3.xxx), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3);
            float3 _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3;
            Unity_Lerp_float3((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3);
            UnityTexture2D _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_256e5676e1089881ae3214634430b140_Out_0 = _DetailTilingOffset;
            float _Split_257d0b6ea953418d97fd7daa8128bf35_R_1 = _Property_256e5676e1089881ae3214634430b140_Out_0[0];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_G_2 = _Property_256e5676e1089881ae3214634430b140_Out_0[1];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_B_3 = _Property_256e5676e1089881ae3214634430b140_Out_0[2];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_A_4 = _Property_256e5676e1089881ae3214634430b140_Out_0[3];
            float2 _Vector2_98295494172421878c7a16cb2baddf9a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_R_1, _Split_257d0b6ea953418d97fd7daa8128bf35_G_2);
            float2 _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_B_3, _Split_257d0b6ea953418d97fd7daa8128bf35_A_4);
            float2 _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_98295494172421878c7a16cb2baddf9a_Out_0, _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0, _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3);
            float4 _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0 = SAMPLE_TEXTURE2D(_Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.tex, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.samplerstate, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.GetTransformedUV(_TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3) );
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.r;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.g;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.b;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.a;
            float _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4, 2, _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2);
            float _Add_fd3efcae64779e848ef39919335cd44d_Out_2;
            Unity_Add_float(_Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2, -1, _Add_fd3efcae64779e848ef39919335cd44d_Out_2);
            float _Property_605f29777330a58ba88ac032e905433b_Out_0 = _DetailAlbedoScale;
            float _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2;
            Unity_Multiply_float_float(_Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Property_605f29777330a58ba88ac032e905433b_Out_0, _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2);
            float _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1;
            Unity_Saturate_float(_Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2, _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1);
            float _Absolute_8acef423205118879e75274a48969d34_Out_1;
            Unity_Absolute_float(_Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1, _Absolute_8acef423205118879e75274a48969d34_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185;
            float3 _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float((float4(_Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3, 1.0)), _Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Absolute_8acef423205118879e75274a48969d34_Out_1, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1);
            float4 _Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0 = _WetColor;
            float3 _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2;
            Unity_Multiply_float3_float3((_Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0.xyz), _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2);
            float _Split_5b2299b48b10138ea40c141b79bfe90e_R_1 = IN.VertexColor[0];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_G_2 = IN.VertexColor[1];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_B_3 = IN.VertexColor[2];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_A_4 = IN.VertexColor[3];
            float _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3;
            Unity_Clamp_float(_Split_5b2299b48b10138ea40c141b79bfe90e_R_1, 0, 1, _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3);
            float _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1;
            Unity_OneMinus_float(_Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1);
            float3 _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            Unity_Lerp_float3(_BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2, (_OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1.xxx), _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3);
            float _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            Unity_Multiply_float_float(_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3, _Split_5b2299b48b10138ea40c141b79bfe90e_A_4, _Multiply_ffa35df91e1277898c1160f454087deb_Out_2);
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAO;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _IceSmoothness;
            float _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0 = _IceCrackSmoothness;
            UnityTexture2D _Property_be61fb085f680285bb171ac957c1d150_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv0 = IN.uv0;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv2 = IN.uv2;
            float4 _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_be61fb085f680285bb171ac957c1d150_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2);
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[0];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_G_2 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[1];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_B_3 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[2];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_A_4 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[3];
            float _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3;
            Unity_Lerp_float(_Property_0edea7916ed7a189a62b0faf2c274601_Out_0, _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0, _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3);
            float _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0 = _IceNoiseSmoothness;
            float _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3;
            Unity_Lerp_float(_Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3, _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3, _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3);
            float _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6, 2, _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2);
            float _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2;
            Unity_Add_float(_Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2, -1, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2);
            float _Property_cea4e47b293a988a83643b43f76c92ba_Out_0 = _DetailSmoothnessScale;
            float _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2;
            Unity_Multiply_float_float(_Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Property_cea4e47b293a988a83643b43f76c92ba_Out_0, _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2);
            float _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1;
            Unity_Saturate_float(_Multiply_2008466558f0e4819e60b3c41d94487c_Out_2, _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1);
            float _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1;
            Unity_Absolute_float(_Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43;
            float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1);
            float _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0 = _WetSmoothness;
            float _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1, _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3);
            float2 _Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0 = float2(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7, _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5);
            float2 _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2;
            Unity_Multiply_float2_float2(_Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0, float2(2, 2), _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2);
            float2 _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2;
            Unity_Add_float2(_Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2, float2(-1, -1), _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2);
            float _Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0 = _DetailNormalScale;
            float2 _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2;
            Unity_Multiply_float2_float2(_Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2, (_Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0.xx), _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2);
            float _Split_c4822b8eaff9b185be7c059792345712_R_1 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[0];
            float _Split_c4822b8eaff9b185be7c059792345712_G_2 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[1];
            float _Split_c4822b8eaff9b185be7c059792345712_B_3 = 0;
            float _Split_c4822b8eaff9b185be7c059792345712_A_4 = 0;
            float _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2;
            Unity_DotProduct_float2(_Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2);
            float _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1;
            Unity_Saturate_float(_DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2, _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1);
            float _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1;
            Unity_OneMinus_float(_Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1, _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1);
            float _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1;
            Unity_SquareRoot_float(_OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float3 _Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0 = float3(_Split_c4822b8eaff9b185be7c059792345712_R_1, _Split_c4822b8eaff9b185be7c059792345712_G_2, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            float _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0 = _NoiseNormalScale;
            float3 _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2.xyz), _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2);
            float3 _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3;
            Unity_Lerp_float3(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3);
            float3 _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            Unity_NormalBlend_float(_Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0, _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3, _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2);
            float _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1;
            Unity_OneMinus_float(_Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1);
            float _Property_42e21c36617ec48ba2d35424c394cb28_Out_0 = _Ice_Thickness;
            float _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2;
            Unity_Multiply_float_float(_OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1, _Property_42e21c36617ec48ba2d35424c394cb28_Out_0, _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2);
            float _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            Unity_Clamp_float(_Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2, 0, 1, _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3);
            surface.Distortion = _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            surface.DistortionBlur = 0;
            surface.BaseColor = _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            surface.TransmissionMask = 1;
            surface.Thickness = _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            surface.DiffusionProfileHash = _DiffusionProfileHash;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVertMeshCustomInterpolation' */
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
            output.positionPredisplacementRWS = input.positionPredisplacementRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
            output.texCoord3 =                  input.texCoord3;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVaryingsToFragInputs' */
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.WorldSpacePosition =                         input.positionRWS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.ScreenPosition = ComputeScreenPos(TransformWorldToHClip(input.positionRWS), _ProjectionParams.x);
        
        #if UNITY_UV_STARTS_AT_TOP
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #else
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
            output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
            output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        
            output.uv0 =                                        input.texCoord0;
            output.uv2 =                                        input.texCoord2;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
            surfaceData.thickness =                 surfaceDescription.Thickness;
            surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassLightTransport.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "ScenePickingPass"
            Tags
            {
                "LightMode" = "Picking"
            }
        
            // Render State
            Cull [_CullMode]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma editor_sync_compilation
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define SCENEPICKINGPASS 1
        #define REQUIRE_DEPTH_TEXTURE
        #define REQUIRE_OPAQUE_TEXTURE
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float _WaterAlphaMultiply;
        float _WaterAlphaPower;
        float _CleanFalloffMultiply;
        float _CleanFalloffPower;
        float _ShalowFalloffMultiply;
        float _ShalowFalloffPower;
        float _CleanColorPower;
        float4 _ShalowColor;
        float4 _DeepColor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float _IceNoiseScale;
        float _IceNoiseContrast;
        float _IceNoisePower;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _IceNoiseNormal_TexelSize;
        float _NoiseNormalScale;
        float _BaseAO;
        float _IceSmoothness;
        float _IceCrackSmoothness;
        float _IceNoiseSmoothness;
        float4 _ParalaxMap_TexelSize;
        float _ParalaxOffset;
        float _IceParallaxSteps;
        float _IceDepth;
        float _ParallaxFalloff;
        float _IceParallaxNoiseScale;
        float _IceParallaxNoiseMin;
        float _IceParallaxNoiseMax;
        float _Ice_Thickness;
        float _IceDistortion;
        float _Ice_Noise_Distortion;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_IceNoiseNormal);
        SAMPLER(sampler_IceNoiseNormal);
        TEXTURE2D(_ParalaxMap);
        SAMPLER(sampler_ParalaxMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Hashes.hlsl"
        #include "./NMParallaxLayers.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 WorldSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 ScreenPosition;
             float2 NDCPosition;
             float2 PixelPosition;
             float4 uv0;
             float4 uv2;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord2;
            output.interp5.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord2 = input.interp4.xyzw;
            output.color = input.interp5.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Branch_float4(float Predicate, float4 True, float4 False, out float4 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_058f4fba88c3437288219f1929444bf2_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_43d85b3291324c848dfbeec6adac2a71_Out_0 = IN.uv0;
        float4 _UV_36881dcaab9040168fc5215dcd00f352_Out_0 = IN.uv2;
        float4 _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3;
        Unity_Branch_float4(_Property_058f4fba88c3437288219f1929444bf2_Out_0, _UV_43d85b3291324c848dfbeec6adac2a71_Out_0, _UV_36881dcaab9040168fc5215dcd00f352_Out_0, _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float((_Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3.xy), _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3) );
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1;
        {
        float3x3 tangentTransform = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, tangentTransform, true);
        }
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        float Unity_SimpleNoise_ValueNoise_LegacySine_float (float2 uv)
        {
        float2 i = floor(uv);
        float2 f = frac(uv);
        f = f * f * (3.0 - 2.0 * f);
        uv = abs(frac(uv) - 0.5);
        float2 c0 = i + float2(0.0, 0.0);
        float2 c1 = i + float2(1.0, 0.0);
        float2 c2 = i + float2(0.0, 1.0);
        float2 c3 = i + float2(1.0, 1.0);
        float r0; Hash_LegacySine_2_1_float(c0, r0);
        float r1; Hash_LegacySine_2_1_float(c1, r1);
        float r2; Hash_LegacySine_2_1_float(c2, r2);
        float r3; Hash_LegacySine_2_1_float(c3, r3);
        float bottomOfGrid = lerp(r0, r1, f.x);
        float topOfGrid = lerp(r2, r3, f.x);
        float t = lerp(bottomOfGrid, topOfGrid, f.y);
        return t;
        }
        
        void Unity_SimpleNoise_LegacySine_float(float2 UV, float Scale, out float Out)
        {
        float freq, amp;
        Out = 0.0f;
        freq = pow(2.0, float(0));
        amp = pow(0.5, float(3-0));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(1));
        amp = pow(0.5, float(3-1));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(2));
        amp = pow(0.5, float(3-2));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(float Vector1_E4D1C13A, float Vector1_CBF4C304, Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float IN, out float XYZ_1)
        {
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0 = Vector1_CBF4C304;
        float _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2);
        float _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2);
        float _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, _Add_e855069f047fae8ea9027d56acb61e56_Out_2, _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Contrast_float(float3 In, float Contrast, out float3 Out)
        {
            float midpoint = pow(0.5, 2.2);
            Out =  (In - midpoint) * Contrast + midpoint;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Lerp_float2(float2 A, float2 B, float2 T, out float2 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_029e8e8198564838b9389b902a09fb22_Out_0 = IN.uv0;
        float4 _UV_7a6209af1506424fb75c81e87e42035a_Out_0 = IN.uv2;
        float4 _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3;
        Unity_Branch_float4(_Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0, _UV_029e8e8198564838b9389b902a09fb22_Out_0, _UV_7a6209af1506424fb75c81e87e42035a_Out_0, _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float((_Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3.xy), _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3) );
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        struct Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float IN, out float4 XZ_2)
        {
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        XZ_2 = (float4(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3, 0.0, 1.0));
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Blend_Lighten_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            Out = max(Blend, Base);
            Out = lerp(Base, Out, Opacity);
        }
        
        float3 Unity_HDRP_SampleSceneColor_float(float2 uv, float lod, float exposureMultiplier)
        {
            exposureMultiplier = 1.0;
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(_SURFACE_TYPE_TRANSPARENT) && defined(SHADERPASS) && (SHADERPASS != SHADERPASS_LIGHT_TRANSPORT) && (SHADERPASS != SHADERPASS_PATH_TRACING) && (SHADERPASS != SHADERPASS_RAYTRACING_VISIBILITY) && (SHADERPASS != SHADERPASS_RAYTRACING_FORWARD)
            return SampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(CUSTOM_PASS_SAMPLING_HLSL) && defined(SHADERPASS) && (SHADERPASS == SHADERPASS_DRAWPROCEDURAL || SHADERPASS == SHADERPASS_BLIT)
            return CustomPassSampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            return float3(0.0, 0.0, 0.0);
        }
        
        void Unity_Comparison_Greater_float(float A, float B, out float Out)
        {
            Out = A > B ? 1 : 0;
        }
        
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float
        {
        float4 ScreenPosition;
        };
        
        void SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float IN, out float2 OutVector2_1)
        {
        float4 _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0 = IN.ScreenPosition;
        float _Split_b183780fdd2343708af64846c96ee2a7_R_1 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[0];
        float _Split_b183780fdd2343708af64846c96ee2a7_G_2 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[1];
        float _Split_b183780fdd2343708af64846c96ee2a7_B_3 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[2];
        float _Split_b183780fdd2343708af64846c96ee2a7_A_4 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[3];
        float2 _Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0 = float2(_Split_b183780fdd2343708af64846c96ee2a7_R_1, _Split_b183780fdd2343708af64846c96ee2a7_G_2);
        float2 _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        Unity_Divide_float2(_Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0, (_Split_b183780fdd2343708af64846c96ee2a7_A_4.xx), _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2);
        OutVector2_1 = _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        }
        
        void Unity_SceneDepth_Raw_float(float4 UV, out float Out)
        {
            Out = SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void GetClipValues_float(out float2 Out){
        Out = float2(
        
        UNITY_NEAR_CLIP_VALUE,
        
        UNITY_RAW_FAR_CLIP_VALUE
        
        );
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
        {
            Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
        }
        
        struct Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float
        {
        float4 ScreenPosition;
        };
        
        void SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 _DistortionUV, Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float IN, out float Out_Depth_1, out float Out_DepthDistortion_2)
        {
        float _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2;
        Unity_Comparison_Greater_float(unity_OrthoParams.w, 0, _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2);
        float _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2;
        Unity_Comparison_Greater_float(_ProjectionParams.x, 0, _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2);
        Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff;
        _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff.ScreenPosition = IN.ScreenPosition;
        half2 _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1;
        SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff, _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1);
        float _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1;
        Unity_SceneDepth_Raw_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1);
        float _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1;
        Unity_OneMinus_float(_SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1);
        float _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3);
        float _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3, _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3);
        float4 _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0 = IN.ScreenPosition;
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float2 _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0;
        GetClipValues_float(_GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0);
        float _Remap_1907dbd4ae754843a5d74245135e2923_Out_3;
        Unity_Remap_float(_Split_62277fd721f74a399bd1009f8b3cb8e3_B_3, _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0, float2 (0, 1), _Remap_1907dbd4ae754843a5d74245135e2923_Out_3);
        float _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Remap_1907dbd4ae754843a5d74245135e2923_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3);
        float _Subtract_b98f5f0e27014160829b37533239eca2_Out_2;
        Unity_Subtract_float(_Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_b98f5f0e27014160829b37533239eca2_Out_2);
        float _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1;
        Unity_Saturate_float(_Subtract_b98f5f0e27014160829b37533239eca2_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1);
        float _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1);
        float _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2;
        Unity_Multiply_float_float(_SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1, _ProjectionParams.z, _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2);
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2;
        Unity_Subtract_float(_Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2);
        float _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2, _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3);
        float2 _Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0 = _DistortionUV;
        float _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1;
        Unity_SceneDepth_Raw_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1);
        float _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1;
        Unity_OneMinus_float(_SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1);
        float _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3);
        float _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3, _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3);
        float _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2;
        Unity_Subtract_float(_Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2);
        float _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1;
        Unity_Saturate_float(_Subtract_4531c88bf2b147d7a2998422330b141f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1);
        float _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1);
        float _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2;
        Unity_Multiply_float_float(_SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1, _ProjectionParams.z, _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2);
        float _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2;
        Unity_Subtract_float(_Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2);
        float _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2, _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3);
        Out_Depth_1 = _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Out_DepthDistortion_2 = _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82;
            float3 _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float2 Distortion;
            float DistortionBlur;
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            float _Property_e5176656505ae98292b155cb230ab233_Out_0 = _IceDistortion;
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_11506852e45cbb8f9732aebed8bbb210;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv0 = IN.uv0;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv2 = IN.uv2;
            float4 _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2);
            float _Split_f392619d76305f8e9a715324614291f5_R_1 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[0];
            float _Split_f392619d76305f8e9a715324614291f5_G_2 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[1];
            float _Split_f392619d76305f8e9a715324614291f5_B_3 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[2];
            float _Split_f392619d76305f8e9a715324614291f5_A_4 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[3];
            float4 _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4;
            float3 _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5;
            float2 _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6;
            Unity_Combine_float(_Split_f392619d76305f8e9a715324614291f5_R_1, _Split_f392619d76305f8e9a715324614291f5_G_2, 0, 0, _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4, _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5, _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6);
            float2 _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2;
            Unity_Multiply_float2_float2((_Property_e5176656505ae98292b155cb230ab233_Out_0.xx), _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6, _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2);
            float _Property_f0b2859614d93f86b920c65decb52ecf_Out_0 = _Ice_Noise_Distortion;
            UnityTexture2D _Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0 = UnityBuildTexture2DStructNoScale(_IceNoiseNormal);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv0 = IN.uv0;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv2 = IN.uv2;
            float4 _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2);
            float _Split_1c2740a46a2f0281ab926911287ce711_R_1 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[0];
            float _Split_1c2740a46a2f0281ab926911287ce711_G_2 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[1];
            float _Split_1c2740a46a2f0281ab926911287ce711_B_3 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[2];
            float _Split_1c2740a46a2f0281ab926911287ce711_A_4 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[3];
            float4 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4;
            float3 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5;
            float2 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6;
            Unity_Combine_float(_Split_1c2740a46a2f0281ab926911287ce711_R_1, _Split_1c2740a46a2f0281ab926911287ce711_G_2, 0, 0, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6);
            float2 _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2;
            Unity_Multiply_float2_float2((_Property_f0b2859614d93f86b920c65decb52ecf_Out_0.xx), _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2);
            float _Property_852d221028b884858f029fedb8de47d1_Out_0 = _IceNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_852d221028b884858f029fedb8de47d1_Out_0, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1);
            float _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1;
            Unity_Absolute_float(_TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1, _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1);
            float _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0 = _IceNoisePower;
            float _Power_1497f6299359e780a9aa8dde441d98cf_Out_2;
            Unity_Power_float(_Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1, _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0, _Power_1497f6299359e780a9aa8dde441d98cf_Out_2);
            float _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0 = _IceNoiseContrast;
            float3 _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2;
            Unity_Contrast_float((_Power_1497f6299359e780a9aa8dde441d98cf_Out_2.xxx), _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0, _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2);
            float _Split_f399eb1f3ad77580a75b6122d38451b5_R_1 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[0];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_G_2 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[1];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_B_3 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[2];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_A_4 = 0;
            float _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3;
            Unity_Clamp_float(_Split_f399eb1f3ad77580a75b6122d38451b5_R_1, 0, 1, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3);
            float2 _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            Unity_Lerp_float2(_Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xx), _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3);
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_893a7c3932a452849a5239a91f337a35;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv0 = IN.uv0;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv2 = IN.uv2;
            float4 _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_893a7c3932a452849a5239a91f337a35, _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2);
            float _Property_771911a99405a780908dd542012af7b8_Out_0 = _IceParallaxSteps;
            Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float _PlanarNMparallax_e8f8353657858a87933a47a40c74654d;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.uv0 = IN.uv0;
            float4 _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2;
            SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(_Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2);
            float _Property_efee416de222038a93fa523171fb9f0d_Out_0 = _ParalaxOffset;
            float _Property_720bc7e00a412889a10ca999204543f8_Out_0 = _IceParallaxNoiseMin;
            float _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0 = _IceParallaxNoiseMax;
            float _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0 = _IceParallaxNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1);
            float _Lerp_87de925175c62a8986309dc80655ce2f_Out_3;
            Unity_Lerp_float(_Property_720bc7e00a412889a10ca999204543f8_Out_0, _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3);
            float _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3;
            Unity_Lerp_float(_Property_efee416de222038a93fa523171fb9f0d_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3);
            float _Property_acfd17e181f6108ba7921d3e04df886d_Out_0 = _IceDepth;
            float _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0 = _ParallaxFalloff;
            float _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3;
            Unity_Lerp_float(_Property_eede9dad69eea580b2a3fdc05280f02f_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3);
            UnityTexture2D _Property_7c5c99f2c1b340ec980675a076619f86_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            float4 _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2;
            ParallaxLayers_float(_Property_771911a99405a780908dd542012af7b8_Out_0, (_PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2.xy), _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3, _Property_acfd17e181f6108ba7921d3e04df886d_Out_0, IN.TangentSpaceViewDirection, IN.WorldSpaceViewDirection, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _Property_7c5c99f2c1b340ec980675a076619f86_Out_0, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2);
            float4 _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2;
            Unity_Blend_Lighten_float4(_PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2, _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            float3 _HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2 = Unity_HDRP_SampleSceneColor_float(float4(IN.NDCPosition.xy, 0, 0).xy, 0, 1.0);
            float _Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0 = _CleanColorPower;
            float3 _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2;
            Unity_Multiply_float3_float3(_HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2, (_Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0.xxx), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2);
            float4 _Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0 = _DeepColor;
            float4 _Property_7094041d89afbd878cb83460f4ab68b8_Out_0 = _ShalowColor;
            Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c;
            _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c.ScreenPosition = IN.ScreenPosition;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2;
            SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 (0, 0), _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2);
            float _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0 = _ShalowFalloffMultiply;
            float _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0, _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2);
            float _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1;
            Unity_Absolute_float(_Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2, _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1);
            float _Property_e6dd087698d3e984bd5eb642347af797_Out_0 = _ShalowFalloffPower;
            float _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2;
            Unity_Multiply_float_float(_Property_e6dd087698d3e984bd5eb642347af797_Out_0, -1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2);
            float _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2;
            Unity_Power_float(_Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2, _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2);
            float _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1;
            Unity_Saturate_float(_Power_aaf82c5db3291a8bb2095cce38670a92_Out_2, _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1);
            float _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3;
            Unity_Clamp_float(_Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1, 0, 1, _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3);
            float4 _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3;
            Unity_Lerp_float4(_Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0, _Property_7094041d89afbd878cb83460f4ab68b8_Out_0, (_Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3.xxxx), _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3);
            float3 _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2;
            Unity_Multiply_float3_float3((_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2);
            float _Property_22da60d6cbff958696ddee1c161db229_Out_0 = _WaterAlphaMultiply;
            float _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_22da60d6cbff958696ddee1c161db229_Out_0, _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2);
            float _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3;
            Unity_Clamp_float(_Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2, 0, 1, _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3);
            float _Absolute_c4059e430bb17486afd523c0f333e478_Out_1;
            Unity_Absolute_float(_Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3, _Absolute_c4059e430bb17486afd523c0f333e478_Out_1);
            float _Property_cd34ee7769676e85b3e223f0e908967c_Out_0 = _WaterAlphaPower;
            float _Power_2c1f1e86c544138396974457f6515752_Out_2;
            Unity_Power_float(_Absolute_c4059e430bb17486afd523c0f333e478_Out_1, _Property_cd34ee7769676e85b3e223f0e908967c_Out_0, _Power_2c1f1e86c544138396974457f6515752_Out_2);
            float _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3;
            Unity_Clamp_float(_Power_2c1f1e86c544138396974457f6515752_Out_2, 0, 1, _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3);
            float3 _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3;
            Unity_Lerp_float3(_Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2, (_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), (_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3.xxx), _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3);
            float _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0 = _CleanFalloffMultiply;
            float _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0, _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2);
            float _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3;
            Unity_Clamp_float(_Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2, 0, 1, _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3);
            float _Absolute_2efac825a986e28190f26200795ca9ec_Out_1;
            Unity_Absolute_float(_Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3, _Absolute_2efac825a986e28190f26200795ca9ec_Out_1);
            float _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0 = _CleanFalloffPower;
            float _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2;
            Unity_Power_float(_Absolute_2efac825a986e28190f26200795ca9ec_Out_1, _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0, _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2);
            float _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3;
            Unity_Clamp_float(_Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2, 0, 1, _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3);
            float3 _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3;
            Unity_Lerp_float3(_Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3, (_Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3.xxx), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3);
            float3 _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3;
            Unity_Lerp_float3((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3);
            UnityTexture2D _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_256e5676e1089881ae3214634430b140_Out_0 = _DetailTilingOffset;
            float _Split_257d0b6ea953418d97fd7daa8128bf35_R_1 = _Property_256e5676e1089881ae3214634430b140_Out_0[0];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_G_2 = _Property_256e5676e1089881ae3214634430b140_Out_0[1];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_B_3 = _Property_256e5676e1089881ae3214634430b140_Out_0[2];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_A_4 = _Property_256e5676e1089881ae3214634430b140_Out_0[3];
            float2 _Vector2_98295494172421878c7a16cb2baddf9a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_R_1, _Split_257d0b6ea953418d97fd7daa8128bf35_G_2);
            float2 _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_B_3, _Split_257d0b6ea953418d97fd7daa8128bf35_A_4);
            float2 _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_98295494172421878c7a16cb2baddf9a_Out_0, _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0, _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3);
            float4 _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0 = SAMPLE_TEXTURE2D(_Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.tex, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.samplerstate, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.GetTransformedUV(_TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3) );
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.r;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.g;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.b;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.a;
            float _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4, 2, _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2);
            float _Add_fd3efcae64779e848ef39919335cd44d_Out_2;
            Unity_Add_float(_Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2, -1, _Add_fd3efcae64779e848ef39919335cd44d_Out_2);
            float _Property_605f29777330a58ba88ac032e905433b_Out_0 = _DetailAlbedoScale;
            float _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2;
            Unity_Multiply_float_float(_Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Property_605f29777330a58ba88ac032e905433b_Out_0, _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2);
            float _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1;
            Unity_Saturate_float(_Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2, _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1);
            float _Absolute_8acef423205118879e75274a48969d34_Out_1;
            Unity_Absolute_float(_Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1, _Absolute_8acef423205118879e75274a48969d34_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185;
            float3 _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float((float4(_Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3, 1.0)), _Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Absolute_8acef423205118879e75274a48969d34_Out_1, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1);
            float4 _Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0 = _WetColor;
            float3 _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2;
            Unity_Multiply_float3_float3((_Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0.xyz), _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2);
            float _Split_5b2299b48b10138ea40c141b79bfe90e_R_1 = IN.VertexColor[0];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_G_2 = IN.VertexColor[1];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_B_3 = IN.VertexColor[2];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_A_4 = IN.VertexColor[3];
            float _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3;
            Unity_Clamp_float(_Split_5b2299b48b10138ea40c141b79bfe90e_R_1, 0, 1, _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3);
            float _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1;
            Unity_OneMinus_float(_Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1);
            float3 _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            Unity_Lerp_float3(_BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2, (_OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1.xxx), _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3);
            float _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            Unity_Multiply_float_float(_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3, _Split_5b2299b48b10138ea40c141b79bfe90e_A_4, _Multiply_ffa35df91e1277898c1160f454087deb_Out_2);
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAO;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _IceSmoothness;
            float _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0 = _IceCrackSmoothness;
            UnityTexture2D _Property_be61fb085f680285bb171ac957c1d150_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv0 = IN.uv0;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv2 = IN.uv2;
            float4 _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_be61fb085f680285bb171ac957c1d150_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2);
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[0];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_G_2 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[1];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_B_3 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[2];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_A_4 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[3];
            float _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3;
            Unity_Lerp_float(_Property_0edea7916ed7a189a62b0faf2c274601_Out_0, _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0, _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3);
            float _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0 = _IceNoiseSmoothness;
            float _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3;
            Unity_Lerp_float(_Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3, _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3, _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3);
            float _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6, 2, _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2);
            float _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2;
            Unity_Add_float(_Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2, -1, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2);
            float _Property_cea4e47b293a988a83643b43f76c92ba_Out_0 = _DetailSmoothnessScale;
            float _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2;
            Unity_Multiply_float_float(_Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Property_cea4e47b293a988a83643b43f76c92ba_Out_0, _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2);
            float _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1;
            Unity_Saturate_float(_Multiply_2008466558f0e4819e60b3c41d94487c_Out_2, _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1);
            float _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1;
            Unity_Absolute_float(_Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43;
            float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1);
            float _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0 = _WetSmoothness;
            float _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1, _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3);
            float2 _Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0 = float2(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7, _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5);
            float2 _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2;
            Unity_Multiply_float2_float2(_Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0, float2(2, 2), _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2);
            float2 _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2;
            Unity_Add_float2(_Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2, float2(-1, -1), _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2);
            float _Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0 = _DetailNormalScale;
            float2 _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2;
            Unity_Multiply_float2_float2(_Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2, (_Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0.xx), _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2);
            float _Split_c4822b8eaff9b185be7c059792345712_R_1 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[0];
            float _Split_c4822b8eaff9b185be7c059792345712_G_2 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[1];
            float _Split_c4822b8eaff9b185be7c059792345712_B_3 = 0;
            float _Split_c4822b8eaff9b185be7c059792345712_A_4 = 0;
            float _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2;
            Unity_DotProduct_float2(_Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2);
            float _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1;
            Unity_Saturate_float(_DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2, _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1);
            float _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1;
            Unity_OneMinus_float(_Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1, _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1);
            float _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1;
            Unity_SquareRoot_float(_OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float3 _Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0 = float3(_Split_c4822b8eaff9b185be7c059792345712_R_1, _Split_c4822b8eaff9b185be7c059792345712_G_2, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            float _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0 = _NoiseNormalScale;
            float3 _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2.xyz), _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2);
            float3 _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3;
            Unity_Lerp_float3(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3);
            float3 _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            Unity_NormalBlend_float(_Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0, _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3, _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2);
            float _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1;
            Unity_OneMinus_float(_Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1);
            float _Property_42e21c36617ec48ba2d35424c394cb28_Out_0 = _Ice_Thickness;
            float _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2;
            Unity_Multiply_float_float(_OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1, _Property_42e21c36617ec48ba2d35424c394cb28_Out_0, _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2);
            float _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            Unity_Clamp_float(_Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2, 0, 1, _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3);
            surface.Distortion = _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            surface.DistortionBlur = 0;
            surface.BaseColor = _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            surface.TransmissionMask = 1;
            surface.Thickness = _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            surface.DiffusionProfileHash = _DiffusionProfileHash;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.WorldSpacePosition =                         input.positionRWS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.ScreenPosition = ComputeScreenPos(TransformWorldToHClip(input.positionRWS), _ProjectionParams.x);
        
        #if UNITY_UV_STARTS_AT_TOP
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #else
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
            output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
            output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        
            output.uv0 =                                        input.texCoord0;
            output.uv2 =                                        input.texCoord2;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
            surfaceData.thickness =                 surfaceDescription.Thickness;
            surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "SceneSelectionPass"
            Tags
            {
                "LightMode" = "SceneSelectionPass"
            }
        
            // Render State
            Cull Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma editor_sync_compilation
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SCENESELECTIONPASS 1
        #define REQUIRE_DEPTH_TEXTURE
        #define REQUIRE_OPAQUE_TEXTURE
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float _WaterAlphaMultiply;
        float _WaterAlphaPower;
        float _CleanFalloffMultiply;
        float _CleanFalloffPower;
        float _ShalowFalloffMultiply;
        float _ShalowFalloffPower;
        float _CleanColorPower;
        float4 _ShalowColor;
        float4 _DeepColor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float _IceNoiseScale;
        float _IceNoiseContrast;
        float _IceNoisePower;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _IceNoiseNormal_TexelSize;
        float _NoiseNormalScale;
        float _BaseAO;
        float _IceSmoothness;
        float _IceCrackSmoothness;
        float _IceNoiseSmoothness;
        float4 _ParalaxMap_TexelSize;
        float _ParalaxOffset;
        float _IceParallaxSteps;
        float _IceDepth;
        float _ParallaxFalloff;
        float _IceParallaxNoiseScale;
        float _IceParallaxNoiseMin;
        float _IceParallaxNoiseMax;
        float _Ice_Thickness;
        float _IceDistortion;
        float _Ice_Noise_Distortion;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_IceNoiseNormal);
        SAMPLER(sampler_IceNoiseNormal);
        TEXTURE2D(_ParalaxMap);
        SAMPLER(sampler_ParalaxMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Hashes.hlsl"
        #include "./NMParallaxLayers.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 WorldSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 ScreenPosition;
             float2 NDCPosition;
             float2 PixelPosition;
             float4 uv0;
             float4 uv2;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord2;
            output.interp5.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord2 = input.interp4.xyzw;
            output.color = input.interp5.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Branch_float4(float Predicate, float4 True, float4 False, out float4 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_058f4fba88c3437288219f1929444bf2_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_43d85b3291324c848dfbeec6adac2a71_Out_0 = IN.uv0;
        float4 _UV_36881dcaab9040168fc5215dcd00f352_Out_0 = IN.uv2;
        float4 _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3;
        Unity_Branch_float4(_Property_058f4fba88c3437288219f1929444bf2_Out_0, _UV_43d85b3291324c848dfbeec6adac2a71_Out_0, _UV_36881dcaab9040168fc5215dcd00f352_Out_0, _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float((_Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3.xy), _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3) );
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1;
        {
        float3x3 tangentTransform = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, tangentTransform, true);
        }
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        float Unity_SimpleNoise_ValueNoise_LegacySine_float (float2 uv)
        {
        float2 i = floor(uv);
        float2 f = frac(uv);
        f = f * f * (3.0 - 2.0 * f);
        uv = abs(frac(uv) - 0.5);
        float2 c0 = i + float2(0.0, 0.0);
        float2 c1 = i + float2(1.0, 0.0);
        float2 c2 = i + float2(0.0, 1.0);
        float2 c3 = i + float2(1.0, 1.0);
        float r0; Hash_LegacySine_2_1_float(c0, r0);
        float r1; Hash_LegacySine_2_1_float(c1, r1);
        float r2; Hash_LegacySine_2_1_float(c2, r2);
        float r3; Hash_LegacySine_2_1_float(c3, r3);
        float bottomOfGrid = lerp(r0, r1, f.x);
        float topOfGrid = lerp(r2, r3, f.x);
        float t = lerp(bottomOfGrid, topOfGrid, f.y);
        return t;
        }
        
        void Unity_SimpleNoise_LegacySine_float(float2 UV, float Scale, out float Out)
        {
        float freq, amp;
        Out = 0.0f;
        freq = pow(2.0, float(0));
        amp = pow(0.5, float(3-0));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(1));
        amp = pow(0.5, float(3-1));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(2));
        amp = pow(0.5, float(3-2));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(float Vector1_E4D1C13A, float Vector1_CBF4C304, Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float IN, out float XYZ_1)
        {
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0 = Vector1_CBF4C304;
        float _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2);
        float _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2);
        float _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, _Add_e855069f047fae8ea9027d56acb61e56_Out_2, _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Contrast_float(float3 In, float Contrast, out float3 Out)
        {
            float midpoint = pow(0.5, 2.2);
            Out =  (In - midpoint) * Contrast + midpoint;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Lerp_float2(float2 A, float2 B, float2 T, out float2 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_029e8e8198564838b9389b902a09fb22_Out_0 = IN.uv0;
        float4 _UV_7a6209af1506424fb75c81e87e42035a_Out_0 = IN.uv2;
        float4 _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3;
        Unity_Branch_float4(_Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0, _UV_029e8e8198564838b9389b902a09fb22_Out_0, _UV_7a6209af1506424fb75c81e87e42035a_Out_0, _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float((_Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3.xy), _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3) );
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        struct Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float IN, out float4 XZ_2)
        {
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        XZ_2 = (float4(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3, 0.0, 1.0));
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Blend_Lighten_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            Out = max(Blend, Base);
            Out = lerp(Base, Out, Opacity);
        }
        
        float3 Unity_HDRP_SampleSceneColor_float(float2 uv, float lod, float exposureMultiplier)
        {
            exposureMultiplier = 1.0;
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(_SURFACE_TYPE_TRANSPARENT) && defined(SHADERPASS) && (SHADERPASS != SHADERPASS_LIGHT_TRANSPORT) && (SHADERPASS != SHADERPASS_PATH_TRACING) && (SHADERPASS != SHADERPASS_RAYTRACING_VISIBILITY) && (SHADERPASS != SHADERPASS_RAYTRACING_FORWARD)
            return SampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(CUSTOM_PASS_SAMPLING_HLSL) && defined(SHADERPASS) && (SHADERPASS == SHADERPASS_DRAWPROCEDURAL || SHADERPASS == SHADERPASS_BLIT)
            return CustomPassSampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            return float3(0.0, 0.0, 0.0);
        }
        
        void Unity_Comparison_Greater_float(float A, float B, out float Out)
        {
            Out = A > B ? 1 : 0;
        }
        
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float
        {
        float4 ScreenPosition;
        };
        
        void SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float IN, out float2 OutVector2_1)
        {
        float4 _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0 = IN.ScreenPosition;
        float _Split_b183780fdd2343708af64846c96ee2a7_R_1 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[0];
        float _Split_b183780fdd2343708af64846c96ee2a7_G_2 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[1];
        float _Split_b183780fdd2343708af64846c96ee2a7_B_3 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[2];
        float _Split_b183780fdd2343708af64846c96ee2a7_A_4 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[3];
        float2 _Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0 = float2(_Split_b183780fdd2343708af64846c96ee2a7_R_1, _Split_b183780fdd2343708af64846c96ee2a7_G_2);
        float2 _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        Unity_Divide_float2(_Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0, (_Split_b183780fdd2343708af64846c96ee2a7_A_4.xx), _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2);
        OutVector2_1 = _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        }
        
        void Unity_SceneDepth_Raw_float(float4 UV, out float Out)
        {
            Out = SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void GetClipValues_float(out float2 Out){
        Out = float2(
        
        UNITY_NEAR_CLIP_VALUE,
        
        UNITY_RAW_FAR_CLIP_VALUE
        
        );
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
        {
            Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
        }
        
        struct Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float
        {
        float4 ScreenPosition;
        };
        
        void SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 _DistortionUV, Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float IN, out float Out_Depth_1, out float Out_DepthDistortion_2)
        {
        float _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2;
        Unity_Comparison_Greater_float(unity_OrthoParams.w, 0, _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2);
        float _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2;
        Unity_Comparison_Greater_float(_ProjectionParams.x, 0, _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2);
        Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff;
        _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff.ScreenPosition = IN.ScreenPosition;
        half2 _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1;
        SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff, _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1);
        float _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1;
        Unity_SceneDepth_Raw_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1);
        float _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1;
        Unity_OneMinus_float(_SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1);
        float _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3);
        float _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3, _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3);
        float4 _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0 = IN.ScreenPosition;
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float2 _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0;
        GetClipValues_float(_GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0);
        float _Remap_1907dbd4ae754843a5d74245135e2923_Out_3;
        Unity_Remap_float(_Split_62277fd721f74a399bd1009f8b3cb8e3_B_3, _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0, float2 (0, 1), _Remap_1907dbd4ae754843a5d74245135e2923_Out_3);
        float _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Remap_1907dbd4ae754843a5d74245135e2923_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3);
        float _Subtract_b98f5f0e27014160829b37533239eca2_Out_2;
        Unity_Subtract_float(_Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_b98f5f0e27014160829b37533239eca2_Out_2);
        float _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1;
        Unity_Saturate_float(_Subtract_b98f5f0e27014160829b37533239eca2_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1);
        float _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1);
        float _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2;
        Unity_Multiply_float_float(_SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1, _ProjectionParams.z, _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2);
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2;
        Unity_Subtract_float(_Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2);
        float _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2, _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3);
        float2 _Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0 = _DistortionUV;
        float _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1;
        Unity_SceneDepth_Raw_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1);
        float _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1;
        Unity_OneMinus_float(_SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1);
        float _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3);
        float _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3, _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3);
        float _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2;
        Unity_Subtract_float(_Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2);
        float _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1;
        Unity_Saturate_float(_Subtract_4531c88bf2b147d7a2998422330b141f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1);
        float _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1);
        float _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2;
        Unity_Multiply_float_float(_SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1, _ProjectionParams.z, _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2);
        float _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2;
        Unity_Subtract_float(_Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2);
        float _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2, _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3);
        Out_Depth_1 = _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Out_DepthDistortion_2 = _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82;
            float3 _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float2 Distortion;
            float DistortionBlur;
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            float _Property_e5176656505ae98292b155cb230ab233_Out_0 = _IceDistortion;
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_11506852e45cbb8f9732aebed8bbb210;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv0 = IN.uv0;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv2 = IN.uv2;
            float4 _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2);
            float _Split_f392619d76305f8e9a715324614291f5_R_1 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[0];
            float _Split_f392619d76305f8e9a715324614291f5_G_2 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[1];
            float _Split_f392619d76305f8e9a715324614291f5_B_3 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[2];
            float _Split_f392619d76305f8e9a715324614291f5_A_4 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[3];
            float4 _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4;
            float3 _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5;
            float2 _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6;
            Unity_Combine_float(_Split_f392619d76305f8e9a715324614291f5_R_1, _Split_f392619d76305f8e9a715324614291f5_G_2, 0, 0, _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4, _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5, _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6);
            float2 _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2;
            Unity_Multiply_float2_float2((_Property_e5176656505ae98292b155cb230ab233_Out_0.xx), _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6, _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2);
            float _Property_f0b2859614d93f86b920c65decb52ecf_Out_0 = _Ice_Noise_Distortion;
            UnityTexture2D _Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0 = UnityBuildTexture2DStructNoScale(_IceNoiseNormal);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv0 = IN.uv0;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv2 = IN.uv2;
            float4 _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2);
            float _Split_1c2740a46a2f0281ab926911287ce711_R_1 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[0];
            float _Split_1c2740a46a2f0281ab926911287ce711_G_2 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[1];
            float _Split_1c2740a46a2f0281ab926911287ce711_B_3 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[2];
            float _Split_1c2740a46a2f0281ab926911287ce711_A_4 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[3];
            float4 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4;
            float3 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5;
            float2 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6;
            Unity_Combine_float(_Split_1c2740a46a2f0281ab926911287ce711_R_1, _Split_1c2740a46a2f0281ab926911287ce711_G_2, 0, 0, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6);
            float2 _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2;
            Unity_Multiply_float2_float2((_Property_f0b2859614d93f86b920c65decb52ecf_Out_0.xx), _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2);
            float _Property_852d221028b884858f029fedb8de47d1_Out_0 = _IceNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_852d221028b884858f029fedb8de47d1_Out_0, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1);
            float _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1;
            Unity_Absolute_float(_TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1, _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1);
            float _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0 = _IceNoisePower;
            float _Power_1497f6299359e780a9aa8dde441d98cf_Out_2;
            Unity_Power_float(_Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1, _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0, _Power_1497f6299359e780a9aa8dde441d98cf_Out_2);
            float _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0 = _IceNoiseContrast;
            float3 _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2;
            Unity_Contrast_float((_Power_1497f6299359e780a9aa8dde441d98cf_Out_2.xxx), _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0, _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2);
            float _Split_f399eb1f3ad77580a75b6122d38451b5_R_1 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[0];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_G_2 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[1];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_B_3 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[2];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_A_4 = 0;
            float _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3;
            Unity_Clamp_float(_Split_f399eb1f3ad77580a75b6122d38451b5_R_1, 0, 1, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3);
            float2 _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            Unity_Lerp_float2(_Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xx), _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3);
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_893a7c3932a452849a5239a91f337a35;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv0 = IN.uv0;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv2 = IN.uv2;
            float4 _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_893a7c3932a452849a5239a91f337a35, _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2);
            float _Property_771911a99405a780908dd542012af7b8_Out_0 = _IceParallaxSteps;
            Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float _PlanarNMparallax_e8f8353657858a87933a47a40c74654d;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.uv0 = IN.uv0;
            float4 _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2;
            SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(_Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2);
            float _Property_efee416de222038a93fa523171fb9f0d_Out_0 = _ParalaxOffset;
            float _Property_720bc7e00a412889a10ca999204543f8_Out_0 = _IceParallaxNoiseMin;
            float _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0 = _IceParallaxNoiseMax;
            float _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0 = _IceParallaxNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1);
            float _Lerp_87de925175c62a8986309dc80655ce2f_Out_3;
            Unity_Lerp_float(_Property_720bc7e00a412889a10ca999204543f8_Out_0, _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3);
            float _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3;
            Unity_Lerp_float(_Property_efee416de222038a93fa523171fb9f0d_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3);
            float _Property_acfd17e181f6108ba7921d3e04df886d_Out_0 = _IceDepth;
            float _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0 = _ParallaxFalloff;
            float _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3;
            Unity_Lerp_float(_Property_eede9dad69eea580b2a3fdc05280f02f_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3);
            UnityTexture2D _Property_7c5c99f2c1b340ec980675a076619f86_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            float4 _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2;
            ParallaxLayers_float(_Property_771911a99405a780908dd542012af7b8_Out_0, (_PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2.xy), _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3, _Property_acfd17e181f6108ba7921d3e04df886d_Out_0, IN.TangentSpaceViewDirection, IN.WorldSpaceViewDirection, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _Property_7c5c99f2c1b340ec980675a076619f86_Out_0, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2);
            float4 _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2;
            Unity_Blend_Lighten_float4(_PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2, _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            float3 _HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2 = Unity_HDRP_SampleSceneColor_float(float4(IN.NDCPosition.xy, 0, 0).xy, 0, 1.0);
            float _Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0 = _CleanColorPower;
            float3 _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2;
            Unity_Multiply_float3_float3(_HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2, (_Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0.xxx), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2);
            float4 _Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0 = _DeepColor;
            float4 _Property_7094041d89afbd878cb83460f4ab68b8_Out_0 = _ShalowColor;
            Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c;
            _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c.ScreenPosition = IN.ScreenPosition;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2;
            SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 (0, 0), _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2);
            float _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0 = _ShalowFalloffMultiply;
            float _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0, _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2);
            float _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1;
            Unity_Absolute_float(_Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2, _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1);
            float _Property_e6dd087698d3e984bd5eb642347af797_Out_0 = _ShalowFalloffPower;
            float _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2;
            Unity_Multiply_float_float(_Property_e6dd087698d3e984bd5eb642347af797_Out_0, -1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2);
            float _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2;
            Unity_Power_float(_Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2, _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2);
            float _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1;
            Unity_Saturate_float(_Power_aaf82c5db3291a8bb2095cce38670a92_Out_2, _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1);
            float _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3;
            Unity_Clamp_float(_Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1, 0, 1, _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3);
            float4 _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3;
            Unity_Lerp_float4(_Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0, _Property_7094041d89afbd878cb83460f4ab68b8_Out_0, (_Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3.xxxx), _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3);
            float3 _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2;
            Unity_Multiply_float3_float3((_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2);
            float _Property_22da60d6cbff958696ddee1c161db229_Out_0 = _WaterAlphaMultiply;
            float _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_22da60d6cbff958696ddee1c161db229_Out_0, _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2);
            float _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3;
            Unity_Clamp_float(_Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2, 0, 1, _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3);
            float _Absolute_c4059e430bb17486afd523c0f333e478_Out_1;
            Unity_Absolute_float(_Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3, _Absolute_c4059e430bb17486afd523c0f333e478_Out_1);
            float _Property_cd34ee7769676e85b3e223f0e908967c_Out_0 = _WaterAlphaPower;
            float _Power_2c1f1e86c544138396974457f6515752_Out_2;
            Unity_Power_float(_Absolute_c4059e430bb17486afd523c0f333e478_Out_1, _Property_cd34ee7769676e85b3e223f0e908967c_Out_0, _Power_2c1f1e86c544138396974457f6515752_Out_2);
            float _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3;
            Unity_Clamp_float(_Power_2c1f1e86c544138396974457f6515752_Out_2, 0, 1, _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3);
            float3 _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3;
            Unity_Lerp_float3(_Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2, (_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), (_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3.xxx), _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3);
            float _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0 = _CleanFalloffMultiply;
            float _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0, _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2);
            float _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3;
            Unity_Clamp_float(_Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2, 0, 1, _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3);
            float _Absolute_2efac825a986e28190f26200795ca9ec_Out_1;
            Unity_Absolute_float(_Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3, _Absolute_2efac825a986e28190f26200795ca9ec_Out_1);
            float _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0 = _CleanFalloffPower;
            float _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2;
            Unity_Power_float(_Absolute_2efac825a986e28190f26200795ca9ec_Out_1, _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0, _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2);
            float _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3;
            Unity_Clamp_float(_Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2, 0, 1, _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3);
            float3 _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3;
            Unity_Lerp_float3(_Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3, (_Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3.xxx), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3);
            float3 _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3;
            Unity_Lerp_float3((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3);
            UnityTexture2D _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_256e5676e1089881ae3214634430b140_Out_0 = _DetailTilingOffset;
            float _Split_257d0b6ea953418d97fd7daa8128bf35_R_1 = _Property_256e5676e1089881ae3214634430b140_Out_0[0];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_G_2 = _Property_256e5676e1089881ae3214634430b140_Out_0[1];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_B_3 = _Property_256e5676e1089881ae3214634430b140_Out_0[2];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_A_4 = _Property_256e5676e1089881ae3214634430b140_Out_0[3];
            float2 _Vector2_98295494172421878c7a16cb2baddf9a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_R_1, _Split_257d0b6ea953418d97fd7daa8128bf35_G_2);
            float2 _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_B_3, _Split_257d0b6ea953418d97fd7daa8128bf35_A_4);
            float2 _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_98295494172421878c7a16cb2baddf9a_Out_0, _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0, _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3);
            float4 _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0 = SAMPLE_TEXTURE2D(_Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.tex, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.samplerstate, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.GetTransformedUV(_TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3) );
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.r;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.g;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.b;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.a;
            float _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4, 2, _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2);
            float _Add_fd3efcae64779e848ef39919335cd44d_Out_2;
            Unity_Add_float(_Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2, -1, _Add_fd3efcae64779e848ef39919335cd44d_Out_2);
            float _Property_605f29777330a58ba88ac032e905433b_Out_0 = _DetailAlbedoScale;
            float _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2;
            Unity_Multiply_float_float(_Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Property_605f29777330a58ba88ac032e905433b_Out_0, _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2);
            float _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1;
            Unity_Saturate_float(_Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2, _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1);
            float _Absolute_8acef423205118879e75274a48969d34_Out_1;
            Unity_Absolute_float(_Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1, _Absolute_8acef423205118879e75274a48969d34_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185;
            float3 _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float((float4(_Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3, 1.0)), _Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Absolute_8acef423205118879e75274a48969d34_Out_1, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1);
            float4 _Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0 = _WetColor;
            float3 _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2;
            Unity_Multiply_float3_float3((_Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0.xyz), _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2);
            float _Split_5b2299b48b10138ea40c141b79bfe90e_R_1 = IN.VertexColor[0];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_G_2 = IN.VertexColor[1];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_B_3 = IN.VertexColor[2];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_A_4 = IN.VertexColor[3];
            float _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3;
            Unity_Clamp_float(_Split_5b2299b48b10138ea40c141b79bfe90e_R_1, 0, 1, _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3);
            float _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1;
            Unity_OneMinus_float(_Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1);
            float3 _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            Unity_Lerp_float3(_BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2, (_OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1.xxx), _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3);
            float _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            Unity_Multiply_float_float(_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3, _Split_5b2299b48b10138ea40c141b79bfe90e_A_4, _Multiply_ffa35df91e1277898c1160f454087deb_Out_2);
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAO;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _IceSmoothness;
            float _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0 = _IceCrackSmoothness;
            UnityTexture2D _Property_be61fb085f680285bb171ac957c1d150_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv0 = IN.uv0;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv2 = IN.uv2;
            float4 _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_be61fb085f680285bb171ac957c1d150_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2);
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[0];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_G_2 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[1];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_B_3 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[2];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_A_4 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[3];
            float _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3;
            Unity_Lerp_float(_Property_0edea7916ed7a189a62b0faf2c274601_Out_0, _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0, _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3);
            float _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0 = _IceNoiseSmoothness;
            float _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3;
            Unity_Lerp_float(_Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3, _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3, _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3);
            float _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6, 2, _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2);
            float _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2;
            Unity_Add_float(_Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2, -1, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2);
            float _Property_cea4e47b293a988a83643b43f76c92ba_Out_0 = _DetailSmoothnessScale;
            float _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2;
            Unity_Multiply_float_float(_Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Property_cea4e47b293a988a83643b43f76c92ba_Out_0, _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2);
            float _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1;
            Unity_Saturate_float(_Multiply_2008466558f0e4819e60b3c41d94487c_Out_2, _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1);
            float _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1;
            Unity_Absolute_float(_Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43;
            float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1);
            float _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0 = _WetSmoothness;
            float _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1, _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3);
            float2 _Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0 = float2(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7, _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5);
            float2 _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2;
            Unity_Multiply_float2_float2(_Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0, float2(2, 2), _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2);
            float2 _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2;
            Unity_Add_float2(_Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2, float2(-1, -1), _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2);
            float _Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0 = _DetailNormalScale;
            float2 _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2;
            Unity_Multiply_float2_float2(_Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2, (_Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0.xx), _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2);
            float _Split_c4822b8eaff9b185be7c059792345712_R_1 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[0];
            float _Split_c4822b8eaff9b185be7c059792345712_G_2 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[1];
            float _Split_c4822b8eaff9b185be7c059792345712_B_3 = 0;
            float _Split_c4822b8eaff9b185be7c059792345712_A_4 = 0;
            float _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2;
            Unity_DotProduct_float2(_Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2);
            float _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1;
            Unity_Saturate_float(_DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2, _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1);
            float _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1;
            Unity_OneMinus_float(_Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1, _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1);
            float _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1;
            Unity_SquareRoot_float(_OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float3 _Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0 = float3(_Split_c4822b8eaff9b185be7c059792345712_R_1, _Split_c4822b8eaff9b185be7c059792345712_G_2, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            float _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0 = _NoiseNormalScale;
            float3 _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2.xyz), _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2);
            float3 _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3;
            Unity_Lerp_float3(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3);
            float3 _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            Unity_NormalBlend_float(_Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0, _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3, _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2);
            float _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1;
            Unity_OneMinus_float(_Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1);
            float _Property_42e21c36617ec48ba2d35424c394cb28_Out_0 = _Ice_Thickness;
            float _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2;
            Unity_Multiply_float_float(_OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1, _Property_42e21c36617ec48ba2d35424c394cb28_Out_0, _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2);
            float _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            Unity_Clamp_float(_Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2, 0, 1, _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3);
            surface.Distortion = _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            surface.DistortionBlur = 0;
            surface.BaseColor = _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            surface.TransmissionMask = 1;
            surface.Thickness = _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            surface.DiffusionProfileHash = _DiffusionProfileHash;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.WorldSpacePosition =                         input.positionRWS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.ScreenPosition = ComputeScreenPos(TransformWorldToHClip(input.positionRWS), _ProjectionParams.x);
        
        #if UNITY_UV_STARTS_AT_TOP
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #else
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
            output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
            output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        
            output.uv0 =                                        input.texCoord0;
            output.uv2 =                                        input.texCoord2;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
            surfaceData.thickness =                 surfaceDescription.Thickness;
            surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "MotionVectors"
            Tags
            {
                "LightMode" = "MotionVectors"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskMV]
        Ref [_StencilRefMV]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma multi_compile _ WRITE_NORMAL_BUFFER
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ WRITE_DECAL_BUFFER
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_MOTION_VECTORS
        #define REQUIRE_DEPTH_TEXTURE
        #define REQUIRE_OPAQUE_TEXTURE
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float _WaterAlphaMultiply;
        float _WaterAlphaPower;
        float _CleanFalloffMultiply;
        float _CleanFalloffPower;
        float _ShalowFalloffMultiply;
        float _ShalowFalloffPower;
        float _CleanColorPower;
        float4 _ShalowColor;
        float4 _DeepColor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float _IceNoiseScale;
        float _IceNoiseContrast;
        float _IceNoisePower;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _IceNoiseNormal_TexelSize;
        float _NoiseNormalScale;
        float _BaseAO;
        float _IceSmoothness;
        float _IceCrackSmoothness;
        float _IceNoiseSmoothness;
        float4 _ParalaxMap_TexelSize;
        float _ParalaxOffset;
        float _IceParallaxSteps;
        float _IceDepth;
        float _ParallaxFalloff;
        float _IceParallaxNoiseScale;
        float _IceParallaxNoiseMin;
        float _IceParallaxNoiseMax;
        float _Ice_Thickness;
        float _IceDistortion;
        float _Ice_Noise_Distortion;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_IceNoiseNormal);
        SAMPLER(sampler_IceNoiseNormal);
        TEXTURE2D(_ParalaxMap);
        SAMPLER(sampler_ParalaxMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Hashes.hlsl"
        #include "./NMParallaxLayers.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 WorldSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 ScreenPosition;
             float2 NDCPosition;
             float2 PixelPosition;
             float4 uv0;
             float4 uv2;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord2;
            output.interp5.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord2 = input.interp4.xyzw;
            output.color = input.interp5.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Branch_float4(float Predicate, float4 True, float4 False, out float4 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_058f4fba88c3437288219f1929444bf2_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_43d85b3291324c848dfbeec6adac2a71_Out_0 = IN.uv0;
        float4 _UV_36881dcaab9040168fc5215dcd00f352_Out_0 = IN.uv2;
        float4 _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3;
        Unity_Branch_float4(_Property_058f4fba88c3437288219f1929444bf2_Out_0, _UV_43d85b3291324c848dfbeec6adac2a71_Out_0, _UV_36881dcaab9040168fc5215dcd00f352_Out_0, _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float((_Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3.xy), _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3) );
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1;
        {
        float3x3 tangentTransform = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, tangentTransform, true);
        }
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        float Unity_SimpleNoise_ValueNoise_LegacySine_float (float2 uv)
        {
        float2 i = floor(uv);
        float2 f = frac(uv);
        f = f * f * (3.0 - 2.0 * f);
        uv = abs(frac(uv) - 0.5);
        float2 c0 = i + float2(0.0, 0.0);
        float2 c1 = i + float2(1.0, 0.0);
        float2 c2 = i + float2(0.0, 1.0);
        float2 c3 = i + float2(1.0, 1.0);
        float r0; Hash_LegacySine_2_1_float(c0, r0);
        float r1; Hash_LegacySine_2_1_float(c1, r1);
        float r2; Hash_LegacySine_2_1_float(c2, r2);
        float r3; Hash_LegacySine_2_1_float(c3, r3);
        float bottomOfGrid = lerp(r0, r1, f.x);
        float topOfGrid = lerp(r2, r3, f.x);
        float t = lerp(bottomOfGrid, topOfGrid, f.y);
        return t;
        }
        
        void Unity_SimpleNoise_LegacySine_float(float2 UV, float Scale, out float Out)
        {
        float freq, amp;
        Out = 0.0f;
        freq = pow(2.0, float(0));
        amp = pow(0.5, float(3-0));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(1));
        amp = pow(0.5, float(3-1));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(2));
        amp = pow(0.5, float(3-2));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(float Vector1_E4D1C13A, float Vector1_CBF4C304, Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float IN, out float XYZ_1)
        {
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0 = Vector1_CBF4C304;
        float _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2);
        float _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2);
        float _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, _Add_e855069f047fae8ea9027d56acb61e56_Out_2, _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Contrast_float(float3 In, float Contrast, out float3 Out)
        {
            float midpoint = pow(0.5, 2.2);
            Out =  (In - midpoint) * Contrast + midpoint;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Lerp_float2(float2 A, float2 B, float2 T, out float2 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_029e8e8198564838b9389b902a09fb22_Out_0 = IN.uv0;
        float4 _UV_7a6209af1506424fb75c81e87e42035a_Out_0 = IN.uv2;
        float4 _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3;
        Unity_Branch_float4(_Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0, _UV_029e8e8198564838b9389b902a09fb22_Out_0, _UV_7a6209af1506424fb75c81e87e42035a_Out_0, _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float((_Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3.xy), _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3) );
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        struct Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float IN, out float4 XZ_2)
        {
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        XZ_2 = (float4(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3, 0.0, 1.0));
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Blend_Lighten_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            Out = max(Blend, Base);
            Out = lerp(Base, Out, Opacity);
        }
        
        float3 Unity_HDRP_SampleSceneColor_float(float2 uv, float lod, float exposureMultiplier)
        {
            exposureMultiplier = 1.0;
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(_SURFACE_TYPE_TRANSPARENT) && defined(SHADERPASS) && (SHADERPASS != SHADERPASS_LIGHT_TRANSPORT) && (SHADERPASS != SHADERPASS_PATH_TRACING) && (SHADERPASS != SHADERPASS_RAYTRACING_VISIBILITY) && (SHADERPASS != SHADERPASS_RAYTRACING_FORWARD)
            return SampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(CUSTOM_PASS_SAMPLING_HLSL) && defined(SHADERPASS) && (SHADERPASS == SHADERPASS_DRAWPROCEDURAL || SHADERPASS == SHADERPASS_BLIT)
            return CustomPassSampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            return float3(0.0, 0.0, 0.0);
        }
        
        void Unity_Comparison_Greater_float(float A, float B, out float Out)
        {
            Out = A > B ? 1 : 0;
        }
        
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float
        {
        float4 ScreenPosition;
        };
        
        void SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float IN, out float2 OutVector2_1)
        {
        float4 _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0 = IN.ScreenPosition;
        float _Split_b183780fdd2343708af64846c96ee2a7_R_1 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[0];
        float _Split_b183780fdd2343708af64846c96ee2a7_G_2 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[1];
        float _Split_b183780fdd2343708af64846c96ee2a7_B_3 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[2];
        float _Split_b183780fdd2343708af64846c96ee2a7_A_4 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[3];
        float2 _Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0 = float2(_Split_b183780fdd2343708af64846c96ee2a7_R_1, _Split_b183780fdd2343708af64846c96ee2a7_G_2);
        float2 _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        Unity_Divide_float2(_Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0, (_Split_b183780fdd2343708af64846c96ee2a7_A_4.xx), _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2);
        OutVector2_1 = _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        }
        
        void Unity_SceneDepth_Raw_float(float4 UV, out float Out)
        {
            Out = SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void GetClipValues_float(out float2 Out){
        Out = float2(
        
        UNITY_NEAR_CLIP_VALUE,
        
        UNITY_RAW_FAR_CLIP_VALUE
        
        );
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
        {
            Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
        }
        
        struct Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float
        {
        float4 ScreenPosition;
        };
        
        void SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 _DistortionUV, Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float IN, out float Out_Depth_1, out float Out_DepthDistortion_2)
        {
        float _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2;
        Unity_Comparison_Greater_float(unity_OrthoParams.w, 0, _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2);
        float _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2;
        Unity_Comparison_Greater_float(_ProjectionParams.x, 0, _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2);
        Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff;
        _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff.ScreenPosition = IN.ScreenPosition;
        half2 _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1;
        SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff, _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1);
        float _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1;
        Unity_SceneDepth_Raw_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1);
        float _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1;
        Unity_OneMinus_float(_SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1);
        float _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3);
        float _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3, _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3);
        float4 _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0 = IN.ScreenPosition;
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float2 _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0;
        GetClipValues_float(_GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0);
        float _Remap_1907dbd4ae754843a5d74245135e2923_Out_3;
        Unity_Remap_float(_Split_62277fd721f74a399bd1009f8b3cb8e3_B_3, _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0, float2 (0, 1), _Remap_1907dbd4ae754843a5d74245135e2923_Out_3);
        float _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Remap_1907dbd4ae754843a5d74245135e2923_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3);
        float _Subtract_b98f5f0e27014160829b37533239eca2_Out_2;
        Unity_Subtract_float(_Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_b98f5f0e27014160829b37533239eca2_Out_2);
        float _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1;
        Unity_Saturate_float(_Subtract_b98f5f0e27014160829b37533239eca2_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1);
        float _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1);
        float _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2;
        Unity_Multiply_float_float(_SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1, _ProjectionParams.z, _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2);
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2;
        Unity_Subtract_float(_Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2);
        float _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2, _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3);
        float2 _Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0 = _DistortionUV;
        float _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1;
        Unity_SceneDepth_Raw_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1);
        float _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1;
        Unity_OneMinus_float(_SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1);
        float _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3);
        float _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3, _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3);
        float _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2;
        Unity_Subtract_float(_Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2);
        float _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1;
        Unity_Saturate_float(_Subtract_4531c88bf2b147d7a2998422330b141f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1);
        float _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1);
        float _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2;
        Unity_Multiply_float_float(_SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1, _ProjectionParams.z, _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2);
        float _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2;
        Unity_Subtract_float(_Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2);
        float _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2, _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3);
        Out_Depth_1 = _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Out_DepthDistortion_2 = _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82;
            float3 _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float2 Distortion;
            float DistortionBlur;
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            float _Property_e5176656505ae98292b155cb230ab233_Out_0 = _IceDistortion;
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_11506852e45cbb8f9732aebed8bbb210;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv0 = IN.uv0;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv2 = IN.uv2;
            float4 _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2);
            float _Split_f392619d76305f8e9a715324614291f5_R_1 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[0];
            float _Split_f392619d76305f8e9a715324614291f5_G_2 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[1];
            float _Split_f392619d76305f8e9a715324614291f5_B_3 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[2];
            float _Split_f392619d76305f8e9a715324614291f5_A_4 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[3];
            float4 _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4;
            float3 _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5;
            float2 _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6;
            Unity_Combine_float(_Split_f392619d76305f8e9a715324614291f5_R_1, _Split_f392619d76305f8e9a715324614291f5_G_2, 0, 0, _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4, _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5, _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6);
            float2 _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2;
            Unity_Multiply_float2_float2((_Property_e5176656505ae98292b155cb230ab233_Out_0.xx), _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6, _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2);
            float _Property_f0b2859614d93f86b920c65decb52ecf_Out_0 = _Ice_Noise_Distortion;
            UnityTexture2D _Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0 = UnityBuildTexture2DStructNoScale(_IceNoiseNormal);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv0 = IN.uv0;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv2 = IN.uv2;
            float4 _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2);
            float _Split_1c2740a46a2f0281ab926911287ce711_R_1 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[0];
            float _Split_1c2740a46a2f0281ab926911287ce711_G_2 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[1];
            float _Split_1c2740a46a2f0281ab926911287ce711_B_3 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[2];
            float _Split_1c2740a46a2f0281ab926911287ce711_A_4 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[3];
            float4 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4;
            float3 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5;
            float2 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6;
            Unity_Combine_float(_Split_1c2740a46a2f0281ab926911287ce711_R_1, _Split_1c2740a46a2f0281ab926911287ce711_G_2, 0, 0, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6);
            float2 _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2;
            Unity_Multiply_float2_float2((_Property_f0b2859614d93f86b920c65decb52ecf_Out_0.xx), _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2);
            float _Property_852d221028b884858f029fedb8de47d1_Out_0 = _IceNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_852d221028b884858f029fedb8de47d1_Out_0, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1);
            float _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1;
            Unity_Absolute_float(_TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1, _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1);
            float _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0 = _IceNoisePower;
            float _Power_1497f6299359e780a9aa8dde441d98cf_Out_2;
            Unity_Power_float(_Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1, _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0, _Power_1497f6299359e780a9aa8dde441d98cf_Out_2);
            float _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0 = _IceNoiseContrast;
            float3 _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2;
            Unity_Contrast_float((_Power_1497f6299359e780a9aa8dde441d98cf_Out_2.xxx), _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0, _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2);
            float _Split_f399eb1f3ad77580a75b6122d38451b5_R_1 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[0];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_G_2 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[1];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_B_3 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[2];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_A_4 = 0;
            float _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3;
            Unity_Clamp_float(_Split_f399eb1f3ad77580a75b6122d38451b5_R_1, 0, 1, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3);
            float2 _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            Unity_Lerp_float2(_Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xx), _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3);
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_893a7c3932a452849a5239a91f337a35;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv0 = IN.uv0;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv2 = IN.uv2;
            float4 _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_893a7c3932a452849a5239a91f337a35, _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2);
            float _Property_771911a99405a780908dd542012af7b8_Out_0 = _IceParallaxSteps;
            Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float _PlanarNMparallax_e8f8353657858a87933a47a40c74654d;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.uv0 = IN.uv0;
            float4 _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2;
            SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(_Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2);
            float _Property_efee416de222038a93fa523171fb9f0d_Out_0 = _ParalaxOffset;
            float _Property_720bc7e00a412889a10ca999204543f8_Out_0 = _IceParallaxNoiseMin;
            float _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0 = _IceParallaxNoiseMax;
            float _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0 = _IceParallaxNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1);
            float _Lerp_87de925175c62a8986309dc80655ce2f_Out_3;
            Unity_Lerp_float(_Property_720bc7e00a412889a10ca999204543f8_Out_0, _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3);
            float _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3;
            Unity_Lerp_float(_Property_efee416de222038a93fa523171fb9f0d_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3);
            float _Property_acfd17e181f6108ba7921d3e04df886d_Out_0 = _IceDepth;
            float _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0 = _ParallaxFalloff;
            float _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3;
            Unity_Lerp_float(_Property_eede9dad69eea580b2a3fdc05280f02f_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3);
            UnityTexture2D _Property_7c5c99f2c1b340ec980675a076619f86_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            float4 _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2;
            ParallaxLayers_float(_Property_771911a99405a780908dd542012af7b8_Out_0, (_PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2.xy), _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3, _Property_acfd17e181f6108ba7921d3e04df886d_Out_0, IN.TangentSpaceViewDirection, IN.WorldSpaceViewDirection, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _Property_7c5c99f2c1b340ec980675a076619f86_Out_0, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2);
            float4 _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2;
            Unity_Blend_Lighten_float4(_PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2, _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            float3 _HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2 = Unity_HDRP_SampleSceneColor_float(float4(IN.NDCPosition.xy, 0, 0).xy, 0, 1.0);
            float _Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0 = _CleanColorPower;
            float3 _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2;
            Unity_Multiply_float3_float3(_HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2, (_Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0.xxx), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2);
            float4 _Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0 = _DeepColor;
            float4 _Property_7094041d89afbd878cb83460f4ab68b8_Out_0 = _ShalowColor;
            Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c;
            _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c.ScreenPosition = IN.ScreenPosition;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2;
            SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 (0, 0), _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2);
            float _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0 = _ShalowFalloffMultiply;
            float _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0, _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2);
            float _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1;
            Unity_Absolute_float(_Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2, _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1);
            float _Property_e6dd087698d3e984bd5eb642347af797_Out_0 = _ShalowFalloffPower;
            float _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2;
            Unity_Multiply_float_float(_Property_e6dd087698d3e984bd5eb642347af797_Out_0, -1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2);
            float _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2;
            Unity_Power_float(_Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2, _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2);
            float _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1;
            Unity_Saturate_float(_Power_aaf82c5db3291a8bb2095cce38670a92_Out_2, _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1);
            float _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3;
            Unity_Clamp_float(_Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1, 0, 1, _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3);
            float4 _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3;
            Unity_Lerp_float4(_Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0, _Property_7094041d89afbd878cb83460f4ab68b8_Out_0, (_Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3.xxxx), _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3);
            float3 _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2;
            Unity_Multiply_float3_float3((_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2);
            float _Property_22da60d6cbff958696ddee1c161db229_Out_0 = _WaterAlphaMultiply;
            float _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_22da60d6cbff958696ddee1c161db229_Out_0, _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2);
            float _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3;
            Unity_Clamp_float(_Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2, 0, 1, _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3);
            float _Absolute_c4059e430bb17486afd523c0f333e478_Out_1;
            Unity_Absolute_float(_Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3, _Absolute_c4059e430bb17486afd523c0f333e478_Out_1);
            float _Property_cd34ee7769676e85b3e223f0e908967c_Out_0 = _WaterAlphaPower;
            float _Power_2c1f1e86c544138396974457f6515752_Out_2;
            Unity_Power_float(_Absolute_c4059e430bb17486afd523c0f333e478_Out_1, _Property_cd34ee7769676e85b3e223f0e908967c_Out_0, _Power_2c1f1e86c544138396974457f6515752_Out_2);
            float _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3;
            Unity_Clamp_float(_Power_2c1f1e86c544138396974457f6515752_Out_2, 0, 1, _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3);
            float3 _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3;
            Unity_Lerp_float3(_Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2, (_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), (_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3.xxx), _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3);
            float _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0 = _CleanFalloffMultiply;
            float _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0, _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2);
            float _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3;
            Unity_Clamp_float(_Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2, 0, 1, _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3);
            float _Absolute_2efac825a986e28190f26200795ca9ec_Out_1;
            Unity_Absolute_float(_Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3, _Absolute_2efac825a986e28190f26200795ca9ec_Out_1);
            float _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0 = _CleanFalloffPower;
            float _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2;
            Unity_Power_float(_Absolute_2efac825a986e28190f26200795ca9ec_Out_1, _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0, _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2);
            float _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3;
            Unity_Clamp_float(_Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2, 0, 1, _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3);
            float3 _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3;
            Unity_Lerp_float3(_Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3, (_Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3.xxx), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3);
            float3 _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3;
            Unity_Lerp_float3((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3);
            UnityTexture2D _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_256e5676e1089881ae3214634430b140_Out_0 = _DetailTilingOffset;
            float _Split_257d0b6ea953418d97fd7daa8128bf35_R_1 = _Property_256e5676e1089881ae3214634430b140_Out_0[0];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_G_2 = _Property_256e5676e1089881ae3214634430b140_Out_0[1];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_B_3 = _Property_256e5676e1089881ae3214634430b140_Out_0[2];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_A_4 = _Property_256e5676e1089881ae3214634430b140_Out_0[3];
            float2 _Vector2_98295494172421878c7a16cb2baddf9a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_R_1, _Split_257d0b6ea953418d97fd7daa8128bf35_G_2);
            float2 _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_B_3, _Split_257d0b6ea953418d97fd7daa8128bf35_A_4);
            float2 _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_98295494172421878c7a16cb2baddf9a_Out_0, _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0, _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3);
            float4 _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0 = SAMPLE_TEXTURE2D(_Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.tex, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.samplerstate, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.GetTransformedUV(_TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3) );
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.r;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.g;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.b;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.a;
            float _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4, 2, _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2);
            float _Add_fd3efcae64779e848ef39919335cd44d_Out_2;
            Unity_Add_float(_Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2, -1, _Add_fd3efcae64779e848ef39919335cd44d_Out_2);
            float _Property_605f29777330a58ba88ac032e905433b_Out_0 = _DetailAlbedoScale;
            float _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2;
            Unity_Multiply_float_float(_Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Property_605f29777330a58ba88ac032e905433b_Out_0, _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2);
            float _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1;
            Unity_Saturate_float(_Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2, _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1);
            float _Absolute_8acef423205118879e75274a48969d34_Out_1;
            Unity_Absolute_float(_Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1, _Absolute_8acef423205118879e75274a48969d34_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185;
            float3 _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float((float4(_Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3, 1.0)), _Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Absolute_8acef423205118879e75274a48969d34_Out_1, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1);
            float4 _Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0 = _WetColor;
            float3 _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2;
            Unity_Multiply_float3_float3((_Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0.xyz), _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2);
            float _Split_5b2299b48b10138ea40c141b79bfe90e_R_1 = IN.VertexColor[0];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_G_2 = IN.VertexColor[1];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_B_3 = IN.VertexColor[2];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_A_4 = IN.VertexColor[3];
            float _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3;
            Unity_Clamp_float(_Split_5b2299b48b10138ea40c141b79bfe90e_R_1, 0, 1, _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3);
            float _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1;
            Unity_OneMinus_float(_Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1);
            float3 _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            Unity_Lerp_float3(_BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2, (_OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1.xxx), _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3);
            float _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            Unity_Multiply_float_float(_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3, _Split_5b2299b48b10138ea40c141b79bfe90e_A_4, _Multiply_ffa35df91e1277898c1160f454087deb_Out_2);
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAO;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _IceSmoothness;
            float _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0 = _IceCrackSmoothness;
            UnityTexture2D _Property_be61fb085f680285bb171ac957c1d150_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv0 = IN.uv0;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv2 = IN.uv2;
            float4 _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_be61fb085f680285bb171ac957c1d150_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2);
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[0];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_G_2 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[1];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_B_3 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[2];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_A_4 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[3];
            float _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3;
            Unity_Lerp_float(_Property_0edea7916ed7a189a62b0faf2c274601_Out_0, _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0, _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3);
            float _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0 = _IceNoiseSmoothness;
            float _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3;
            Unity_Lerp_float(_Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3, _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3, _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3);
            float _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6, 2, _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2);
            float _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2;
            Unity_Add_float(_Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2, -1, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2);
            float _Property_cea4e47b293a988a83643b43f76c92ba_Out_0 = _DetailSmoothnessScale;
            float _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2;
            Unity_Multiply_float_float(_Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Property_cea4e47b293a988a83643b43f76c92ba_Out_0, _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2);
            float _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1;
            Unity_Saturate_float(_Multiply_2008466558f0e4819e60b3c41d94487c_Out_2, _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1);
            float _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1;
            Unity_Absolute_float(_Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43;
            float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1);
            float _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0 = _WetSmoothness;
            float _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1, _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3);
            float2 _Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0 = float2(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7, _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5);
            float2 _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2;
            Unity_Multiply_float2_float2(_Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0, float2(2, 2), _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2);
            float2 _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2;
            Unity_Add_float2(_Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2, float2(-1, -1), _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2);
            float _Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0 = _DetailNormalScale;
            float2 _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2;
            Unity_Multiply_float2_float2(_Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2, (_Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0.xx), _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2);
            float _Split_c4822b8eaff9b185be7c059792345712_R_1 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[0];
            float _Split_c4822b8eaff9b185be7c059792345712_G_2 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[1];
            float _Split_c4822b8eaff9b185be7c059792345712_B_3 = 0;
            float _Split_c4822b8eaff9b185be7c059792345712_A_4 = 0;
            float _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2;
            Unity_DotProduct_float2(_Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2);
            float _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1;
            Unity_Saturate_float(_DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2, _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1);
            float _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1;
            Unity_OneMinus_float(_Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1, _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1);
            float _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1;
            Unity_SquareRoot_float(_OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float3 _Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0 = float3(_Split_c4822b8eaff9b185be7c059792345712_R_1, _Split_c4822b8eaff9b185be7c059792345712_G_2, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            float _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0 = _NoiseNormalScale;
            float3 _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2.xyz), _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2);
            float3 _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3;
            Unity_Lerp_float3(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3);
            float3 _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            Unity_NormalBlend_float(_Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0, _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3, _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2);
            float _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1;
            Unity_OneMinus_float(_Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1);
            float _Property_42e21c36617ec48ba2d35424c394cb28_Out_0 = _Ice_Thickness;
            float _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2;
            Unity_Multiply_float_float(_OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1, _Property_42e21c36617ec48ba2d35424c394cb28_Out_0, _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2);
            float _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            Unity_Clamp_float(_Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2, 0, 1, _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3);
            surface.Distortion = _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            surface.DistortionBlur = 0;
            surface.BaseColor = _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            surface.TransmissionMask = 1;
            surface.Thickness = _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            surface.DiffusionProfileHash = _DiffusionProfileHash;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.WorldSpacePosition =                         input.positionRWS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.ScreenPosition = ComputeScreenPos(TransformWorldToHClip(input.positionRWS), _ProjectionParams.x);
        
        #if UNITY_UV_STARTS_AT_TOP
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #else
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
            output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
            output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        
            output.uv0 =                                        input.texCoord0;
            output.uv2 =                                        input.texCoord2;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
            surfaceData.thickness =                 surfaceDescription.Thickness;
            surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassMotionVectors.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "TransparentDepthPrepass"
            Tags
            {
                "LightMode" = "TransparentDepthPrepass"
            }
        
            // Render State
            Cull [_CullMode]
        Blend One Zero
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskDepth]
        Ref [_StencilRefDepth]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_TRANSPARENT_DEPTH_PREPASS
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define REQUIRE_DEPTH_TEXTURE
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float _WaterAlphaMultiply;
        float _WaterAlphaPower;
        float _CleanFalloffMultiply;
        float _CleanFalloffPower;
        float _ShalowFalloffMultiply;
        float _ShalowFalloffPower;
        float _CleanColorPower;
        float4 _ShalowColor;
        float4 _DeepColor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float _IceNoiseScale;
        float _IceNoiseContrast;
        float _IceNoisePower;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _IceNoiseNormal_TexelSize;
        float _NoiseNormalScale;
        float _BaseAO;
        float _IceSmoothness;
        float _IceCrackSmoothness;
        float _IceNoiseSmoothness;
        float4 _ParalaxMap_TexelSize;
        float _ParalaxOffset;
        float _IceParallaxSteps;
        float _IceDepth;
        float _ParallaxFalloff;
        float _IceParallaxNoiseScale;
        float _IceParallaxNoiseMin;
        float _IceParallaxNoiseMax;
        float _Ice_Thickness;
        float _IceDistortion;
        float _Ice_Noise_Distortion;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_IceNoiseNormal);
        SAMPLER(sampler_IceNoiseNormal);
        TEXTURE2D(_ParalaxMap);
        SAMPLER(sampler_ParalaxMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Hashes.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 ScreenPosition;
             float4 uv0;
             float4 uv2;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord2;
            output.interp5.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord2 = input.interp4.xyzw;
            output.color = input.interp5.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Comparison_Greater_float(float A, float B, out float Out)
        {
            Out = A > B ? 1 : 0;
        }
        
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float
        {
        float4 ScreenPosition;
        };
        
        void SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float IN, out float2 OutVector2_1)
        {
        float4 _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0 = IN.ScreenPosition;
        float _Split_b183780fdd2343708af64846c96ee2a7_R_1 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[0];
        float _Split_b183780fdd2343708af64846c96ee2a7_G_2 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[1];
        float _Split_b183780fdd2343708af64846c96ee2a7_B_3 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[2];
        float _Split_b183780fdd2343708af64846c96ee2a7_A_4 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[3];
        float2 _Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0 = float2(_Split_b183780fdd2343708af64846c96ee2a7_R_1, _Split_b183780fdd2343708af64846c96ee2a7_G_2);
        float2 _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        Unity_Divide_float2(_Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0, (_Split_b183780fdd2343708af64846c96ee2a7_A_4.xx), _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2);
        OutVector2_1 = _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        }
        
        void Unity_SceneDepth_Raw_float(float4 UV, out float Out)
        {
            Out = SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void GetClipValues_float(out float2 Out){
        Out = float2(
        
        UNITY_NEAR_CLIP_VALUE,
        
        UNITY_RAW_FAR_CLIP_VALUE
        
        );
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
        {
            Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        struct Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float
        {
        float4 ScreenPosition;
        };
        
        void SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 _DistortionUV, Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float IN, out float Out_Depth_1, out float Out_DepthDistortion_2)
        {
        float _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2;
        Unity_Comparison_Greater_float(unity_OrthoParams.w, 0, _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2);
        float _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2;
        Unity_Comparison_Greater_float(_ProjectionParams.x, 0, _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2);
        Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff;
        _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff.ScreenPosition = IN.ScreenPosition;
        half2 _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1;
        SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff, _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1);
        float _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1;
        Unity_SceneDepth_Raw_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1);
        float _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1;
        Unity_OneMinus_float(_SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1);
        float _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3);
        float _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3, _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3);
        float4 _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0 = IN.ScreenPosition;
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float2 _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0;
        GetClipValues_float(_GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0);
        float _Remap_1907dbd4ae754843a5d74245135e2923_Out_3;
        Unity_Remap_float(_Split_62277fd721f74a399bd1009f8b3cb8e3_B_3, _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0, float2 (0, 1), _Remap_1907dbd4ae754843a5d74245135e2923_Out_3);
        float _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Remap_1907dbd4ae754843a5d74245135e2923_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3);
        float _Subtract_b98f5f0e27014160829b37533239eca2_Out_2;
        Unity_Subtract_float(_Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_b98f5f0e27014160829b37533239eca2_Out_2);
        float _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1;
        Unity_Saturate_float(_Subtract_b98f5f0e27014160829b37533239eca2_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1);
        float _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1);
        float _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2;
        Unity_Multiply_float_float(_SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1, _ProjectionParams.z, _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2);
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2;
        Unity_Subtract_float(_Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2);
        float _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2, _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3);
        float2 _Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0 = _DistortionUV;
        float _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1;
        Unity_SceneDepth_Raw_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1);
        float _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1;
        Unity_OneMinus_float(_SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1);
        float _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3);
        float _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3, _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3);
        float _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2;
        Unity_Subtract_float(_Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2);
        float _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1;
        Unity_Saturate_float(_Subtract_4531c88bf2b147d7a2998422330b141f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1);
        float _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1);
        float _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2;
        Unity_Multiply_float_float(_SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1, _ProjectionParams.z, _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2);
        float _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2;
        Unity_Subtract_float(_Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2);
        float _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2, _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3);
        Out_Depth_1 = _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Out_DepthDistortion_2 = _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Branch_float4(float Predicate, float4 True, float4 False, out float4 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_058f4fba88c3437288219f1929444bf2_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_43d85b3291324c848dfbeec6adac2a71_Out_0 = IN.uv0;
        float4 _UV_36881dcaab9040168fc5215dcd00f352_Out_0 = IN.uv2;
        float4 _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3;
        Unity_Branch_float4(_Property_058f4fba88c3437288219f1929444bf2_Out_0, _UV_43d85b3291324c848dfbeec6adac2a71_Out_0, _UV_36881dcaab9040168fc5215dcd00f352_Out_0, _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float((_Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3.xy), _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3) );
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1;
        {
        float3x3 tangentTransform = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, tangentTransform, true);
        }
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        float Unity_SimpleNoise_ValueNoise_LegacySine_float (float2 uv)
        {
        float2 i = floor(uv);
        float2 f = frac(uv);
        f = f * f * (3.0 - 2.0 * f);
        uv = abs(frac(uv) - 0.5);
        float2 c0 = i + float2(0.0, 0.0);
        float2 c1 = i + float2(1.0, 0.0);
        float2 c2 = i + float2(0.0, 1.0);
        float2 c3 = i + float2(1.0, 1.0);
        float r0; Hash_LegacySine_2_1_float(c0, r0);
        float r1; Hash_LegacySine_2_1_float(c1, r1);
        float r2; Hash_LegacySine_2_1_float(c2, r2);
        float r3; Hash_LegacySine_2_1_float(c3, r3);
        float bottomOfGrid = lerp(r0, r1, f.x);
        float topOfGrid = lerp(r2, r3, f.x);
        float t = lerp(bottomOfGrid, topOfGrid, f.y);
        return t;
        }
        
        void Unity_SimpleNoise_LegacySine_float(float2 UV, float Scale, out float Out)
        {
        float freq, amp;
        Out = 0.0f;
        freq = pow(2.0, float(0));
        amp = pow(0.5, float(3-0));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(1));
        amp = pow(0.5, float(3-1));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(2));
        amp = pow(0.5, float(3-2));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(float Vector1_E4D1C13A, float Vector1_CBF4C304, Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float IN, out float XYZ_1)
        {
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0 = Vector1_CBF4C304;
        float _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2);
        float _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2);
        float _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, _Add_e855069f047fae8ea9027d56acb61e56_Out_2, _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        }
        
        void Unity_Contrast_float(float3 In, float Contrast, out float3 Out)
        {
            float midpoint = pow(0.5, 2.2);
            Out =  (In - midpoint) * Contrast + midpoint;
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_029e8e8198564838b9389b902a09fb22_Out_0 = IN.uv0;
        float4 _UV_7a6209af1506424fb75c81e87e42035a_Out_0 = IN.uv2;
        float4 _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3;
        Unity_Branch_float4(_Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0, _UV_029e8e8198564838b9389b902a09fb22_Out_0, _UV_7a6209af1506424fb75c81e87e42035a_Out_0, _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float((_Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3.xy), _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3) );
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82;
            float3 _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float Alpha;
            float3 NormalTS;
            float Smoothness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c;
            _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c.ScreenPosition = IN.ScreenPosition;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2;
            SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 (0, 0), _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2);
            float _Property_22da60d6cbff958696ddee1c161db229_Out_0 = _WaterAlphaMultiply;
            float _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_22da60d6cbff958696ddee1c161db229_Out_0, _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2);
            float _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3;
            Unity_Clamp_float(_Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2, 0, 1, _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3);
            float _Absolute_c4059e430bb17486afd523c0f333e478_Out_1;
            Unity_Absolute_float(_Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3, _Absolute_c4059e430bb17486afd523c0f333e478_Out_1);
            float _Property_cd34ee7769676e85b3e223f0e908967c_Out_0 = _WaterAlphaPower;
            float _Power_2c1f1e86c544138396974457f6515752_Out_2;
            Unity_Power_float(_Absolute_c4059e430bb17486afd523c0f333e478_Out_1, _Property_cd34ee7769676e85b3e223f0e908967c_Out_0, _Power_2c1f1e86c544138396974457f6515752_Out_2);
            float _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3;
            Unity_Clamp_float(_Power_2c1f1e86c544138396974457f6515752_Out_2, 0, 1, _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3);
            float _Split_5b2299b48b10138ea40c141b79bfe90e_R_1 = IN.VertexColor[0];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_G_2 = IN.VertexColor[1];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_B_3 = IN.VertexColor[2];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_A_4 = IN.VertexColor[3];
            float _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            Unity_Multiply_float_float(_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3, _Split_5b2299b48b10138ea40c141b79bfe90e_A_4, _Multiply_ffa35df91e1277898c1160f454087deb_Out_2);
            UnityTexture2D _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_256e5676e1089881ae3214634430b140_Out_0 = _DetailTilingOffset;
            float _Split_257d0b6ea953418d97fd7daa8128bf35_R_1 = _Property_256e5676e1089881ae3214634430b140_Out_0[0];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_G_2 = _Property_256e5676e1089881ae3214634430b140_Out_0[1];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_B_3 = _Property_256e5676e1089881ae3214634430b140_Out_0[2];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_A_4 = _Property_256e5676e1089881ae3214634430b140_Out_0[3];
            float2 _Vector2_98295494172421878c7a16cb2baddf9a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_R_1, _Split_257d0b6ea953418d97fd7daa8128bf35_G_2);
            float2 _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_B_3, _Split_257d0b6ea953418d97fd7daa8128bf35_A_4);
            float2 _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_98295494172421878c7a16cb2baddf9a_Out_0, _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0, _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3);
            float4 _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0 = SAMPLE_TEXTURE2D(_Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.tex, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.samplerstate, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.GetTransformedUV(_TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3) );
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.r;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.g;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.b;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.a;
            float2 _Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0 = float2(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7, _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5);
            float2 _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2;
            Unity_Multiply_float2_float2(_Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0, float2(2, 2), _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2);
            float2 _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2;
            Unity_Add_float2(_Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2, float2(-1, -1), _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2);
            float _Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0 = _DetailNormalScale;
            float2 _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2;
            Unity_Multiply_float2_float2(_Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2, (_Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0.xx), _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2);
            float _Split_c4822b8eaff9b185be7c059792345712_R_1 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[0];
            float _Split_c4822b8eaff9b185be7c059792345712_G_2 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[1];
            float _Split_c4822b8eaff9b185be7c059792345712_B_3 = 0;
            float _Split_c4822b8eaff9b185be7c059792345712_A_4 = 0;
            float _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2;
            Unity_DotProduct_float2(_Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2);
            float _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1;
            Unity_Saturate_float(_DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2, _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1);
            float _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1;
            Unity_OneMinus_float(_Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1, _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1);
            float _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1;
            Unity_SquareRoot_float(_OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float3 _Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0 = float3(_Split_c4822b8eaff9b185be7c059792345712_R_1, _Split_c4822b8eaff9b185be7c059792345712_G_2, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_11506852e45cbb8f9732aebed8bbb210;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv0 = IN.uv0;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv2 = IN.uv2;
            float4 _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            UnityTexture2D _Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0 = UnityBuildTexture2DStructNoScale(_IceNoiseNormal);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv0 = IN.uv0;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv2 = IN.uv2;
            float4 _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2);
            float _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0 = _NoiseNormalScale;
            float3 _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2.xyz), _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2);
            float _Property_852d221028b884858f029fedb8de47d1_Out_0 = _IceNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_852d221028b884858f029fedb8de47d1_Out_0, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1);
            float _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1;
            Unity_Absolute_float(_TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1, _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1);
            float _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0 = _IceNoisePower;
            float _Power_1497f6299359e780a9aa8dde441d98cf_Out_2;
            Unity_Power_float(_Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1, _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0, _Power_1497f6299359e780a9aa8dde441d98cf_Out_2);
            float _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0 = _IceNoiseContrast;
            float3 _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2;
            Unity_Contrast_float((_Power_1497f6299359e780a9aa8dde441d98cf_Out_2.xxx), _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0, _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2);
            float _Split_f399eb1f3ad77580a75b6122d38451b5_R_1 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[0];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_G_2 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[1];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_B_3 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[2];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_A_4 = 0;
            float _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3;
            Unity_Clamp_float(_Split_f399eb1f3ad77580a75b6122d38451b5_R_1, 0, 1, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3);
            float3 _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3;
            Unity_Lerp_float3(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3);
            float3 _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            Unity_NormalBlend_float(_Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0, _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3, _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2);
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAO;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _IceSmoothness;
            float _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0 = _IceCrackSmoothness;
            UnityTexture2D _Property_be61fb085f680285bb171ac957c1d150_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv0 = IN.uv0;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv2 = IN.uv2;
            float4 _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_be61fb085f680285bb171ac957c1d150_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2);
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[0];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_G_2 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[1];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_B_3 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[2];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_A_4 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[3];
            float _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3;
            Unity_Lerp_float(_Property_0edea7916ed7a189a62b0faf2c274601_Out_0, _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0, _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3);
            float _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0 = _IceNoiseSmoothness;
            float _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3;
            Unity_Lerp_float(_Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3, _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3, _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3);
            float _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6, 2, _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2);
            float _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2;
            Unity_Add_float(_Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2, -1, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2);
            float _Property_cea4e47b293a988a83643b43f76c92ba_Out_0 = _DetailSmoothnessScale;
            float _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2;
            Unity_Multiply_float_float(_Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Property_cea4e47b293a988a83643b43f76c92ba_Out_0, _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2);
            float _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1;
            Unity_Saturate_float(_Multiply_2008466558f0e4819e60b3c41d94487c_Out_2, _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1);
            float _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1;
            Unity_Absolute_float(_Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43;
            float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1);
            float _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0 = _WetSmoothness;
            float _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3;
            Unity_Clamp_float(_Split_5b2299b48b10138ea40c141b79bfe90e_R_1, 0, 1, _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3);
            float _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1;
            Unity_OneMinus_float(_Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1);
            float _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1, _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3);
            surface.Alpha = _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            surface.NormalTS = _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            surface.Smoothness = _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            surface.DiffusionProfileHash = _DiffusionProfileHash;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpacePosition =                         input.positionRWS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.ScreenPosition = ComputeScreenPos(TransformWorldToHClip(input.positionRWS), _ProjectionParams.x);
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
            output.uv0 =                                        input.texCoord0;
            output.uv2 =                                        input.texCoord2;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "DistortionVectors"
            Tags
            {
                "LightMode" = "DistortionVectors"
            }
        
            // Render State
            Cull [_CullMode]
        Blend One One, One One
        BlendOp Add, Add
        ZTest LEqual
        ZWrite Off
        Stencil
        {
        WriteMask [_StencilWriteMaskDistortionVec]
        Ref [_StencilRefDistortionVec]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_DISTORTION
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define REQUIRE_DEPTH_TEXTURE
        #define REQUIRE_OPAQUE_TEXTURE
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float _WaterAlphaMultiply;
        float _WaterAlphaPower;
        float _CleanFalloffMultiply;
        float _CleanFalloffPower;
        float _ShalowFalloffMultiply;
        float _ShalowFalloffPower;
        float _CleanColorPower;
        float4 _ShalowColor;
        float4 _DeepColor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float _IceNoiseScale;
        float _IceNoiseContrast;
        float _IceNoisePower;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _IceNoiseNormal_TexelSize;
        float _NoiseNormalScale;
        float _BaseAO;
        float _IceSmoothness;
        float _IceCrackSmoothness;
        float _IceNoiseSmoothness;
        float4 _ParalaxMap_TexelSize;
        float _ParalaxOffset;
        float _IceParallaxSteps;
        float _IceDepth;
        float _ParallaxFalloff;
        float _IceParallaxNoiseScale;
        float _IceParallaxNoiseMin;
        float _IceParallaxNoiseMax;
        float _Ice_Thickness;
        float _IceDistortion;
        float _Ice_Noise_Distortion;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_IceNoiseNormal);
        SAMPLER(sampler_IceNoiseNormal);
        TEXTURE2D(_ParalaxMap);
        SAMPLER(sampler_ParalaxMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Hashes.hlsl"
        #include "./NMParallaxLayers.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 WorldSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 ScreenPosition;
             float2 NDCPosition;
             float2 PixelPosition;
             float4 uv0;
             float4 uv2;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord2;
            output.interp5.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord2 = input.interp4.xyzw;
            output.color = input.interp5.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Branch_float4(float Predicate, float4 True, float4 False, out float4 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_058f4fba88c3437288219f1929444bf2_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_43d85b3291324c848dfbeec6adac2a71_Out_0 = IN.uv0;
        float4 _UV_36881dcaab9040168fc5215dcd00f352_Out_0 = IN.uv2;
        float4 _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3;
        Unity_Branch_float4(_Property_058f4fba88c3437288219f1929444bf2_Out_0, _UV_43d85b3291324c848dfbeec6adac2a71_Out_0, _UV_36881dcaab9040168fc5215dcd00f352_Out_0, _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float((_Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3.xy), _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3) );
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1;
        {
        float3x3 tangentTransform = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, tangentTransform, true);
        }
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        float Unity_SimpleNoise_ValueNoise_LegacySine_float (float2 uv)
        {
        float2 i = floor(uv);
        float2 f = frac(uv);
        f = f * f * (3.0 - 2.0 * f);
        uv = abs(frac(uv) - 0.5);
        float2 c0 = i + float2(0.0, 0.0);
        float2 c1 = i + float2(1.0, 0.0);
        float2 c2 = i + float2(0.0, 1.0);
        float2 c3 = i + float2(1.0, 1.0);
        float r0; Hash_LegacySine_2_1_float(c0, r0);
        float r1; Hash_LegacySine_2_1_float(c1, r1);
        float r2; Hash_LegacySine_2_1_float(c2, r2);
        float r3; Hash_LegacySine_2_1_float(c3, r3);
        float bottomOfGrid = lerp(r0, r1, f.x);
        float topOfGrid = lerp(r2, r3, f.x);
        float t = lerp(bottomOfGrid, topOfGrid, f.y);
        return t;
        }
        
        void Unity_SimpleNoise_LegacySine_float(float2 UV, float Scale, out float Out)
        {
        float freq, amp;
        Out = 0.0f;
        freq = pow(2.0, float(0));
        amp = pow(0.5, float(3-0));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(1));
        amp = pow(0.5, float(3-1));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(2));
        amp = pow(0.5, float(3-2));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(float Vector1_E4D1C13A, float Vector1_CBF4C304, Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float IN, out float XYZ_1)
        {
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0 = Vector1_CBF4C304;
        float _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2);
        float _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2);
        float _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, _Add_e855069f047fae8ea9027d56acb61e56_Out_2, _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Contrast_float(float3 In, float Contrast, out float3 Out)
        {
            float midpoint = pow(0.5, 2.2);
            Out =  (In - midpoint) * Contrast + midpoint;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Lerp_float2(float2 A, float2 B, float2 T, out float2 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_029e8e8198564838b9389b902a09fb22_Out_0 = IN.uv0;
        float4 _UV_7a6209af1506424fb75c81e87e42035a_Out_0 = IN.uv2;
        float4 _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3;
        Unity_Branch_float4(_Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0, _UV_029e8e8198564838b9389b902a09fb22_Out_0, _UV_7a6209af1506424fb75c81e87e42035a_Out_0, _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float((_Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3.xy), _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3) );
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        struct Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float IN, out float4 XZ_2)
        {
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        XZ_2 = (float4(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3, 0.0, 1.0));
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Blend_Lighten_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            Out = max(Blend, Base);
            Out = lerp(Base, Out, Opacity);
        }
        
        float3 Unity_HDRP_SampleSceneColor_float(float2 uv, float lod, float exposureMultiplier)
        {
            exposureMultiplier = 1.0;
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(_SURFACE_TYPE_TRANSPARENT) && defined(SHADERPASS) && (SHADERPASS != SHADERPASS_LIGHT_TRANSPORT) && (SHADERPASS != SHADERPASS_PATH_TRACING) && (SHADERPASS != SHADERPASS_RAYTRACING_VISIBILITY) && (SHADERPASS != SHADERPASS_RAYTRACING_FORWARD)
            return SampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(CUSTOM_PASS_SAMPLING_HLSL) && defined(SHADERPASS) && (SHADERPASS == SHADERPASS_DRAWPROCEDURAL || SHADERPASS == SHADERPASS_BLIT)
            return CustomPassSampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            return float3(0.0, 0.0, 0.0);
        }
        
        void Unity_Comparison_Greater_float(float A, float B, out float Out)
        {
            Out = A > B ? 1 : 0;
        }
        
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float
        {
        float4 ScreenPosition;
        };
        
        void SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float IN, out float2 OutVector2_1)
        {
        float4 _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0 = IN.ScreenPosition;
        float _Split_b183780fdd2343708af64846c96ee2a7_R_1 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[0];
        float _Split_b183780fdd2343708af64846c96ee2a7_G_2 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[1];
        float _Split_b183780fdd2343708af64846c96ee2a7_B_3 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[2];
        float _Split_b183780fdd2343708af64846c96ee2a7_A_4 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[3];
        float2 _Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0 = float2(_Split_b183780fdd2343708af64846c96ee2a7_R_1, _Split_b183780fdd2343708af64846c96ee2a7_G_2);
        float2 _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        Unity_Divide_float2(_Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0, (_Split_b183780fdd2343708af64846c96ee2a7_A_4.xx), _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2);
        OutVector2_1 = _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        }
        
        void Unity_SceneDepth_Raw_float(float4 UV, out float Out)
        {
            Out = SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void GetClipValues_float(out float2 Out){
        Out = float2(
        
        UNITY_NEAR_CLIP_VALUE,
        
        UNITY_RAW_FAR_CLIP_VALUE
        
        );
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
        {
            Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
        }
        
        struct Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float
        {
        float4 ScreenPosition;
        };
        
        void SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 _DistortionUV, Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float IN, out float Out_Depth_1, out float Out_DepthDistortion_2)
        {
        float _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2;
        Unity_Comparison_Greater_float(unity_OrthoParams.w, 0, _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2);
        float _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2;
        Unity_Comparison_Greater_float(_ProjectionParams.x, 0, _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2);
        Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff;
        _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff.ScreenPosition = IN.ScreenPosition;
        half2 _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1;
        SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff, _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1);
        float _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1;
        Unity_SceneDepth_Raw_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1);
        float _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1;
        Unity_OneMinus_float(_SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1);
        float _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3);
        float _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3, _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3);
        float4 _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0 = IN.ScreenPosition;
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float2 _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0;
        GetClipValues_float(_GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0);
        float _Remap_1907dbd4ae754843a5d74245135e2923_Out_3;
        Unity_Remap_float(_Split_62277fd721f74a399bd1009f8b3cb8e3_B_3, _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0, float2 (0, 1), _Remap_1907dbd4ae754843a5d74245135e2923_Out_3);
        float _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Remap_1907dbd4ae754843a5d74245135e2923_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3);
        float _Subtract_b98f5f0e27014160829b37533239eca2_Out_2;
        Unity_Subtract_float(_Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_b98f5f0e27014160829b37533239eca2_Out_2);
        float _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1;
        Unity_Saturate_float(_Subtract_b98f5f0e27014160829b37533239eca2_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1);
        float _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1);
        float _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2;
        Unity_Multiply_float_float(_SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1, _ProjectionParams.z, _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2);
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2;
        Unity_Subtract_float(_Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2);
        float _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2, _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3);
        float2 _Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0 = _DistortionUV;
        float _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1;
        Unity_SceneDepth_Raw_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1);
        float _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1;
        Unity_OneMinus_float(_SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1);
        float _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3);
        float _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3, _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3);
        float _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2;
        Unity_Subtract_float(_Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2);
        float _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1;
        Unity_Saturate_float(_Subtract_4531c88bf2b147d7a2998422330b141f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1);
        float _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1);
        float _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2;
        Unity_Multiply_float_float(_SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1, _ProjectionParams.z, _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2);
        float _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2;
        Unity_Subtract_float(_Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2);
        float _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2, _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3);
        Out_Depth_1 = _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Out_DepthDistortion_2 = _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82;
            float3 _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float2 Distortion;
            float DistortionBlur;
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            float _Property_e5176656505ae98292b155cb230ab233_Out_0 = _IceDistortion;
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_11506852e45cbb8f9732aebed8bbb210;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv0 = IN.uv0;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv2 = IN.uv2;
            float4 _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2);
            float _Split_f392619d76305f8e9a715324614291f5_R_1 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[0];
            float _Split_f392619d76305f8e9a715324614291f5_G_2 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[1];
            float _Split_f392619d76305f8e9a715324614291f5_B_3 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[2];
            float _Split_f392619d76305f8e9a715324614291f5_A_4 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[3];
            float4 _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4;
            float3 _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5;
            float2 _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6;
            Unity_Combine_float(_Split_f392619d76305f8e9a715324614291f5_R_1, _Split_f392619d76305f8e9a715324614291f5_G_2, 0, 0, _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4, _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5, _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6);
            float2 _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2;
            Unity_Multiply_float2_float2((_Property_e5176656505ae98292b155cb230ab233_Out_0.xx), _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6, _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2);
            float _Property_f0b2859614d93f86b920c65decb52ecf_Out_0 = _Ice_Noise_Distortion;
            UnityTexture2D _Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0 = UnityBuildTexture2DStructNoScale(_IceNoiseNormal);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv0 = IN.uv0;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv2 = IN.uv2;
            float4 _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2);
            float _Split_1c2740a46a2f0281ab926911287ce711_R_1 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[0];
            float _Split_1c2740a46a2f0281ab926911287ce711_G_2 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[1];
            float _Split_1c2740a46a2f0281ab926911287ce711_B_3 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[2];
            float _Split_1c2740a46a2f0281ab926911287ce711_A_4 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[3];
            float4 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4;
            float3 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5;
            float2 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6;
            Unity_Combine_float(_Split_1c2740a46a2f0281ab926911287ce711_R_1, _Split_1c2740a46a2f0281ab926911287ce711_G_2, 0, 0, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6);
            float2 _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2;
            Unity_Multiply_float2_float2((_Property_f0b2859614d93f86b920c65decb52ecf_Out_0.xx), _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2);
            float _Property_852d221028b884858f029fedb8de47d1_Out_0 = _IceNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_852d221028b884858f029fedb8de47d1_Out_0, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1);
            float _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1;
            Unity_Absolute_float(_TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1, _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1);
            float _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0 = _IceNoisePower;
            float _Power_1497f6299359e780a9aa8dde441d98cf_Out_2;
            Unity_Power_float(_Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1, _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0, _Power_1497f6299359e780a9aa8dde441d98cf_Out_2);
            float _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0 = _IceNoiseContrast;
            float3 _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2;
            Unity_Contrast_float((_Power_1497f6299359e780a9aa8dde441d98cf_Out_2.xxx), _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0, _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2);
            float _Split_f399eb1f3ad77580a75b6122d38451b5_R_1 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[0];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_G_2 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[1];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_B_3 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[2];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_A_4 = 0;
            float _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3;
            Unity_Clamp_float(_Split_f399eb1f3ad77580a75b6122d38451b5_R_1, 0, 1, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3);
            float2 _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            Unity_Lerp_float2(_Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xx), _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3);
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_893a7c3932a452849a5239a91f337a35;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv0 = IN.uv0;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv2 = IN.uv2;
            float4 _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_893a7c3932a452849a5239a91f337a35, _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2);
            float _Property_771911a99405a780908dd542012af7b8_Out_0 = _IceParallaxSteps;
            Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float _PlanarNMparallax_e8f8353657858a87933a47a40c74654d;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.uv0 = IN.uv0;
            float4 _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2;
            SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(_Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2);
            float _Property_efee416de222038a93fa523171fb9f0d_Out_0 = _ParalaxOffset;
            float _Property_720bc7e00a412889a10ca999204543f8_Out_0 = _IceParallaxNoiseMin;
            float _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0 = _IceParallaxNoiseMax;
            float _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0 = _IceParallaxNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1);
            float _Lerp_87de925175c62a8986309dc80655ce2f_Out_3;
            Unity_Lerp_float(_Property_720bc7e00a412889a10ca999204543f8_Out_0, _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3);
            float _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3;
            Unity_Lerp_float(_Property_efee416de222038a93fa523171fb9f0d_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3);
            float _Property_acfd17e181f6108ba7921d3e04df886d_Out_0 = _IceDepth;
            float _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0 = _ParallaxFalloff;
            float _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3;
            Unity_Lerp_float(_Property_eede9dad69eea580b2a3fdc05280f02f_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3);
            UnityTexture2D _Property_7c5c99f2c1b340ec980675a076619f86_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            float4 _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2;
            ParallaxLayers_float(_Property_771911a99405a780908dd542012af7b8_Out_0, (_PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2.xy), _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3, _Property_acfd17e181f6108ba7921d3e04df886d_Out_0, IN.TangentSpaceViewDirection, IN.WorldSpaceViewDirection, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _Property_7c5c99f2c1b340ec980675a076619f86_Out_0, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2);
            float4 _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2;
            Unity_Blend_Lighten_float4(_PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2, _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            float3 _HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2 = Unity_HDRP_SampleSceneColor_float(float4(IN.NDCPosition.xy, 0, 0).xy, 0, 1.0);
            float _Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0 = _CleanColorPower;
            float3 _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2;
            Unity_Multiply_float3_float3(_HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2, (_Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0.xxx), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2);
            float4 _Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0 = _DeepColor;
            float4 _Property_7094041d89afbd878cb83460f4ab68b8_Out_0 = _ShalowColor;
            Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c;
            _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c.ScreenPosition = IN.ScreenPosition;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2;
            SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 (0, 0), _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2);
            float _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0 = _ShalowFalloffMultiply;
            float _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0, _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2);
            float _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1;
            Unity_Absolute_float(_Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2, _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1);
            float _Property_e6dd087698d3e984bd5eb642347af797_Out_0 = _ShalowFalloffPower;
            float _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2;
            Unity_Multiply_float_float(_Property_e6dd087698d3e984bd5eb642347af797_Out_0, -1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2);
            float _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2;
            Unity_Power_float(_Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2, _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2);
            float _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1;
            Unity_Saturate_float(_Power_aaf82c5db3291a8bb2095cce38670a92_Out_2, _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1);
            float _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3;
            Unity_Clamp_float(_Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1, 0, 1, _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3);
            float4 _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3;
            Unity_Lerp_float4(_Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0, _Property_7094041d89afbd878cb83460f4ab68b8_Out_0, (_Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3.xxxx), _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3);
            float3 _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2;
            Unity_Multiply_float3_float3((_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2);
            float _Property_22da60d6cbff958696ddee1c161db229_Out_0 = _WaterAlphaMultiply;
            float _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_22da60d6cbff958696ddee1c161db229_Out_0, _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2);
            float _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3;
            Unity_Clamp_float(_Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2, 0, 1, _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3);
            float _Absolute_c4059e430bb17486afd523c0f333e478_Out_1;
            Unity_Absolute_float(_Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3, _Absolute_c4059e430bb17486afd523c0f333e478_Out_1);
            float _Property_cd34ee7769676e85b3e223f0e908967c_Out_0 = _WaterAlphaPower;
            float _Power_2c1f1e86c544138396974457f6515752_Out_2;
            Unity_Power_float(_Absolute_c4059e430bb17486afd523c0f333e478_Out_1, _Property_cd34ee7769676e85b3e223f0e908967c_Out_0, _Power_2c1f1e86c544138396974457f6515752_Out_2);
            float _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3;
            Unity_Clamp_float(_Power_2c1f1e86c544138396974457f6515752_Out_2, 0, 1, _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3);
            float3 _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3;
            Unity_Lerp_float3(_Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2, (_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), (_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3.xxx), _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3);
            float _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0 = _CleanFalloffMultiply;
            float _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0, _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2);
            float _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3;
            Unity_Clamp_float(_Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2, 0, 1, _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3);
            float _Absolute_2efac825a986e28190f26200795ca9ec_Out_1;
            Unity_Absolute_float(_Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3, _Absolute_2efac825a986e28190f26200795ca9ec_Out_1);
            float _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0 = _CleanFalloffPower;
            float _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2;
            Unity_Power_float(_Absolute_2efac825a986e28190f26200795ca9ec_Out_1, _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0, _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2);
            float _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3;
            Unity_Clamp_float(_Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2, 0, 1, _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3);
            float3 _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3;
            Unity_Lerp_float3(_Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3, (_Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3.xxx), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3);
            float3 _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3;
            Unity_Lerp_float3((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3);
            UnityTexture2D _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_256e5676e1089881ae3214634430b140_Out_0 = _DetailTilingOffset;
            float _Split_257d0b6ea953418d97fd7daa8128bf35_R_1 = _Property_256e5676e1089881ae3214634430b140_Out_0[0];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_G_2 = _Property_256e5676e1089881ae3214634430b140_Out_0[1];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_B_3 = _Property_256e5676e1089881ae3214634430b140_Out_0[2];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_A_4 = _Property_256e5676e1089881ae3214634430b140_Out_0[3];
            float2 _Vector2_98295494172421878c7a16cb2baddf9a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_R_1, _Split_257d0b6ea953418d97fd7daa8128bf35_G_2);
            float2 _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_B_3, _Split_257d0b6ea953418d97fd7daa8128bf35_A_4);
            float2 _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_98295494172421878c7a16cb2baddf9a_Out_0, _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0, _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3);
            float4 _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0 = SAMPLE_TEXTURE2D(_Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.tex, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.samplerstate, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.GetTransformedUV(_TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3) );
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.r;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.g;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.b;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.a;
            float _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4, 2, _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2);
            float _Add_fd3efcae64779e848ef39919335cd44d_Out_2;
            Unity_Add_float(_Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2, -1, _Add_fd3efcae64779e848ef39919335cd44d_Out_2);
            float _Property_605f29777330a58ba88ac032e905433b_Out_0 = _DetailAlbedoScale;
            float _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2;
            Unity_Multiply_float_float(_Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Property_605f29777330a58ba88ac032e905433b_Out_0, _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2);
            float _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1;
            Unity_Saturate_float(_Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2, _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1);
            float _Absolute_8acef423205118879e75274a48969d34_Out_1;
            Unity_Absolute_float(_Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1, _Absolute_8acef423205118879e75274a48969d34_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185;
            float3 _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float((float4(_Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3, 1.0)), _Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Absolute_8acef423205118879e75274a48969d34_Out_1, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1);
            float4 _Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0 = _WetColor;
            float3 _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2;
            Unity_Multiply_float3_float3((_Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0.xyz), _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2);
            float _Split_5b2299b48b10138ea40c141b79bfe90e_R_1 = IN.VertexColor[0];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_G_2 = IN.VertexColor[1];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_B_3 = IN.VertexColor[2];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_A_4 = IN.VertexColor[3];
            float _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3;
            Unity_Clamp_float(_Split_5b2299b48b10138ea40c141b79bfe90e_R_1, 0, 1, _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3);
            float _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1;
            Unity_OneMinus_float(_Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1);
            float3 _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            Unity_Lerp_float3(_BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2, (_OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1.xxx), _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3);
            float _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            Unity_Multiply_float_float(_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3, _Split_5b2299b48b10138ea40c141b79bfe90e_A_4, _Multiply_ffa35df91e1277898c1160f454087deb_Out_2);
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAO;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _IceSmoothness;
            float _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0 = _IceCrackSmoothness;
            UnityTexture2D _Property_be61fb085f680285bb171ac957c1d150_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv0 = IN.uv0;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv2 = IN.uv2;
            float4 _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_be61fb085f680285bb171ac957c1d150_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2);
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[0];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_G_2 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[1];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_B_3 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[2];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_A_4 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[3];
            float _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3;
            Unity_Lerp_float(_Property_0edea7916ed7a189a62b0faf2c274601_Out_0, _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0, _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3);
            float _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0 = _IceNoiseSmoothness;
            float _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3;
            Unity_Lerp_float(_Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3, _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3, _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3);
            float _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6, 2, _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2);
            float _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2;
            Unity_Add_float(_Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2, -1, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2);
            float _Property_cea4e47b293a988a83643b43f76c92ba_Out_0 = _DetailSmoothnessScale;
            float _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2;
            Unity_Multiply_float_float(_Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Property_cea4e47b293a988a83643b43f76c92ba_Out_0, _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2);
            float _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1;
            Unity_Saturate_float(_Multiply_2008466558f0e4819e60b3c41d94487c_Out_2, _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1);
            float _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1;
            Unity_Absolute_float(_Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43;
            float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1);
            float _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0 = _WetSmoothness;
            float _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1, _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3);
            float2 _Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0 = float2(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7, _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5);
            float2 _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2;
            Unity_Multiply_float2_float2(_Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0, float2(2, 2), _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2);
            float2 _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2;
            Unity_Add_float2(_Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2, float2(-1, -1), _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2);
            float _Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0 = _DetailNormalScale;
            float2 _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2;
            Unity_Multiply_float2_float2(_Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2, (_Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0.xx), _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2);
            float _Split_c4822b8eaff9b185be7c059792345712_R_1 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[0];
            float _Split_c4822b8eaff9b185be7c059792345712_G_2 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[1];
            float _Split_c4822b8eaff9b185be7c059792345712_B_3 = 0;
            float _Split_c4822b8eaff9b185be7c059792345712_A_4 = 0;
            float _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2;
            Unity_DotProduct_float2(_Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2);
            float _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1;
            Unity_Saturate_float(_DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2, _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1);
            float _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1;
            Unity_OneMinus_float(_Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1, _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1);
            float _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1;
            Unity_SquareRoot_float(_OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float3 _Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0 = float3(_Split_c4822b8eaff9b185be7c059792345712_R_1, _Split_c4822b8eaff9b185be7c059792345712_G_2, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            float _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0 = _NoiseNormalScale;
            float3 _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2.xyz), _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2);
            float3 _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3;
            Unity_Lerp_float3(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3);
            float3 _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            Unity_NormalBlend_float(_Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0, _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3, _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2);
            float _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1;
            Unity_OneMinus_float(_Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1);
            float _Property_42e21c36617ec48ba2d35424c394cb28_Out_0 = _Ice_Thickness;
            float _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2;
            Unity_Multiply_float_float(_OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1, _Property_42e21c36617ec48ba2d35424c394cb28_Out_0, _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2);
            float _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            Unity_Clamp_float(_Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2, 0, 1, _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3);
            surface.Distortion = _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            surface.DistortionBlur = 0;
            surface.BaseColor = _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            surface.TransmissionMask = 1;
            surface.Thickness = _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            surface.DiffusionProfileHash = _DiffusionProfileHash;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.WorldSpacePosition =                         input.positionRWS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.ScreenPosition = ComputeScreenPos(TransformWorldToHClip(input.positionRWS), _ProjectionParams.x);
        
        #if UNITY_UV_STARTS_AT_TOP
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #else
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
            output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
            output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        
            output.uv0 =                                        input.texCoord0;
            output.uv2 =                                        input.texCoord2;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
            surfaceData.thickness =                 surfaceDescription.Thickness;
            surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDistortion.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "FullScreenDebug"
            Tags
            {
                "LightMode" = "FullScreenDebug"
            }
        
            // Render State
            Cull [_CullMode]
        ZTest LEqual
        ZWrite Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_FULL_SCREEN_DEBUG
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define REQUIRE_DEPTH_TEXTURE
        #define REQUIRE_OPAQUE_TEXTURE
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float _WaterAlphaMultiply;
        float _WaterAlphaPower;
        float _CleanFalloffMultiply;
        float _CleanFalloffPower;
        float _ShalowFalloffMultiply;
        float _ShalowFalloffPower;
        float _CleanColorPower;
        float4 _ShalowColor;
        float4 _DeepColor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float _IceNoiseScale;
        float _IceNoiseContrast;
        float _IceNoisePower;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _IceNoiseNormal_TexelSize;
        float _NoiseNormalScale;
        float _BaseAO;
        float _IceSmoothness;
        float _IceCrackSmoothness;
        float _IceNoiseSmoothness;
        float4 _ParalaxMap_TexelSize;
        float _ParalaxOffset;
        float _IceParallaxSteps;
        float _IceDepth;
        float _ParallaxFalloff;
        float _IceParallaxNoiseScale;
        float _IceParallaxNoiseMin;
        float _IceParallaxNoiseMax;
        float _Ice_Thickness;
        float _IceDistortion;
        float _Ice_Noise_Distortion;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_IceNoiseNormal);
        SAMPLER(sampler_IceNoiseNormal);
        TEXTURE2D(_ParalaxMap);
        SAMPLER(sampler_ParalaxMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Hashes.hlsl"
        #include "./NMParallaxLayers.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 WorldSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 ScreenPosition;
             float2 NDCPosition;
             float2 PixelPosition;
             float4 uv0;
             float4 uv2;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord2;
            output.interp5.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord2 = input.interp4.xyzw;
            output.color = input.interp5.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Branch_float4(float Predicate, float4 True, float4 False, out float4 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_058f4fba88c3437288219f1929444bf2_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_43d85b3291324c848dfbeec6adac2a71_Out_0 = IN.uv0;
        float4 _UV_36881dcaab9040168fc5215dcd00f352_Out_0 = IN.uv2;
        float4 _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3;
        Unity_Branch_float4(_Property_058f4fba88c3437288219f1929444bf2_Out_0, _UV_43d85b3291324c848dfbeec6adac2a71_Out_0, _UV_36881dcaab9040168fc5215dcd00f352_Out_0, _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float((_Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3.xy), _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3) );
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1;
        {
        float3x3 tangentTransform = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, tangentTransform, true);
        }
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        float Unity_SimpleNoise_ValueNoise_LegacySine_float (float2 uv)
        {
        float2 i = floor(uv);
        float2 f = frac(uv);
        f = f * f * (3.0 - 2.0 * f);
        uv = abs(frac(uv) - 0.5);
        float2 c0 = i + float2(0.0, 0.0);
        float2 c1 = i + float2(1.0, 0.0);
        float2 c2 = i + float2(0.0, 1.0);
        float2 c3 = i + float2(1.0, 1.0);
        float r0; Hash_LegacySine_2_1_float(c0, r0);
        float r1; Hash_LegacySine_2_1_float(c1, r1);
        float r2; Hash_LegacySine_2_1_float(c2, r2);
        float r3; Hash_LegacySine_2_1_float(c3, r3);
        float bottomOfGrid = lerp(r0, r1, f.x);
        float topOfGrid = lerp(r2, r3, f.x);
        float t = lerp(bottomOfGrid, topOfGrid, f.y);
        return t;
        }
        
        void Unity_SimpleNoise_LegacySine_float(float2 UV, float Scale, out float Out)
        {
        float freq, amp;
        Out = 0.0f;
        freq = pow(2.0, float(0));
        amp = pow(0.5, float(3-0));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(1));
        amp = pow(0.5, float(3-1));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(2));
        amp = pow(0.5, float(3-2));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(float Vector1_E4D1C13A, float Vector1_CBF4C304, Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float IN, out float XYZ_1)
        {
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0 = Vector1_CBF4C304;
        float _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2);
        float _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2);
        float _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, _Add_e855069f047fae8ea9027d56acb61e56_Out_2, _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Contrast_float(float3 In, float Contrast, out float3 Out)
        {
            float midpoint = pow(0.5, 2.2);
            Out =  (In - midpoint) * Contrast + midpoint;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Lerp_float2(float2 A, float2 B, float2 T, out float2 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_029e8e8198564838b9389b902a09fb22_Out_0 = IN.uv0;
        float4 _UV_7a6209af1506424fb75c81e87e42035a_Out_0 = IN.uv2;
        float4 _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3;
        Unity_Branch_float4(_Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0, _UV_029e8e8198564838b9389b902a09fb22_Out_0, _UV_7a6209af1506424fb75c81e87e42035a_Out_0, _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float((_Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3.xy), _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3) );
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        struct Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float IN, out float4 XZ_2)
        {
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        XZ_2 = (float4(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3, 0.0, 1.0));
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Blend_Lighten_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            Out = max(Blend, Base);
            Out = lerp(Base, Out, Opacity);
        }
        
        float3 Unity_HDRP_SampleSceneColor_float(float2 uv, float lod, float exposureMultiplier)
        {
            exposureMultiplier = 1.0;
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(_SURFACE_TYPE_TRANSPARENT) && defined(SHADERPASS) && (SHADERPASS != SHADERPASS_LIGHT_TRANSPORT) && (SHADERPASS != SHADERPASS_PATH_TRACING) && (SHADERPASS != SHADERPASS_RAYTRACING_VISIBILITY) && (SHADERPASS != SHADERPASS_RAYTRACING_FORWARD)
            return SampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(CUSTOM_PASS_SAMPLING_HLSL) && defined(SHADERPASS) && (SHADERPASS == SHADERPASS_DRAWPROCEDURAL || SHADERPASS == SHADERPASS_BLIT)
            return CustomPassSampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            return float3(0.0, 0.0, 0.0);
        }
        
        void Unity_Comparison_Greater_float(float A, float B, out float Out)
        {
            Out = A > B ? 1 : 0;
        }
        
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float
        {
        float4 ScreenPosition;
        };
        
        void SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float IN, out float2 OutVector2_1)
        {
        float4 _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0 = IN.ScreenPosition;
        float _Split_b183780fdd2343708af64846c96ee2a7_R_1 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[0];
        float _Split_b183780fdd2343708af64846c96ee2a7_G_2 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[1];
        float _Split_b183780fdd2343708af64846c96ee2a7_B_3 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[2];
        float _Split_b183780fdd2343708af64846c96ee2a7_A_4 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[3];
        float2 _Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0 = float2(_Split_b183780fdd2343708af64846c96ee2a7_R_1, _Split_b183780fdd2343708af64846c96ee2a7_G_2);
        float2 _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        Unity_Divide_float2(_Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0, (_Split_b183780fdd2343708af64846c96ee2a7_A_4.xx), _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2);
        OutVector2_1 = _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        }
        
        void Unity_SceneDepth_Raw_float(float4 UV, out float Out)
        {
            Out = SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void GetClipValues_float(out float2 Out){
        Out = float2(
        
        UNITY_NEAR_CLIP_VALUE,
        
        UNITY_RAW_FAR_CLIP_VALUE
        
        );
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
        {
            Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
        }
        
        struct Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float
        {
        float4 ScreenPosition;
        };
        
        void SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 _DistortionUV, Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float IN, out float Out_Depth_1, out float Out_DepthDistortion_2)
        {
        float _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2;
        Unity_Comparison_Greater_float(unity_OrthoParams.w, 0, _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2);
        float _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2;
        Unity_Comparison_Greater_float(_ProjectionParams.x, 0, _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2);
        Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff;
        _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff.ScreenPosition = IN.ScreenPosition;
        half2 _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1;
        SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff, _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1);
        float _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1;
        Unity_SceneDepth_Raw_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1);
        float _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1;
        Unity_OneMinus_float(_SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1);
        float _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3);
        float _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3, _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3);
        float4 _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0 = IN.ScreenPosition;
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float2 _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0;
        GetClipValues_float(_GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0);
        float _Remap_1907dbd4ae754843a5d74245135e2923_Out_3;
        Unity_Remap_float(_Split_62277fd721f74a399bd1009f8b3cb8e3_B_3, _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0, float2 (0, 1), _Remap_1907dbd4ae754843a5d74245135e2923_Out_3);
        float _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Remap_1907dbd4ae754843a5d74245135e2923_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3);
        float _Subtract_b98f5f0e27014160829b37533239eca2_Out_2;
        Unity_Subtract_float(_Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_b98f5f0e27014160829b37533239eca2_Out_2);
        float _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1;
        Unity_Saturate_float(_Subtract_b98f5f0e27014160829b37533239eca2_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1);
        float _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1);
        float _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2;
        Unity_Multiply_float_float(_SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1, _ProjectionParams.z, _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2);
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2;
        Unity_Subtract_float(_Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2);
        float _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2, _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3);
        float2 _Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0 = _DistortionUV;
        float _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1;
        Unity_SceneDepth_Raw_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1);
        float _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1;
        Unity_OneMinus_float(_SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1);
        float _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3);
        float _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3, _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3);
        float _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2;
        Unity_Subtract_float(_Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2);
        float _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1;
        Unity_Saturate_float(_Subtract_4531c88bf2b147d7a2998422330b141f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1);
        float _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1);
        float _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2;
        Unity_Multiply_float_float(_SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1, _ProjectionParams.z, _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2);
        float _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2;
        Unity_Subtract_float(_Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2);
        float _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2, _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3);
        Out_Depth_1 = _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Out_DepthDistortion_2 = _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82;
            float3 _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float2 Distortion;
            float DistortionBlur;
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            float _Property_e5176656505ae98292b155cb230ab233_Out_0 = _IceDistortion;
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_11506852e45cbb8f9732aebed8bbb210;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv0 = IN.uv0;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv2 = IN.uv2;
            float4 _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2);
            float _Split_f392619d76305f8e9a715324614291f5_R_1 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[0];
            float _Split_f392619d76305f8e9a715324614291f5_G_2 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[1];
            float _Split_f392619d76305f8e9a715324614291f5_B_3 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[2];
            float _Split_f392619d76305f8e9a715324614291f5_A_4 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[3];
            float4 _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4;
            float3 _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5;
            float2 _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6;
            Unity_Combine_float(_Split_f392619d76305f8e9a715324614291f5_R_1, _Split_f392619d76305f8e9a715324614291f5_G_2, 0, 0, _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4, _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5, _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6);
            float2 _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2;
            Unity_Multiply_float2_float2((_Property_e5176656505ae98292b155cb230ab233_Out_0.xx), _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6, _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2);
            float _Property_f0b2859614d93f86b920c65decb52ecf_Out_0 = _Ice_Noise_Distortion;
            UnityTexture2D _Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0 = UnityBuildTexture2DStructNoScale(_IceNoiseNormal);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv0 = IN.uv0;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv2 = IN.uv2;
            float4 _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2);
            float _Split_1c2740a46a2f0281ab926911287ce711_R_1 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[0];
            float _Split_1c2740a46a2f0281ab926911287ce711_G_2 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[1];
            float _Split_1c2740a46a2f0281ab926911287ce711_B_3 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[2];
            float _Split_1c2740a46a2f0281ab926911287ce711_A_4 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[3];
            float4 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4;
            float3 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5;
            float2 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6;
            Unity_Combine_float(_Split_1c2740a46a2f0281ab926911287ce711_R_1, _Split_1c2740a46a2f0281ab926911287ce711_G_2, 0, 0, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6);
            float2 _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2;
            Unity_Multiply_float2_float2((_Property_f0b2859614d93f86b920c65decb52ecf_Out_0.xx), _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2);
            float _Property_852d221028b884858f029fedb8de47d1_Out_0 = _IceNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_852d221028b884858f029fedb8de47d1_Out_0, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1);
            float _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1;
            Unity_Absolute_float(_TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1, _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1);
            float _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0 = _IceNoisePower;
            float _Power_1497f6299359e780a9aa8dde441d98cf_Out_2;
            Unity_Power_float(_Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1, _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0, _Power_1497f6299359e780a9aa8dde441d98cf_Out_2);
            float _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0 = _IceNoiseContrast;
            float3 _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2;
            Unity_Contrast_float((_Power_1497f6299359e780a9aa8dde441d98cf_Out_2.xxx), _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0, _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2);
            float _Split_f399eb1f3ad77580a75b6122d38451b5_R_1 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[0];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_G_2 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[1];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_B_3 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[2];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_A_4 = 0;
            float _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3;
            Unity_Clamp_float(_Split_f399eb1f3ad77580a75b6122d38451b5_R_1, 0, 1, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3);
            float2 _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            Unity_Lerp_float2(_Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xx), _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3);
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_893a7c3932a452849a5239a91f337a35;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv0 = IN.uv0;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv2 = IN.uv2;
            float4 _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_893a7c3932a452849a5239a91f337a35, _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2);
            float _Property_771911a99405a780908dd542012af7b8_Out_0 = _IceParallaxSteps;
            Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float _PlanarNMparallax_e8f8353657858a87933a47a40c74654d;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.uv0 = IN.uv0;
            float4 _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2;
            SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(_Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2);
            float _Property_efee416de222038a93fa523171fb9f0d_Out_0 = _ParalaxOffset;
            float _Property_720bc7e00a412889a10ca999204543f8_Out_0 = _IceParallaxNoiseMin;
            float _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0 = _IceParallaxNoiseMax;
            float _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0 = _IceParallaxNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1);
            float _Lerp_87de925175c62a8986309dc80655ce2f_Out_3;
            Unity_Lerp_float(_Property_720bc7e00a412889a10ca999204543f8_Out_0, _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3);
            float _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3;
            Unity_Lerp_float(_Property_efee416de222038a93fa523171fb9f0d_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3);
            float _Property_acfd17e181f6108ba7921d3e04df886d_Out_0 = _IceDepth;
            float _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0 = _ParallaxFalloff;
            float _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3;
            Unity_Lerp_float(_Property_eede9dad69eea580b2a3fdc05280f02f_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3);
            UnityTexture2D _Property_7c5c99f2c1b340ec980675a076619f86_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            float4 _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2;
            ParallaxLayers_float(_Property_771911a99405a780908dd542012af7b8_Out_0, (_PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2.xy), _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3, _Property_acfd17e181f6108ba7921d3e04df886d_Out_0, IN.TangentSpaceViewDirection, IN.WorldSpaceViewDirection, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _Property_7c5c99f2c1b340ec980675a076619f86_Out_0, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2);
            float4 _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2;
            Unity_Blend_Lighten_float4(_PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2, _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            float3 _HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2 = Unity_HDRP_SampleSceneColor_float(float4(IN.NDCPosition.xy, 0, 0).xy, 0, 1.0);
            float _Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0 = _CleanColorPower;
            float3 _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2;
            Unity_Multiply_float3_float3(_HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2, (_Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0.xxx), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2);
            float4 _Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0 = _DeepColor;
            float4 _Property_7094041d89afbd878cb83460f4ab68b8_Out_0 = _ShalowColor;
            Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c;
            _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c.ScreenPosition = IN.ScreenPosition;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2;
            SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 (0, 0), _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2);
            float _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0 = _ShalowFalloffMultiply;
            float _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0, _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2);
            float _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1;
            Unity_Absolute_float(_Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2, _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1);
            float _Property_e6dd087698d3e984bd5eb642347af797_Out_0 = _ShalowFalloffPower;
            float _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2;
            Unity_Multiply_float_float(_Property_e6dd087698d3e984bd5eb642347af797_Out_0, -1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2);
            float _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2;
            Unity_Power_float(_Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2, _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2);
            float _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1;
            Unity_Saturate_float(_Power_aaf82c5db3291a8bb2095cce38670a92_Out_2, _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1);
            float _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3;
            Unity_Clamp_float(_Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1, 0, 1, _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3);
            float4 _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3;
            Unity_Lerp_float4(_Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0, _Property_7094041d89afbd878cb83460f4ab68b8_Out_0, (_Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3.xxxx), _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3);
            float3 _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2;
            Unity_Multiply_float3_float3((_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2);
            float _Property_22da60d6cbff958696ddee1c161db229_Out_0 = _WaterAlphaMultiply;
            float _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_22da60d6cbff958696ddee1c161db229_Out_0, _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2);
            float _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3;
            Unity_Clamp_float(_Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2, 0, 1, _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3);
            float _Absolute_c4059e430bb17486afd523c0f333e478_Out_1;
            Unity_Absolute_float(_Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3, _Absolute_c4059e430bb17486afd523c0f333e478_Out_1);
            float _Property_cd34ee7769676e85b3e223f0e908967c_Out_0 = _WaterAlphaPower;
            float _Power_2c1f1e86c544138396974457f6515752_Out_2;
            Unity_Power_float(_Absolute_c4059e430bb17486afd523c0f333e478_Out_1, _Property_cd34ee7769676e85b3e223f0e908967c_Out_0, _Power_2c1f1e86c544138396974457f6515752_Out_2);
            float _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3;
            Unity_Clamp_float(_Power_2c1f1e86c544138396974457f6515752_Out_2, 0, 1, _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3);
            float3 _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3;
            Unity_Lerp_float3(_Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2, (_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), (_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3.xxx), _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3);
            float _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0 = _CleanFalloffMultiply;
            float _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0, _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2);
            float _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3;
            Unity_Clamp_float(_Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2, 0, 1, _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3);
            float _Absolute_2efac825a986e28190f26200795ca9ec_Out_1;
            Unity_Absolute_float(_Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3, _Absolute_2efac825a986e28190f26200795ca9ec_Out_1);
            float _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0 = _CleanFalloffPower;
            float _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2;
            Unity_Power_float(_Absolute_2efac825a986e28190f26200795ca9ec_Out_1, _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0, _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2);
            float _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3;
            Unity_Clamp_float(_Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2, 0, 1, _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3);
            float3 _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3;
            Unity_Lerp_float3(_Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3, (_Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3.xxx), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3);
            float3 _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3;
            Unity_Lerp_float3((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3);
            UnityTexture2D _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_256e5676e1089881ae3214634430b140_Out_0 = _DetailTilingOffset;
            float _Split_257d0b6ea953418d97fd7daa8128bf35_R_1 = _Property_256e5676e1089881ae3214634430b140_Out_0[0];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_G_2 = _Property_256e5676e1089881ae3214634430b140_Out_0[1];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_B_3 = _Property_256e5676e1089881ae3214634430b140_Out_0[2];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_A_4 = _Property_256e5676e1089881ae3214634430b140_Out_0[3];
            float2 _Vector2_98295494172421878c7a16cb2baddf9a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_R_1, _Split_257d0b6ea953418d97fd7daa8128bf35_G_2);
            float2 _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_B_3, _Split_257d0b6ea953418d97fd7daa8128bf35_A_4);
            float2 _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_98295494172421878c7a16cb2baddf9a_Out_0, _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0, _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3);
            float4 _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0 = SAMPLE_TEXTURE2D(_Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.tex, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.samplerstate, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.GetTransformedUV(_TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3) );
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.r;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.g;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.b;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.a;
            float _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4, 2, _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2);
            float _Add_fd3efcae64779e848ef39919335cd44d_Out_2;
            Unity_Add_float(_Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2, -1, _Add_fd3efcae64779e848ef39919335cd44d_Out_2);
            float _Property_605f29777330a58ba88ac032e905433b_Out_0 = _DetailAlbedoScale;
            float _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2;
            Unity_Multiply_float_float(_Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Property_605f29777330a58ba88ac032e905433b_Out_0, _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2);
            float _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1;
            Unity_Saturate_float(_Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2, _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1);
            float _Absolute_8acef423205118879e75274a48969d34_Out_1;
            Unity_Absolute_float(_Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1, _Absolute_8acef423205118879e75274a48969d34_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185;
            float3 _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float((float4(_Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3, 1.0)), _Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Absolute_8acef423205118879e75274a48969d34_Out_1, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1);
            float4 _Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0 = _WetColor;
            float3 _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2;
            Unity_Multiply_float3_float3((_Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0.xyz), _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2);
            float _Split_5b2299b48b10138ea40c141b79bfe90e_R_1 = IN.VertexColor[0];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_G_2 = IN.VertexColor[1];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_B_3 = IN.VertexColor[2];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_A_4 = IN.VertexColor[3];
            float _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3;
            Unity_Clamp_float(_Split_5b2299b48b10138ea40c141b79bfe90e_R_1, 0, 1, _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3);
            float _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1;
            Unity_OneMinus_float(_Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1);
            float3 _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            Unity_Lerp_float3(_BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2, (_OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1.xxx), _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3);
            float _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            Unity_Multiply_float_float(_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3, _Split_5b2299b48b10138ea40c141b79bfe90e_A_4, _Multiply_ffa35df91e1277898c1160f454087deb_Out_2);
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAO;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _IceSmoothness;
            float _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0 = _IceCrackSmoothness;
            UnityTexture2D _Property_be61fb085f680285bb171ac957c1d150_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv0 = IN.uv0;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv2 = IN.uv2;
            float4 _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_be61fb085f680285bb171ac957c1d150_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2);
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[0];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_G_2 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[1];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_B_3 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[2];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_A_4 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[3];
            float _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3;
            Unity_Lerp_float(_Property_0edea7916ed7a189a62b0faf2c274601_Out_0, _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0, _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3);
            float _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0 = _IceNoiseSmoothness;
            float _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3;
            Unity_Lerp_float(_Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3, _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3, _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3);
            float _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6, 2, _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2);
            float _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2;
            Unity_Add_float(_Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2, -1, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2);
            float _Property_cea4e47b293a988a83643b43f76c92ba_Out_0 = _DetailSmoothnessScale;
            float _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2;
            Unity_Multiply_float_float(_Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Property_cea4e47b293a988a83643b43f76c92ba_Out_0, _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2);
            float _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1;
            Unity_Saturate_float(_Multiply_2008466558f0e4819e60b3c41d94487c_Out_2, _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1);
            float _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1;
            Unity_Absolute_float(_Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43;
            float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1);
            float _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0 = _WetSmoothness;
            float _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1, _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3);
            float2 _Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0 = float2(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7, _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5);
            float2 _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2;
            Unity_Multiply_float2_float2(_Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0, float2(2, 2), _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2);
            float2 _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2;
            Unity_Add_float2(_Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2, float2(-1, -1), _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2);
            float _Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0 = _DetailNormalScale;
            float2 _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2;
            Unity_Multiply_float2_float2(_Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2, (_Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0.xx), _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2);
            float _Split_c4822b8eaff9b185be7c059792345712_R_1 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[0];
            float _Split_c4822b8eaff9b185be7c059792345712_G_2 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[1];
            float _Split_c4822b8eaff9b185be7c059792345712_B_3 = 0;
            float _Split_c4822b8eaff9b185be7c059792345712_A_4 = 0;
            float _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2;
            Unity_DotProduct_float2(_Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2);
            float _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1;
            Unity_Saturate_float(_DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2, _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1);
            float _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1;
            Unity_OneMinus_float(_Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1, _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1);
            float _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1;
            Unity_SquareRoot_float(_OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float3 _Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0 = float3(_Split_c4822b8eaff9b185be7c059792345712_R_1, _Split_c4822b8eaff9b185be7c059792345712_G_2, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            float _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0 = _NoiseNormalScale;
            float3 _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2.xyz), _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2);
            float3 _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3;
            Unity_Lerp_float3(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3);
            float3 _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            Unity_NormalBlend_float(_Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0, _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3, _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2);
            float _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1;
            Unity_OneMinus_float(_Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1);
            float _Property_42e21c36617ec48ba2d35424c394cb28_Out_0 = _Ice_Thickness;
            float _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2;
            Unity_Multiply_float_float(_OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1, _Property_42e21c36617ec48ba2d35424c394cb28_Out_0, _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2);
            float _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            Unity_Clamp_float(_Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2, 0, 1, _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3);
            surface.Distortion = _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            surface.DistortionBlur = 0;
            surface.BaseColor = _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            surface.TransmissionMask = 1;
            surface.Thickness = _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            surface.DiffusionProfileHash = _DiffusionProfileHash;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.WorldSpacePosition =                         input.positionRWS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.ScreenPosition = ComputeScreenPos(TransformWorldToHClip(input.positionRWS), _ProjectionParams.x);
        
        #if UNITY_UV_STARTS_AT_TOP
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #else
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
            output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
            output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        
            output.uv0 =                                        input.texCoord0;
            output.uv2 =                                        input.texCoord2;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
            surfaceData.thickness =                 surfaceDescription.Thickness;
            surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassFullScreenDebug.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "DepthOnly"
            Tags
            {
                "LightMode" = "DepthOnly"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskDepth]
        Ref [_StencilRefDepth]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma multi_compile _ WRITE_NORMAL_BUFFER
        #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ WRITE_DECAL_BUFFER
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define REQUIRE_DEPTH_TEXTURE
        #define REQUIRE_OPAQUE_TEXTURE
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float _WaterAlphaMultiply;
        float _WaterAlphaPower;
        float _CleanFalloffMultiply;
        float _CleanFalloffPower;
        float _ShalowFalloffMultiply;
        float _ShalowFalloffPower;
        float _CleanColorPower;
        float4 _ShalowColor;
        float4 _DeepColor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float _IceNoiseScale;
        float _IceNoiseContrast;
        float _IceNoisePower;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _IceNoiseNormal_TexelSize;
        float _NoiseNormalScale;
        float _BaseAO;
        float _IceSmoothness;
        float _IceCrackSmoothness;
        float _IceNoiseSmoothness;
        float4 _ParalaxMap_TexelSize;
        float _ParalaxOffset;
        float _IceParallaxSteps;
        float _IceDepth;
        float _ParallaxFalloff;
        float _IceParallaxNoiseScale;
        float _IceParallaxNoiseMin;
        float _IceParallaxNoiseMax;
        float _Ice_Thickness;
        float _IceDistortion;
        float _Ice_Noise_Distortion;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_IceNoiseNormal);
        SAMPLER(sampler_IceNoiseNormal);
        TEXTURE2D(_ParalaxMap);
        SAMPLER(sampler_ParalaxMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Hashes.hlsl"
        #include "./NMParallaxLayers.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 WorldSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 ScreenPosition;
             float2 NDCPosition;
             float2 PixelPosition;
             float4 uv0;
             float4 uv2;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord2;
            output.interp5.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord2 = input.interp4.xyzw;
            output.color = input.interp5.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Branch_float4(float Predicate, float4 True, float4 False, out float4 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_058f4fba88c3437288219f1929444bf2_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_43d85b3291324c848dfbeec6adac2a71_Out_0 = IN.uv0;
        float4 _UV_36881dcaab9040168fc5215dcd00f352_Out_0 = IN.uv2;
        float4 _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3;
        Unity_Branch_float4(_Property_058f4fba88c3437288219f1929444bf2_Out_0, _UV_43d85b3291324c848dfbeec6adac2a71_Out_0, _UV_36881dcaab9040168fc5215dcd00f352_Out_0, _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float((_Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3.xy), _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3) );
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1;
        {
        float3x3 tangentTransform = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, tangentTransform, true);
        }
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        float Unity_SimpleNoise_ValueNoise_LegacySine_float (float2 uv)
        {
        float2 i = floor(uv);
        float2 f = frac(uv);
        f = f * f * (3.0 - 2.0 * f);
        uv = abs(frac(uv) - 0.5);
        float2 c0 = i + float2(0.0, 0.0);
        float2 c1 = i + float2(1.0, 0.0);
        float2 c2 = i + float2(0.0, 1.0);
        float2 c3 = i + float2(1.0, 1.0);
        float r0; Hash_LegacySine_2_1_float(c0, r0);
        float r1; Hash_LegacySine_2_1_float(c1, r1);
        float r2; Hash_LegacySine_2_1_float(c2, r2);
        float r3; Hash_LegacySine_2_1_float(c3, r3);
        float bottomOfGrid = lerp(r0, r1, f.x);
        float topOfGrid = lerp(r2, r3, f.x);
        float t = lerp(bottomOfGrid, topOfGrid, f.y);
        return t;
        }
        
        void Unity_SimpleNoise_LegacySine_float(float2 UV, float Scale, out float Out)
        {
        float freq, amp;
        Out = 0.0f;
        freq = pow(2.0, float(0));
        amp = pow(0.5, float(3-0));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(1));
        amp = pow(0.5, float(3-1));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(2));
        amp = pow(0.5, float(3-2));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(float Vector1_E4D1C13A, float Vector1_CBF4C304, Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float IN, out float XYZ_1)
        {
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0 = Vector1_CBF4C304;
        float _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2);
        float _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2);
        float _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, _Add_e855069f047fae8ea9027d56acb61e56_Out_2, _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Contrast_float(float3 In, float Contrast, out float3 Out)
        {
            float midpoint = pow(0.5, 2.2);
            Out =  (In - midpoint) * Contrast + midpoint;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Lerp_float2(float2 A, float2 B, float2 T, out float2 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_029e8e8198564838b9389b902a09fb22_Out_0 = IN.uv0;
        float4 _UV_7a6209af1506424fb75c81e87e42035a_Out_0 = IN.uv2;
        float4 _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3;
        Unity_Branch_float4(_Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0, _UV_029e8e8198564838b9389b902a09fb22_Out_0, _UV_7a6209af1506424fb75c81e87e42035a_Out_0, _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float((_Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3.xy), _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3) );
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        struct Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float IN, out float4 XZ_2)
        {
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        XZ_2 = (float4(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3, 0.0, 1.0));
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Blend_Lighten_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            Out = max(Blend, Base);
            Out = lerp(Base, Out, Opacity);
        }
        
        float3 Unity_HDRP_SampleSceneColor_float(float2 uv, float lod, float exposureMultiplier)
        {
            exposureMultiplier = 1.0;
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(_SURFACE_TYPE_TRANSPARENT) && defined(SHADERPASS) && (SHADERPASS != SHADERPASS_LIGHT_TRANSPORT) && (SHADERPASS != SHADERPASS_PATH_TRACING) && (SHADERPASS != SHADERPASS_RAYTRACING_VISIBILITY) && (SHADERPASS != SHADERPASS_RAYTRACING_FORWARD)
            return SampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(CUSTOM_PASS_SAMPLING_HLSL) && defined(SHADERPASS) && (SHADERPASS == SHADERPASS_DRAWPROCEDURAL || SHADERPASS == SHADERPASS_BLIT)
            return CustomPassSampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            return float3(0.0, 0.0, 0.0);
        }
        
        void Unity_Comparison_Greater_float(float A, float B, out float Out)
        {
            Out = A > B ? 1 : 0;
        }
        
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float
        {
        float4 ScreenPosition;
        };
        
        void SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float IN, out float2 OutVector2_1)
        {
        float4 _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0 = IN.ScreenPosition;
        float _Split_b183780fdd2343708af64846c96ee2a7_R_1 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[0];
        float _Split_b183780fdd2343708af64846c96ee2a7_G_2 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[1];
        float _Split_b183780fdd2343708af64846c96ee2a7_B_3 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[2];
        float _Split_b183780fdd2343708af64846c96ee2a7_A_4 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[3];
        float2 _Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0 = float2(_Split_b183780fdd2343708af64846c96ee2a7_R_1, _Split_b183780fdd2343708af64846c96ee2a7_G_2);
        float2 _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        Unity_Divide_float2(_Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0, (_Split_b183780fdd2343708af64846c96ee2a7_A_4.xx), _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2);
        OutVector2_1 = _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        }
        
        void Unity_SceneDepth_Raw_float(float4 UV, out float Out)
        {
            Out = SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void GetClipValues_float(out float2 Out){
        Out = float2(
        
        UNITY_NEAR_CLIP_VALUE,
        
        UNITY_RAW_FAR_CLIP_VALUE
        
        );
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
        {
            Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
        }
        
        struct Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float
        {
        float4 ScreenPosition;
        };
        
        void SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 _DistortionUV, Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float IN, out float Out_Depth_1, out float Out_DepthDistortion_2)
        {
        float _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2;
        Unity_Comparison_Greater_float(unity_OrthoParams.w, 0, _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2);
        float _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2;
        Unity_Comparison_Greater_float(_ProjectionParams.x, 0, _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2);
        Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff;
        _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff.ScreenPosition = IN.ScreenPosition;
        half2 _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1;
        SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff, _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1);
        float _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1;
        Unity_SceneDepth_Raw_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1);
        float _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1;
        Unity_OneMinus_float(_SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1);
        float _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3);
        float _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3, _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3);
        float4 _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0 = IN.ScreenPosition;
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float2 _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0;
        GetClipValues_float(_GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0);
        float _Remap_1907dbd4ae754843a5d74245135e2923_Out_3;
        Unity_Remap_float(_Split_62277fd721f74a399bd1009f8b3cb8e3_B_3, _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0, float2 (0, 1), _Remap_1907dbd4ae754843a5d74245135e2923_Out_3);
        float _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Remap_1907dbd4ae754843a5d74245135e2923_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3);
        float _Subtract_b98f5f0e27014160829b37533239eca2_Out_2;
        Unity_Subtract_float(_Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_b98f5f0e27014160829b37533239eca2_Out_2);
        float _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1;
        Unity_Saturate_float(_Subtract_b98f5f0e27014160829b37533239eca2_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1);
        float _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1);
        float _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2;
        Unity_Multiply_float_float(_SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1, _ProjectionParams.z, _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2);
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2;
        Unity_Subtract_float(_Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2);
        float _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2, _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3);
        float2 _Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0 = _DistortionUV;
        float _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1;
        Unity_SceneDepth_Raw_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1);
        float _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1;
        Unity_OneMinus_float(_SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1);
        float _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3);
        float _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3, _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3);
        float _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2;
        Unity_Subtract_float(_Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2);
        float _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1;
        Unity_Saturate_float(_Subtract_4531c88bf2b147d7a2998422330b141f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1);
        float _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1);
        float _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2;
        Unity_Multiply_float_float(_SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1, _ProjectionParams.z, _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2);
        float _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2;
        Unity_Subtract_float(_Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2);
        float _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2, _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3);
        Out_Depth_1 = _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Out_DepthDistortion_2 = _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82;
            float3 _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float2 Distortion;
            float DistortionBlur;
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            float _Property_e5176656505ae98292b155cb230ab233_Out_0 = _IceDistortion;
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_11506852e45cbb8f9732aebed8bbb210;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv0 = IN.uv0;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv2 = IN.uv2;
            float4 _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2);
            float _Split_f392619d76305f8e9a715324614291f5_R_1 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[0];
            float _Split_f392619d76305f8e9a715324614291f5_G_2 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[1];
            float _Split_f392619d76305f8e9a715324614291f5_B_3 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[2];
            float _Split_f392619d76305f8e9a715324614291f5_A_4 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[3];
            float4 _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4;
            float3 _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5;
            float2 _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6;
            Unity_Combine_float(_Split_f392619d76305f8e9a715324614291f5_R_1, _Split_f392619d76305f8e9a715324614291f5_G_2, 0, 0, _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4, _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5, _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6);
            float2 _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2;
            Unity_Multiply_float2_float2((_Property_e5176656505ae98292b155cb230ab233_Out_0.xx), _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6, _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2);
            float _Property_f0b2859614d93f86b920c65decb52ecf_Out_0 = _Ice_Noise_Distortion;
            UnityTexture2D _Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0 = UnityBuildTexture2DStructNoScale(_IceNoiseNormal);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv0 = IN.uv0;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv2 = IN.uv2;
            float4 _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2);
            float _Split_1c2740a46a2f0281ab926911287ce711_R_1 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[0];
            float _Split_1c2740a46a2f0281ab926911287ce711_G_2 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[1];
            float _Split_1c2740a46a2f0281ab926911287ce711_B_3 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[2];
            float _Split_1c2740a46a2f0281ab926911287ce711_A_4 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[3];
            float4 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4;
            float3 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5;
            float2 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6;
            Unity_Combine_float(_Split_1c2740a46a2f0281ab926911287ce711_R_1, _Split_1c2740a46a2f0281ab926911287ce711_G_2, 0, 0, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6);
            float2 _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2;
            Unity_Multiply_float2_float2((_Property_f0b2859614d93f86b920c65decb52ecf_Out_0.xx), _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2);
            float _Property_852d221028b884858f029fedb8de47d1_Out_0 = _IceNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_852d221028b884858f029fedb8de47d1_Out_0, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1);
            float _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1;
            Unity_Absolute_float(_TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1, _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1);
            float _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0 = _IceNoisePower;
            float _Power_1497f6299359e780a9aa8dde441d98cf_Out_2;
            Unity_Power_float(_Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1, _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0, _Power_1497f6299359e780a9aa8dde441d98cf_Out_2);
            float _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0 = _IceNoiseContrast;
            float3 _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2;
            Unity_Contrast_float((_Power_1497f6299359e780a9aa8dde441d98cf_Out_2.xxx), _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0, _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2);
            float _Split_f399eb1f3ad77580a75b6122d38451b5_R_1 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[0];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_G_2 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[1];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_B_3 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[2];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_A_4 = 0;
            float _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3;
            Unity_Clamp_float(_Split_f399eb1f3ad77580a75b6122d38451b5_R_1, 0, 1, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3);
            float2 _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            Unity_Lerp_float2(_Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xx), _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3);
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_893a7c3932a452849a5239a91f337a35;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv0 = IN.uv0;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv2 = IN.uv2;
            float4 _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_893a7c3932a452849a5239a91f337a35, _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2);
            float _Property_771911a99405a780908dd542012af7b8_Out_0 = _IceParallaxSteps;
            Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float _PlanarNMparallax_e8f8353657858a87933a47a40c74654d;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.uv0 = IN.uv0;
            float4 _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2;
            SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(_Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2);
            float _Property_efee416de222038a93fa523171fb9f0d_Out_0 = _ParalaxOffset;
            float _Property_720bc7e00a412889a10ca999204543f8_Out_0 = _IceParallaxNoiseMin;
            float _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0 = _IceParallaxNoiseMax;
            float _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0 = _IceParallaxNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1);
            float _Lerp_87de925175c62a8986309dc80655ce2f_Out_3;
            Unity_Lerp_float(_Property_720bc7e00a412889a10ca999204543f8_Out_0, _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3);
            float _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3;
            Unity_Lerp_float(_Property_efee416de222038a93fa523171fb9f0d_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3);
            float _Property_acfd17e181f6108ba7921d3e04df886d_Out_0 = _IceDepth;
            float _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0 = _ParallaxFalloff;
            float _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3;
            Unity_Lerp_float(_Property_eede9dad69eea580b2a3fdc05280f02f_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3);
            UnityTexture2D _Property_7c5c99f2c1b340ec980675a076619f86_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            float4 _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2;
            ParallaxLayers_float(_Property_771911a99405a780908dd542012af7b8_Out_0, (_PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2.xy), _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3, _Property_acfd17e181f6108ba7921d3e04df886d_Out_0, IN.TangentSpaceViewDirection, IN.WorldSpaceViewDirection, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _Property_7c5c99f2c1b340ec980675a076619f86_Out_0, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2);
            float4 _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2;
            Unity_Blend_Lighten_float4(_PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2, _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            float3 _HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2 = Unity_HDRP_SampleSceneColor_float(float4(IN.NDCPosition.xy, 0, 0).xy, 0, 1.0);
            float _Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0 = _CleanColorPower;
            float3 _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2;
            Unity_Multiply_float3_float3(_HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2, (_Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0.xxx), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2);
            float4 _Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0 = _DeepColor;
            float4 _Property_7094041d89afbd878cb83460f4ab68b8_Out_0 = _ShalowColor;
            Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c;
            _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c.ScreenPosition = IN.ScreenPosition;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2;
            SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 (0, 0), _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2);
            float _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0 = _ShalowFalloffMultiply;
            float _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0, _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2);
            float _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1;
            Unity_Absolute_float(_Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2, _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1);
            float _Property_e6dd087698d3e984bd5eb642347af797_Out_0 = _ShalowFalloffPower;
            float _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2;
            Unity_Multiply_float_float(_Property_e6dd087698d3e984bd5eb642347af797_Out_0, -1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2);
            float _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2;
            Unity_Power_float(_Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2, _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2);
            float _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1;
            Unity_Saturate_float(_Power_aaf82c5db3291a8bb2095cce38670a92_Out_2, _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1);
            float _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3;
            Unity_Clamp_float(_Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1, 0, 1, _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3);
            float4 _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3;
            Unity_Lerp_float4(_Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0, _Property_7094041d89afbd878cb83460f4ab68b8_Out_0, (_Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3.xxxx), _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3);
            float3 _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2;
            Unity_Multiply_float3_float3((_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2);
            float _Property_22da60d6cbff958696ddee1c161db229_Out_0 = _WaterAlphaMultiply;
            float _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_22da60d6cbff958696ddee1c161db229_Out_0, _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2);
            float _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3;
            Unity_Clamp_float(_Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2, 0, 1, _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3);
            float _Absolute_c4059e430bb17486afd523c0f333e478_Out_1;
            Unity_Absolute_float(_Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3, _Absolute_c4059e430bb17486afd523c0f333e478_Out_1);
            float _Property_cd34ee7769676e85b3e223f0e908967c_Out_0 = _WaterAlphaPower;
            float _Power_2c1f1e86c544138396974457f6515752_Out_2;
            Unity_Power_float(_Absolute_c4059e430bb17486afd523c0f333e478_Out_1, _Property_cd34ee7769676e85b3e223f0e908967c_Out_0, _Power_2c1f1e86c544138396974457f6515752_Out_2);
            float _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3;
            Unity_Clamp_float(_Power_2c1f1e86c544138396974457f6515752_Out_2, 0, 1, _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3);
            float3 _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3;
            Unity_Lerp_float3(_Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2, (_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), (_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3.xxx), _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3);
            float _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0 = _CleanFalloffMultiply;
            float _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0, _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2);
            float _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3;
            Unity_Clamp_float(_Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2, 0, 1, _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3);
            float _Absolute_2efac825a986e28190f26200795ca9ec_Out_1;
            Unity_Absolute_float(_Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3, _Absolute_2efac825a986e28190f26200795ca9ec_Out_1);
            float _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0 = _CleanFalloffPower;
            float _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2;
            Unity_Power_float(_Absolute_2efac825a986e28190f26200795ca9ec_Out_1, _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0, _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2);
            float _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3;
            Unity_Clamp_float(_Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2, 0, 1, _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3);
            float3 _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3;
            Unity_Lerp_float3(_Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3, (_Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3.xxx), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3);
            float3 _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3;
            Unity_Lerp_float3((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3);
            UnityTexture2D _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_256e5676e1089881ae3214634430b140_Out_0 = _DetailTilingOffset;
            float _Split_257d0b6ea953418d97fd7daa8128bf35_R_1 = _Property_256e5676e1089881ae3214634430b140_Out_0[0];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_G_2 = _Property_256e5676e1089881ae3214634430b140_Out_0[1];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_B_3 = _Property_256e5676e1089881ae3214634430b140_Out_0[2];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_A_4 = _Property_256e5676e1089881ae3214634430b140_Out_0[3];
            float2 _Vector2_98295494172421878c7a16cb2baddf9a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_R_1, _Split_257d0b6ea953418d97fd7daa8128bf35_G_2);
            float2 _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_B_3, _Split_257d0b6ea953418d97fd7daa8128bf35_A_4);
            float2 _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_98295494172421878c7a16cb2baddf9a_Out_0, _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0, _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3);
            float4 _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0 = SAMPLE_TEXTURE2D(_Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.tex, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.samplerstate, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.GetTransformedUV(_TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3) );
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.r;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.g;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.b;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.a;
            float _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4, 2, _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2);
            float _Add_fd3efcae64779e848ef39919335cd44d_Out_2;
            Unity_Add_float(_Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2, -1, _Add_fd3efcae64779e848ef39919335cd44d_Out_2);
            float _Property_605f29777330a58ba88ac032e905433b_Out_0 = _DetailAlbedoScale;
            float _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2;
            Unity_Multiply_float_float(_Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Property_605f29777330a58ba88ac032e905433b_Out_0, _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2);
            float _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1;
            Unity_Saturate_float(_Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2, _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1);
            float _Absolute_8acef423205118879e75274a48969d34_Out_1;
            Unity_Absolute_float(_Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1, _Absolute_8acef423205118879e75274a48969d34_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185;
            float3 _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float((float4(_Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3, 1.0)), _Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Absolute_8acef423205118879e75274a48969d34_Out_1, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1);
            float4 _Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0 = _WetColor;
            float3 _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2;
            Unity_Multiply_float3_float3((_Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0.xyz), _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2);
            float _Split_5b2299b48b10138ea40c141b79bfe90e_R_1 = IN.VertexColor[0];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_G_2 = IN.VertexColor[1];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_B_3 = IN.VertexColor[2];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_A_4 = IN.VertexColor[3];
            float _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3;
            Unity_Clamp_float(_Split_5b2299b48b10138ea40c141b79bfe90e_R_1, 0, 1, _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3);
            float _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1;
            Unity_OneMinus_float(_Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1);
            float3 _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            Unity_Lerp_float3(_BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2, (_OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1.xxx), _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3);
            float _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            Unity_Multiply_float_float(_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3, _Split_5b2299b48b10138ea40c141b79bfe90e_A_4, _Multiply_ffa35df91e1277898c1160f454087deb_Out_2);
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAO;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _IceSmoothness;
            float _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0 = _IceCrackSmoothness;
            UnityTexture2D _Property_be61fb085f680285bb171ac957c1d150_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv0 = IN.uv0;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv2 = IN.uv2;
            float4 _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_be61fb085f680285bb171ac957c1d150_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2);
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[0];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_G_2 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[1];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_B_3 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[2];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_A_4 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[3];
            float _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3;
            Unity_Lerp_float(_Property_0edea7916ed7a189a62b0faf2c274601_Out_0, _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0, _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3);
            float _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0 = _IceNoiseSmoothness;
            float _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3;
            Unity_Lerp_float(_Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3, _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3, _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3);
            float _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6, 2, _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2);
            float _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2;
            Unity_Add_float(_Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2, -1, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2);
            float _Property_cea4e47b293a988a83643b43f76c92ba_Out_0 = _DetailSmoothnessScale;
            float _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2;
            Unity_Multiply_float_float(_Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Property_cea4e47b293a988a83643b43f76c92ba_Out_0, _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2);
            float _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1;
            Unity_Saturate_float(_Multiply_2008466558f0e4819e60b3c41d94487c_Out_2, _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1);
            float _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1;
            Unity_Absolute_float(_Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43;
            float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1);
            float _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0 = _WetSmoothness;
            float _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1, _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3);
            float2 _Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0 = float2(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7, _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5);
            float2 _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2;
            Unity_Multiply_float2_float2(_Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0, float2(2, 2), _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2);
            float2 _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2;
            Unity_Add_float2(_Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2, float2(-1, -1), _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2);
            float _Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0 = _DetailNormalScale;
            float2 _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2;
            Unity_Multiply_float2_float2(_Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2, (_Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0.xx), _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2);
            float _Split_c4822b8eaff9b185be7c059792345712_R_1 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[0];
            float _Split_c4822b8eaff9b185be7c059792345712_G_2 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[1];
            float _Split_c4822b8eaff9b185be7c059792345712_B_3 = 0;
            float _Split_c4822b8eaff9b185be7c059792345712_A_4 = 0;
            float _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2;
            Unity_DotProduct_float2(_Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2);
            float _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1;
            Unity_Saturate_float(_DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2, _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1);
            float _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1;
            Unity_OneMinus_float(_Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1, _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1);
            float _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1;
            Unity_SquareRoot_float(_OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float3 _Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0 = float3(_Split_c4822b8eaff9b185be7c059792345712_R_1, _Split_c4822b8eaff9b185be7c059792345712_G_2, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            float _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0 = _NoiseNormalScale;
            float3 _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2.xyz), _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2);
            float3 _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3;
            Unity_Lerp_float3(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3);
            float3 _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            Unity_NormalBlend_float(_Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0, _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3, _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2);
            float _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1;
            Unity_OneMinus_float(_Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1);
            float _Property_42e21c36617ec48ba2d35424c394cb28_Out_0 = _Ice_Thickness;
            float _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2;
            Unity_Multiply_float_float(_OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1, _Property_42e21c36617ec48ba2d35424c394cb28_Out_0, _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2);
            float _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            Unity_Clamp_float(_Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2, 0, 1, _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3);
            surface.Distortion = _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            surface.DistortionBlur = 0;
            surface.BaseColor = _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            surface.TransmissionMask = 1;
            surface.Thickness = _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            surface.DiffusionProfileHash = _DiffusionProfileHash;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.WorldSpacePosition =                         input.positionRWS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.ScreenPosition = ComputeScreenPos(TransformWorldToHClip(input.positionRWS), _ProjectionParams.x);
        
        #if UNITY_UV_STARTS_AT_TOP
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #else
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
            output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
            output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        
            output.uv0 =                                        input.texCoord0;
            output.uv2 =                                        input.texCoord2;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
            surfaceData.thickness =                 surfaceDescription.Thickness;
            surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "GBuffer"
            Tags
            {
                "LightMode" = "GBuffer"
            }
        
            // Render State
            Cull [_CullMode]
        ZTest [_ZTestGBuffer]
        ColorMask [_LightLayersMaskBuffer4] 4
        ColorMask [_LightLayersMaskBuffer5] 5
        Stencil
        {
        WriteMask [_StencilWriteMaskGBuffer]
        Ref [_StencilRefGBuffer]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma multi_compile_fragment _ LIGHT_LAYERS
        #pragma multi_compile_raytracing _ LIGHT_LAYERS
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
        #pragma multi_compile_raytracing _ SHADOWS_SHADOWMASK
        #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD1
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_GBUFFER
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define REQUIRE_DEPTH_TEXTURE
        #define REQUIRE_OPAQUE_TEXTURE
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float _WaterAlphaMultiply;
        float _WaterAlphaPower;
        float _CleanFalloffMultiply;
        float _CleanFalloffPower;
        float _ShalowFalloffMultiply;
        float _ShalowFalloffPower;
        float _CleanColorPower;
        float4 _ShalowColor;
        float4 _DeepColor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float _IceNoiseScale;
        float _IceNoiseContrast;
        float _IceNoisePower;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _IceNoiseNormal_TexelSize;
        float _NoiseNormalScale;
        float _BaseAO;
        float _IceSmoothness;
        float _IceCrackSmoothness;
        float _IceNoiseSmoothness;
        float4 _ParalaxMap_TexelSize;
        float _ParalaxOffset;
        float _IceParallaxSteps;
        float _IceDepth;
        float _ParallaxFalloff;
        float _IceParallaxNoiseScale;
        float _IceParallaxNoiseMin;
        float _IceParallaxNoiseMax;
        float _Ice_Thickness;
        float _IceDistortion;
        float _Ice_Noise_Distortion;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_IceNoiseNormal);
        SAMPLER(sampler_IceNoiseNormal);
        TEXTURE2D(_ParalaxMap);
        SAMPLER(sampler_ParalaxMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Hashes.hlsl"
        #include "./NMParallaxLayers.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 WorldSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 ScreenPosition;
             float2 NDCPosition;
             float2 PixelPosition;
             float4 uv0;
             float4 uv2;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord1;
            output.interp5.xyzw =  input.texCoord2;
            output.interp6.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord1 = input.interp4.xyzw;
            output.texCoord2 = input.interp5.xyzw;
            output.color = input.interp6.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Branch_float4(float Predicate, float4 True, float4 False, out float4 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_058f4fba88c3437288219f1929444bf2_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_43d85b3291324c848dfbeec6adac2a71_Out_0 = IN.uv0;
        float4 _UV_36881dcaab9040168fc5215dcd00f352_Out_0 = IN.uv2;
        float4 _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3;
        Unity_Branch_float4(_Property_058f4fba88c3437288219f1929444bf2_Out_0, _UV_43d85b3291324c848dfbeec6adac2a71_Out_0, _UV_36881dcaab9040168fc5215dcd00f352_Out_0, _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float((_Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3.xy), _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3) );
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1;
        {
        float3x3 tangentTransform = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, tangentTransform, true);
        }
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        float Unity_SimpleNoise_ValueNoise_LegacySine_float (float2 uv)
        {
        float2 i = floor(uv);
        float2 f = frac(uv);
        f = f * f * (3.0 - 2.0 * f);
        uv = abs(frac(uv) - 0.5);
        float2 c0 = i + float2(0.0, 0.0);
        float2 c1 = i + float2(1.0, 0.0);
        float2 c2 = i + float2(0.0, 1.0);
        float2 c3 = i + float2(1.0, 1.0);
        float r0; Hash_LegacySine_2_1_float(c0, r0);
        float r1; Hash_LegacySine_2_1_float(c1, r1);
        float r2; Hash_LegacySine_2_1_float(c2, r2);
        float r3; Hash_LegacySine_2_1_float(c3, r3);
        float bottomOfGrid = lerp(r0, r1, f.x);
        float topOfGrid = lerp(r2, r3, f.x);
        float t = lerp(bottomOfGrid, topOfGrid, f.y);
        return t;
        }
        
        void Unity_SimpleNoise_LegacySine_float(float2 UV, float Scale, out float Out)
        {
        float freq, amp;
        Out = 0.0f;
        freq = pow(2.0, float(0));
        amp = pow(0.5, float(3-0));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(1));
        amp = pow(0.5, float(3-1));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(2));
        amp = pow(0.5, float(3-2));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(float Vector1_E4D1C13A, float Vector1_CBF4C304, Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float IN, out float XYZ_1)
        {
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0 = Vector1_CBF4C304;
        float _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2);
        float _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2);
        float _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, _Add_e855069f047fae8ea9027d56acb61e56_Out_2, _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Contrast_float(float3 In, float Contrast, out float3 Out)
        {
            float midpoint = pow(0.5, 2.2);
            Out =  (In - midpoint) * Contrast + midpoint;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Lerp_float2(float2 A, float2 B, float2 T, out float2 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_029e8e8198564838b9389b902a09fb22_Out_0 = IN.uv0;
        float4 _UV_7a6209af1506424fb75c81e87e42035a_Out_0 = IN.uv2;
        float4 _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3;
        Unity_Branch_float4(_Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0, _UV_029e8e8198564838b9389b902a09fb22_Out_0, _UV_7a6209af1506424fb75c81e87e42035a_Out_0, _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float((_Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3.xy), _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3) );
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        struct Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float IN, out float4 XZ_2)
        {
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        XZ_2 = (float4(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3, 0.0, 1.0));
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Blend_Lighten_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            Out = max(Blend, Base);
            Out = lerp(Base, Out, Opacity);
        }
        
        float3 Unity_HDRP_SampleSceneColor_float(float2 uv, float lod, float exposureMultiplier)
        {
            exposureMultiplier = 1.0;
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(_SURFACE_TYPE_TRANSPARENT) && defined(SHADERPASS) && (SHADERPASS != SHADERPASS_LIGHT_TRANSPORT) && (SHADERPASS != SHADERPASS_PATH_TRACING) && (SHADERPASS != SHADERPASS_RAYTRACING_VISIBILITY) && (SHADERPASS != SHADERPASS_RAYTRACING_FORWARD)
            return SampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(CUSTOM_PASS_SAMPLING_HLSL) && defined(SHADERPASS) && (SHADERPASS == SHADERPASS_DRAWPROCEDURAL || SHADERPASS == SHADERPASS_BLIT)
            return CustomPassSampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            return float3(0.0, 0.0, 0.0);
        }
        
        void Unity_Comparison_Greater_float(float A, float B, out float Out)
        {
            Out = A > B ? 1 : 0;
        }
        
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float
        {
        float4 ScreenPosition;
        };
        
        void SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float IN, out float2 OutVector2_1)
        {
        float4 _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0 = IN.ScreenPosition;
        float _Split_b183780fdd2343708af64846c96ee2a7_R_1 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[0];
        float _Split_b183780fdd2343708af64846c96ee2a7_G_2 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[1];
        float _Split_b183780fdd2343708af64846c96ee2a7_B_3 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[2];
        float _Split_b183780fdd2343708af64846c96ee2a7_A_4 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[3];
        float2 _Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0 = float2(_Split_b183780fdd2343708af64846c96ee2a7_R_1, _Split_b183780fdd2343708af64846c96ee2a7_G_2);
        float2 _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        Unity_Divide_float2(_Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0, (_Split_b183780fdd2343708af64846c96ee2a7_A_4.xx), _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2);
        OutVector2_1 = _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        }
        
        void Unity_SceneDepth_Raw_float(float4 UV, out float Out)
        {
            Out = SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void GetClipValues_float(out float2 Out){
        Out = float2(
        
        UNITY_NEAR_CLIP_VALUE,
        
        UNITY_RAW_FAR_CLIP_VALUE
        
        );
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
        {
            Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
        }
        
        struct Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float
        {
        float4 ScreenPosition;
        };
        
        void SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 _DistortionUV, Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float IN, out float Out_Depth_1, out float Out_DepthDistortion_2)
        {
        float _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2;
        Unity_Comparison_Greater_float(unity_OrthoParams.w, 0, _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2);
        float _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2;
        Unity_Comparison_Greater_float(_ProjectionParams.x, 0, _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2);
        Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff;
        _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff.ScreenPosition = IN.ScreenPosition;
        half2 _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1;
        SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff, _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1);
        float _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1;
        Unity_SceneDepth_Raw_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1);
        float _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1;
        Unity_OneMinus_float(_SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1);
        float _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3);
        float _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3, _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3);
        float4 _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0 = IN.ScreenPosition;
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float2 _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0;
        GetClipValues_float(_GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0);
        float _Remap_1907dbd4ae754843a5d74245135e2923_Out_3;
        Unity_Remap_float(_Split_62277fd721f74a399bd1009f8b3cb8e3_B_3, _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0, float2 (0, 1), _Remap_1907dbd4ae754843a5d74245135e2923_Out_3);
        float _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Remap_1907dbd4ae754843a5d74245135e2923_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3);
        float _Subtract_b98f5f0e27014160829b37533239eca2_Out_2;
        Unity_Subtract_float(_Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_b98f5f0e27014160829b37533239eca2_Out_2);
        float _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1;
        Unity_Saturate_float(_Subtract_b98f5f0e27014160829b37533239eca2_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1);
        float _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1);
        float _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2;
        Unity_Multiply_float_float(_SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1, _ProjectionParams.z, _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2);
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2;
        Unity_Subtract_float(_Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2);
        float _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2, _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3);
        float2 _Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0 = _DistortionUV;
        float _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1;
        Unity_SceneDepth_Raw_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1);
        float _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1;
        Unity_OneMinus_float(_SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1);
        float _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3);
        float _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3, _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3);
        float _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2;
        Unity_Subtract_float(_Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2);
        float _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1;
        Unity_Saturate_float(_Subtract_4531c88bf2b147d7a2998422330b141f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1);
        float _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1);
        float _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2;
        Unity_Multiply_float_float(_SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1, _ProjectionParams.z, _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2);
        float _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2;
        Unity_Subtract_float(_Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2);
        float _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2, _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3);
        Out_Depth_1 = _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Out_DepthDistortion_2 = _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82;
            float3 _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float2 Distortion;
            float DistortionBlur;
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
            float4 VTPackedFeedback;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            float _Property_e5176656505ae98292b155cb230ab233_Out_0 = _IceDistortion;
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_11506852e45cbb8f9732aebed8bbb210;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv0 = IN.uv0;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv2 = IN.uv2;
            float4 _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2);
            float _Split_f392619d76305f8e9a715324614291f5_R_1 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[0];
            float _Split_f392619d76305f8e9a715324614291f5_G_2 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[1];
            float _Split_f392619d76305f8e9a715324614291f5_B_3 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[2];
            float _Split_f392619d76305f8e9a715324614291f5_A_4 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[3];
            float4 _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4;
            float3 _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5;
            float2 _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6;
            Unity_Combine_float(_Split_f392619d76305f8e9a715324614291f5_R_1, _Split_f392619d76305f8e9a715324614291f5_G_2, 0, 0, _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4, _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5, _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6);
            float2 _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2;
            Unity_Multiply_float2_float2((_Property_e5176656505ae98292b155cb230ab233_Out_0.xx), _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6, _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2);
            float _Property_f0b2859614d93f86b920c65decb52ecf_Out_0 = _Ice_Noise_Distortion;
            UnityTexture2D _Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0 = UnityBuildTexture2DStructNoScale(_IceNoiseNormal);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv0 = IN.uv0;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv2 = IN.uv2;
            float4 _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2);
            float _Split_1c2740a46a2f0281ab926911287ce711_R_1 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[0];
            float _Split_1c2740a46a2f0281ab926911287ce711_G_2 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[1];
            float _Split_1c2740a46a2f0281ab926911287ce711_B_3 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[2];
            float _Split_1c2740a46a2f0281ab926911287ce711_A_4 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[3];
            float4 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4;
            float3 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5;
            float2 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6;
            Unity_Combine_float(_Split_1c2740a46a2f0281ab926911287ce711_R_1, _Split_1c2740a46a2f0281ab926911287ce711_G_2, 0, 0, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6);
            float2 _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2;
            Unity_Multiply_float2_float2((_Property_f0b2859614d93f86b920c65decb52ecf_Out_0.xx), _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2);
            float _Property_852d221028b884858f029fedb8de47d1_Out_0 = _IceNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_852d221028b884858f029fedb8de47d1_Out_0, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1);
            float _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1;
            Unity_Absolute_float(_TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1, _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1);
            float _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0 = _IceNoisePower;
            float _Power_1497f6299359e780a9aa8dde441d98cf_Out_2;
            Unity_Power_float(_Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1, _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0, _Power_1497f6299359e780a9aa8dde441d98cf_Out_2);
            float _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0 = _IceNoiseContrast;
            float3 _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2;
            Unity_Contrast_float((_Power_1497f6299359e780a9aa8dde441d98cf_Out_2.xxx), _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0, _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2);
            float _Split_f399eb1f3ad77580a75b6122d38451b5_R_1 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[0];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_G_2 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[1];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_B_3 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[2];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_A_4 = 0;
            float _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3;
            Unity_Clamp_float(_Split_f399eb1f3ad77580a75b6122d38451b5_R_1, 0, 1, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3);
            float2 _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            Unity_Lerp_float2(_Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xx), _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3);
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_893a7c3932a452849a5239a91f337a35;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv0 = IN.uv0;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv2 = IN.uv2;
            float4 _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_893a7c3932a452849a5239a91f337a35, _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2);
            float _Property_771911a99405a780908dd542012af7b8_Out_0 = _IceParallaxSteps;
            Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float _PlanarNMparallax_e8f8353657858a87933a47a40c74654d;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.uv0 = IN.uv0;
            float4 _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2;
            SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(_Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2);
            float _Property_efee416de222038a93fa523171fb9f0d_Out_0 = _ParalaxOffset;
            float _Property_720bc7e00a412889a10ca999204543f8_Out_0 = _IceParallaxNoiseMin;
            float _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0 = _IceParallaxNoiseMax;
            float _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0 = _IceParallaxNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1);
            float _Lerp_87de925175c62a8986309dc80655ce2f_Out_3;
            Unity_Lerp_float(_Property_720bc7e00a412889a10ca999204543f8_Out_0, _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3);
            float _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3;
            Unity_Lerp_float(_Property_efee416de222038a93fa523171fb9f0d_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3);
            float _Property_acfd17e181f6108ba7921d3e04df886d_Out_0 = _IceDepth;
            float _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0 = _ParallaxFalloff;
            float _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3;
            Unity_Lerp_float(_Property_eede9dad69eea580b2a3fdc05280f02f_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3);
            UnityTexture2D _Property_7c5c99f2c1b340ec980675a076619f86_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            float4 _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2;
            ParallaxLayers_float(_Property_771911a99405a780908dd542012af7b8_Out_0, (_PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2.xy), _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3, _Property_acfd17e181f6108ba7921d3e04df886d_Out_0, IN.TangentSpaceViewDirection, IN.WorldSpaceViewDirection, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _Property_7c5c99f2c1b340ec980675a076619f86_Out_0, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2);
            float4 _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2;
            Unity_Blend_Lighten_float4(_PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2, _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            float3 _HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2 = Unity_HDRP_SampleSceneColor_float(float4(IN.NDCPosition.xy, 0, 0).xy, 0, 1.0);
            float _Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0 = _CleanColorPower;
            float3 _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2;
            Unity_Multiply_float3_float3(_HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2, (_Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0.xxx), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2);
            float4 _Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0 = _DeepColor;
            float4 _Property_7094041d89afbd878cb83460f4ab68b8_Out_0 = _ShalowColor;
            Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c;
            _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c.ScreenPosition = IN.ScreenPosition;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2;
            SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 (0, 0), _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2);
            float _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0 = _ShalowFalloffMultiply;
            float _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0, _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2);
            float _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1;
            Unity_Absolute_float(_Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2, _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1);
            float _Property_e6dd087698d3e984bd5eb642347af797_Out_0 = _ShalowFalloffPower;
            float _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2;
            Unity_Multiply_float_float(_Property_e6dd087698d3e984bd5eb642347af797_Out_0, -1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2);
            float _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2;
            Unity_Power_float(_Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2, _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2);
            float _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1;
            Unity_Saturate_float(_Power_aaf82c5db3291a8bb2095cce38670a92_Out_2, _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1);
            float _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3;
            Unity_Clamp_float(_Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1, 0, 1, _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3);
            float4 _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3;
            Unity_Lerp_float4(_Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0, _Property_7094041d89afbd878cb83460f4ab68b8_Out_0, (_Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3.xxxx), _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3);
            float3 _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2;
            Unity_Multiply_float3_float3((_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2);
            float _Property_22da60d6cbff958696ddee1c161db229_Out_0 = _WaterAlphaMultiply;
            float _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_22da60d6cbff958696ddee1c161db229_Out_0, _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2);
            float _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3;
            Unity_Clamp_float(_Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2, 0, 1, _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3);
            float _Absolute_c4059e430bb17486afd523c0f333e478_Out_1;
            Unity_Absolute_float(_Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3, _Absolute_c4059e430bb17486afd523c0f333e478_Out_1);
            float _Property_cd34ee7769676e85b3e223f0e908967c_Out_0 = _WaterAlphaPower;
            float _Power_2c1f1e86c544138396974457f6515752_Out_2;
            Unity_Power_float(_Absolute_c4059e430bb17486afd523c0f333e478_Out_1, _Property_cd34ee7769676e85b3e223f0e908967c_Out_0, _Power_2c1f1e86c544138396974457f6515752_Out_2);
            float _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3;
            Unity_Clamp_float(_Power_2c1f1e86c544138396974457f6515752_Out_2, 0, 1, _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3);
            float3 _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3;
            Unity_Lerp_float3(_Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2, (_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), (_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3.xxx), _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3);
            float _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0 = _CleanFalloffMultiply;
            float _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0, _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2);
            float _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3;
            Unity_Clamp_float(_Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2, 0, 1, _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3);
            float _Absolute_2efac825a986e28190f26200795ca9ec_Out_1;
            Unity_Absolute_float(_Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3, _Absolute_2efac825a986e28190f26200795ca9ec_Out_1);
            float _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0 = _CleanFalloffPower;
            float _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2;
            Unity_Power_float(_Absolute_2efac825a986e28190f26200795ca9ec_Out_1, _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0, _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2);
            float _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3;
            Unity_Clamp_float(_Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2, 0, 1, _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3);
            float3 _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3;
            Unity_Lerp_float3(_Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3, (_Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3.xxx), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3);
            float3 _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3;
            Unity_Lerp_float3((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3);
            UnityTexture2D _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_256e5676e1089881ae3214634430b140_Out_0 = _DetailTilingOffset;
            float _Split_257d0b6ea953418d97fd7daa8128bf35_R_1 = _Property_256e5676e1089881ae3214634430b140_Out_0[0];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_G_2 = _Property_256e5676e1089881ae3214634430b140_Out_0[1];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_B_3 = _Property_256e5676e1089881ae3214634430b140_Out_0[2];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_A_4 = _Property_256e5676e1089881ae3214634430b140_Out_0[3];
            float2 _Vector2_98295494172421878c7a16cb2baddf9a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_R_1, _Split_257d0b6ea953418d97fd7daa8128bf35_G_2);
            float2 _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_B_3, _Split_257d0b6ea953418d97fd7daa8128bf35_A_4);
            float2 _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_98295494172421878c7a16cb2baddf9a_Out_0, _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0, _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3);
            float4 _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0 = SAMPLE_TEXTURE2D(_Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.tex, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.samplerstate, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.GetTransformedUV(_TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3) );
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.r;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.g;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.b;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.a;
            float _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4, 2, _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2);
            float _Add_fd3efcae64779e848ef39919335cd44d_Out_2;
            Unity_Add_float(_Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2, -1, _Add_fd3efcae64779e848ef39919335cd44d_Out_2);
            float _Property_605f29777330a58ba88ac032e905433b_Out_0 = _DetailAlbedoScale;
            float _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2;
            Unity_Multiply_float_float(_Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Property_605f29777330a58ba88ac032e905433b_Out_0, _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2);
            float _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1;
            Unity_Saturate_float(_Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2, _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1);
            float _Absolute_8acef423205118879e75274a48969d34_Out_1;
            Unity_Absolute_float(_Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1, _Absolute_8acef423205118879e75274a48969d34_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185;
            float3 _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float((float4(_Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3, 1.0)), _Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Absolute_8acef423205118879e75274a48969d34_Out_1, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1);
            float4 _Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0 = _WetColor;
            float3 _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2;
            Unity_Multiply_float3_float3((_Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0.xyz), _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2);
            float _Split_5b2299b48b10138ea40c141b79bfe90e_R_1 = IN.VertexColor[0];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_G_2 = IN.VertexColor[1];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_B_3 = IN.VertexColor[2];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_A_4 = IN.VertexColor[3];
            float _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3;
            Unity_Clamp_float(_Split_5b2299b48b10138ea40c141b79bfe90e_R_1, 0, 1, _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3);
            float _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1;
            Unity_OneMinus_float(_Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1);
            float3 _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            Unity_Lerp_float3(_BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2, (_OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1.xxx), _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3);
            float _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            Unity_Multiply_float_float(_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3, _Split_5b2299b48b10138ea40c141b79bfe90e_A_4, _Multiply_ffa35df91e1277898c1160f454087deb_Out_2);
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAO;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _IceSmoothness;
            float _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0 = _IceCrackSmoothness;
            UnityTexture2D _Property_be61fb085f680285bb171ac957c1d150_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv0 = IN.uv0;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv2 = IN.uv2;
            float4 _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_be61fb085f680285bb171ac957c1d150_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2);
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[0];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_G_2 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[1];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_B_3 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[2];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_A_4 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[3];
            float _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3;
            Unity_Lerp_float(_Property_0edea7916ed7a189a62b0faf2c274601_Out_0, _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0, _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3);
            float _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0 = _IceNoiseSmoothness;
            float _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3;
            Unity_Lerp_float(_Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3, _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3, _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3);
            float _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6, 2, _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2);
            float _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2;
            Unity_Add_float(_Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2, -1, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2);
            float _Property_cea4e47b293a988a83643b43f76c92ba_Out_0 = _DetailSmoothnessScale;
            float _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2;
            Unity_Multiply_float_float(_Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Property_cea4e47b293a988a83643b43f76c92ba_Out_0, _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2);
            float _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1;
            Unity_Saturate_float(_Multiply_2008466558f0e4819e60b3c41d94487c_Out_2, _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1);
            float _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1;
            Unity_Absolute_float(_Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43;
            float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1);
            float _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0 = _WetSmoothness;
            float _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1, _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3);
            float2 _Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0 = float2(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7, _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5);
            float2 _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2;
            Unity_Multiply_float2_float2(_Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0, float2(2, 2), _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2);
            float2 _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2;
            Unity_Add_float2(_Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2, float2(-1, -1), _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2);
            float _Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0 = _DetailNormalScale;
            float2 _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2;
            Unity_Multiply_float2_float2(_Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2, (_Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0.xx), _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2);
            float _Split_c4822b8eaff9b185be7c059792345712_R_1 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[0];
            float _Split_c4822b8eaff9b185be7c059792345712_G_2 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[1];
            float _Split_c4822b8eaff9b185be7c059792345712_B_3 = 0;
            float _Split_c4822b8eaff9b185be7c059792345712_A_4 = 0;
            float _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2;
            Unity_DotProduct_float2(_Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2);
            float _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1;
            Unity_Saturate_float(_DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2, _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1);
            float _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1;
            Unity_OneMinus_float(_Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1, _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1);
            float _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1;
            Unity_SquareRoot_float(_OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float3 _Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0 = float3(_Split_c4822b8eaff9b185be7c059792345712_R_1, _Split_c4822b8eaff9b185be7c059792345712_G_2, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            float _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0 = _NoiseNormalScale;
            float3 _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2.xyz), _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2);
            float3 _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3;
            Unity_Lerp_float3(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3);
            float3 _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            Unity_NormalBlend_float(_Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0, _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3, _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2);
            float _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1;
            Unity_OneMinus_float(_Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1);
            float _Property_42e21c36617ec48ba2d35424c394cb28_Out_0 = _Ice_Thickness;
            float _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2;
            Unity_Multiply_float_float(_OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1, _Property_42e21c36617ec48ba2d35424c394cb28_Out_0, _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2);
            float _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            Unity_Clamp_float(_Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2, 0, 1, _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3);
            surface.Distortion = _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            surface.DistortionBlur = 0;
            surface.BaseColor = _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            surface.TransmissionMask = 1;
            surface.Thickness = _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            surface.DiffusionProfileHash = _DiffusionProfileHash;
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.WorldSpacePosition =                         input.positionRWS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.ScreenPosition = ComputeScreenPos(TransformWorldToHClip(input.positionRWS), _ProjectionParams.x);
        
        #if UNITY_UV_STARTS_AT_TOP
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #else
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
            output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
            output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        
            output.uv0 =                                        input.texCoord0;
            output.uv2 =                                        input.texCoord2;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
            surfaceData.thickness =                 surfaceDescription.Thickness;
            surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassGBuffer.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "Forward"
            Tags
            {
                "LightMode" = "Forward"
            }
        
            // Render State
            Cull [_CullModeForward]
        Blend [_SrcBlend] [_DstBlend], [_AlphaSrcBlend] [_AlphaDstBlend]
        Blend 1 SrcAlpha OneMinusSrcAlpha
        ZTest [_ZTestDepthEqualForOpaque]
        ZWrite [_ZWrite]
        ColorMask [_ColorMaskTransparentVelOne] 1
        ColorMask [_ColorMaskTransparentVelTwo] 2
        Stencil
        {
        WriteMask [_StencilWriteMask]
        Ref [_StencilRef]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
        #pragma multi_compile_raytracing _ SHADOWS_SHADOWMASK
        #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
        #pragma multi_compile_fragment SHADOW_LOW SHADOW_MEDIUM SHADOW_HIGH
        #pragma multi_compile_fragment AREA_SHADOW_MEDIUM AREA_SHADOW_HIGH
        #pragma multi_compile_fragment SCREEN_SPACE_SHADOWS_OFF SCREEN_SPACE_SHADOWS_ON
        #pragma multi_compile_fragment USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD1
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_FORWARD
        #define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING 1
        #define HAS_LIGHTLOOP 1
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SHADER_LIT 1
        #define REQUIRE_DEPTH_TEXTURE
        #define REQUIRE_OPAQUE_TEXTURE
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float _WaterAlphaMultiply;
        float _WaterAlphaPower;
        float _CleanFalloffMultiply;
        float _CleanFalloffPower;
        float _ShalowFalloffMultiply;
        float _ShalowFalloffPower;
        float _CleanColorPower;
        float4 _ShalowColor;
        float4 _DeepColor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float _IceNoiseScale;
        float _IceNoiseContrast;
        float _IceNoisePower;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _IceNoiseNormal_TexelSize;
        float _NoiseNormalScale;
        float _BaseAO;
        float _IceSmoothness;
        float _IceCrackSmoothness;
        float _IceNoiseSmoothness;
        float4 _ParalaxMap_TexelSize;
        float _ParalaxOffset;
        float _IceParallaxSteps;
        float _IceDepth;
        float _ParallaxFalloff;
        float _IceParallaxNoiseScale;
        float _IceParallaxNoiseMin;
        float _IceParallaxNoiseMax;
        float _Ice_Thickness;
        float _IceDistortion;
        float _Ice_Noise_Distortion;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_IceNoiseNormal);
        SAMPLER(sampler_IceNoiseNormal);
        TEXTURE2D(_ParalaxMap);
        SAMPLER(sampler_ParalaxMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Hashes.hlsl"
        #include "./NMParallaxLayers.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 WorldSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 ScreenPosition;
             float2 NDCPosition;
             float2 PixelPosition;
             float4 uv0;
             float4 uv2;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord1;
            output.interp5.xyzw =  input.texCoord2;
            output.interp6.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord1 = input.interp4.xyzw;
            output.texCoord2 = input.interp5.xyzw;
            output.color = input.interp6.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Branch_float4(float Predicate, float4 True, float4 False, out float4 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_058f4fba88c3437288219f1929444bf2_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_43d85b3291324c848dfbeec6adac2a71_Out_0 = IN.uv0;
        float4 _UV_36881dcaab9040168fc5215dcd00f352_Out_0 = IN.uv2;
        float4 _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3;
        Unity_Branch_float4(_Property_058f4fba88c3437288219f1929444bf2_Out_0, _UV_43d85b3291324c848dfbeec6adac2a71_Out_0, _UV_36881dcaab9040168fc5215dcd00f352_Out_0, _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float((_Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3.xy), _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3) );
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1;
        {
        float3x3 tangentTransform = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, tangentTransform, true);
        }
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        float Unity_SimpleNoise_ValueNoise_LegacySine_float (float2 uv)
        {
        float2 i = floor(uv);
        float2 f = frac(uv);
        f = f * f * (3.0 - 2.0 * f);
        uv = abs(frac(uv) - 0.5);
        float2 c0 = i + float2(0.0, 0.0);
        float2 c1 = i + float2(1.0, 0.0);
        float2 c2 = i + float2(0.0, 1.0);
        float2 c3 = i + float2(1.0, 1.0);
        float r0; Hash_LegacySine_2_1_float(c0, r0);
        float r1; Hash_LegacySine_2_1_float(c1, r1);
        float r2; Hash_LegacySine_2_1_float(c2, r2);
        float r3; Hash_LegacySine_2_1_float(c3, r3);
        float bottomOfGrid = lerp(r0, r1, f.x);
        float topOfGrid = lerp(r2, r3, f.x);
        float t = lerp(bottomOfGrid, topOfGrid, f.y);
        return t;
        }
        
        void Unity_SimpleNoise_LegacySine_float(float2 UV, float Scale, out float Out)
        {
        float freq, amp;
        Out = 0.0f;
        freq = pow(2.0, float(0));
        amp = pow(0.5, float(3-0));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(1));
        amp = pow(0.5, float(3-1));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(2));
        amp = pow(0.5, float(3-2));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(float Vector1_E4D1C13A, float Vector1_CBF4C304, Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float IN, out float XYZ_1)
        {
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0 = Vector1_CBF4C304;
        float _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2);
        float _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2);
        float _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, _Add_e855069f047fae8ea9027d56acb61e56_Out_2, _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Contrast_float(float3 In, float Contrast, out float3 Out)
        {
            float midpoint = pow(0.5, 2.2);
            Out =  (In - midpoint) * Contrast + midpoint;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Lerp_float2(float2 A, float2 B, float2 T, out float2 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_029e8e8198564838b9389b902a09fb22_Out_0 = IN.uv0;
        float4 _UV_7a6209af1506424fb75c81e87e42035a_Out_0 = IN.uv2;
        float4 _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3;
        Unity_Branch_float4(_Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0, _UV_029e8e8198564838b9389b902a09fb22_Out_0, _UV_7a6209af1506424fb75c81e87e42035a_Out_0, _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float((_Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3.xy), _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3) );
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        struct Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float IN, out float4 XZ_2)
        {
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        XZ_2 = (float4(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3, 0.0, 1.0));
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Blend_Lighten_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            Out = max(Blend, Base);
            Out = lerp(Base, Out, Opacity);
        }
        
        float3 Unity_HDRP_SampleSceneColor_float(float2 uv, float lod, float exposureMultiplier)
        {
            exposureMultiplier = 1.0;
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(_SURFACE_TYPE_TRANSPARENT) && defined(SHADERPASS) && (SHADERPASS != SHADERPASS_LIGHT_TRANSPORT) && (SHADERPASS != SHADERPASS_PATH_TRACING) && (SHADERPASS != SHADERPASS_RAYTRACING_VISIBILITY) && (SHADERPASS != SHADERPASS_RAYTRACING_FORWARD)
            return SampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(CUSTOM_PASS_SAMPLING_HLSL) && defined(SHADERPASS) && (SHADERPASS == SHADERPASS_DRAWPROCEDURAL || SHADERPASS == SHADERPASS_BLIT)
            return CustomPassSampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            return float3(0.0, 0.0, 0.0);
        }
        
        void Unity_Comparison_Greater_float(float A, float B, out float Out)
        {
            Out = A > B ? 1 : 0;
        }
        
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float
        {
        float4 ScreenPosition;
        };
        
        void SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float IN, out float2 OutVector2_1)
        {
        float4 _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0 = IN.ScreenPosition;
        float _Split_b183780fdd2343708af64846c96ee2a7_R_1 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[0];
        float _Split_b183780fdd2343708af64846c96ee2a7_G_2 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[1];
        float _Split_b183780fdd2343708af64846c96ee2a7_B_3 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[2];
        float _Split_b183780fdd2343708af64846c96ee2a7_A_4 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[3];
        float2 _Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0 = float2(_Split_b183780fdd2343708af64846c96ee2a7_R_1, _Split_b183780fdd2343708af64846c96ee2a7_G_2);
        float2 _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        Unity_Divide_float2(_Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0, (_Split_b183780fdd2343708af64846c96ee2a7_A_4.xx), _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2);
        OutVector2_1 = _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        }
        
        void Unity_SceneDepth_Raw_float(float4 UV, out float Out)
        {
            Out = SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void GetClipValues_float(out float2 Out){
        Out = float2(
        
        UNITY_NEAR_CLIP_VALUE,
        
        UNITY_RAW_FAR_CLIP_VALUE
        
        );
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
        {
            Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
        }
        
        struct Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float
        {
        float4 ScreenPosition;
        };
        
        void SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 _DistortionUV, Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float IN, out float Out_Depth_1, out float Out_DepthDistortion_2)
        {
        float _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2;
        Unity_Comparison_Greater_float(unity_OrthoParams.w, 0, _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2);
        float _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2;
        Unity_Comparison_Greater_float(_ProjectionParams.x, 0, _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2);
        Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff;
        _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff.ScreenPosition = IN.ScreenPosition;
        half2 _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1;
        SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff, _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1);
        float _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1;
        Unity_SceneDepth_Raw_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1);
        float _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1;
        Unity_OneMinus_float(_SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1);
        float _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3);
        float _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3, _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3);
        float4 _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0 = IN.ScreenPosition;
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float2 _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0;
        GetClipValues_float(_GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0);
        float _Remap_1907dbd4ae754843a5d74245135e2923_Out_3;
        Unity_Remap_float(_Split_62277fd721f74a399bd1009f8b3cb8e3_B_3, _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0, float2 (0, 1), _Remap_1907dbd4ae754843a5d74245135e2923_Out_3);
        float _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Remap_1907dbd4ae754843a5d74245135e2923_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3);
        float _Subtract_b98f5f0e27014160829b37533239eca2_Out_2;
        Unity_Subtract_float(_Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_b98f5f0e27014160829b37533239eca2_Out_2);
        float _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1;
        Unity_Saturate_float(_Subtract_b98f5f0e27014160829b37533239eca2_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1);
        float _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1);
        float _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2;
        Unity_Multiply_float_float(_SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1, _ProjectionParams.z, _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2);
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2;
        Unity_Subtract_float(_Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2);
        float _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2, _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3);
        float2 _Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0 = _DistortionUV;
        float _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1;
        Unity_SceneDepth_Raw_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1);
        float _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1;
        Unity_OneMinus_float(_SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1);
        float _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3);
        float _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3, _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3);
        float _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2;
        Unity_Subtract_float(_Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2);
        float _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1;
        Unity_Saturate_float(_Subtract_4531c88bf2b147d7a2998422330b141f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1);
        float _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1);
        float _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2;
        Unity_Multiply_float_float(_SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1, _ProjectionParams.z, _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2);
        float _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2;
        Unity_Subtract_float(_Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2);
        float _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2, _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3);
        Out_Depth_1 = _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Out_DepthDistortion_2 = _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82;
            float3 _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float2 Distortion;
            float DistortionBlur;
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
            float4 VTPackedFeedback;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            float _Property_e5176656505ae98292b155cb230ab233_Out_0 = _IceDistortion;
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_11506852e45cbb8f9732aebed8bbb210;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv0 = IN.uv0;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv2 = IN.uv2;
            float4 _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2);
            float _Split_f392619d76305f8e9a715324614291f5_R_1 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[0];
            float _Split_f392619d76305f8e9a715324614291f5_G_2 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[1];
            float _Split_f392619d76305f8e9a715324614291f5_B_3 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[2];
            float _Split_f392619d76305f8e9a715324614291f5_A_4 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[3];
            float4 _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4;
            float3 _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5;
            float2 _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6;
            Unity_Combine_float(_Split_f392619d76305f8e9a715324614291f5_R_1, _Split_f392619d76305f8e9a715324614291f5_G_2, 0, 0, _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4, _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5, _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6);
            float2 _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2;
            Unity_Multiply_float2_float2((_Property_e5176656505ae98292b155cb230ab233_Out_0.xx), _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6, _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2);
            float _Property_f0b2859614d93f86b920c65decb52ecf_Out_0 = _Ice_Noise_Distortion;
            UnityTexture2D _Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0 = UnityBuildTexture2DStructNoScale(_IceNoiseNormal);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv0 = IN.uv0;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv2 = IN.uv2;
            float4 _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2);
            float _Split_1c2740a46a2f0281ab926911287ce711_R_1 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[0];
            float _Split_1c2740a46a2f0281ab926911287ce711_G_2 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[1];
            float _Split_1c2740a46a2f0281ab926911287ce711_B_3 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[2];
            float _Split_1c2740a46a2f0281ab926911287ce711_A_4 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[3];
            float4 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4;
            float3 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5;
            float2 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6;
            Unity_Combine_float(_Split_1c2740a46a2f0281ab926911287ce711_R_1, _Split_1c2740a46a2f0281ab926911287ce711_G_2, 0, 0, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6);
            float2 _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2;
            Unity_Multiply_float2_float2((_Property_f0b2859614d93f86b920c65decb52ecf_Out_0.xx), _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2);
            float _Property_852d221028b884858f029fedb8de47d1_Out_0 = _IceNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_852d221028b884858f029fedb8de47d1_Out_0, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1);
            float _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1;
            Unity_Absolute_float(_TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1, _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1);
            float _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0 = _IceNoisePower;
            float _Power_1497f6299359e780a9aa8dde441d98cf_Out_2;
            Unity_Power_float(_Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1, _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0, _Power_1497f6299359e780a9aa8dde441d98cf_Out_2);
            float _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0 = _IceNoiseContrast;
            float3 _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2;
            Unity_Contrast_float((_Power_1497f6299359e780a9aa8dde441d98cf_Out_2.xxx), _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0, _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2);
            float _Split_f399eb1f3ad77580a75b6122d38451b5_R_1 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[0];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_G_2 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[1];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_B_3 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[2];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_A_4 = 0;
            float _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3;
            Unity_Clamp_float(_Split_f399eb1f3ad77580a75b6122d38451b5_R_1, 0, 1, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3);
            float2 _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            Unity_Lerp_float2(_Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xx), _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3);
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_893a7c3932a452849a5239a91f337a35;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv0 = IN.uv0;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv2 = IN.uv2;
            float4 _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_893a7c3932a452849a5239a91f337a35, _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2);
            float _Property_771911a99405a780908dd542012af7b8_Out_0 = _IceParallaxSteps;
            Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float _PlanarNMparallax_e8f8353657858a87933a47a40c74654d;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.uv0 = IN.uv0;
            float4 _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2;
            SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(_Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2);
            float _Property_efee416de222038a93fa523171fb9f0d_Out_0 = _ParalaxOffset;
            float _Property_720bc7e00a412889a10ca999204543f8_Out_0 = _IceParallaxNoiseMin;
            float _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0 = _IceParallaxNoiseMax;
            float _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0 = _IceParallaxNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1);
            float _Lerp_87de925175c62a8986309dc80655ce2f_Out_3;
            Unity_Lerp_float(_Property_720bc7e00a412889a10ca999204543f8_Out_0, _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3);
            float _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3;
            Unity_Lerp_float(_Property_efee416de222038a93fa523171fb9f0d_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3);
            float _Property_acfd17e181f6108ba7921d3e04df886d_Out_0 = _IceDepth;
            float _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0 = _ParallaxFalloff;
            float _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3;
            Unity_Lerp_float(_Property_eede9dad69eea580b2a3fdc05280f02f_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3);
            UnityTexture2D _Property_7c5c99f2c1b340ec980675a076619f86_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            float4 _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2;
            ParallaxLayers_float(_Property_771911a99405a780908dd542012af7b8_Out_0, (_PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2.xy), _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3, _Property_acfd17e181f6108ba7921d3e04df886d_Out_0, IN.TangentSpaceViewDirection, IN.WorldSpaceViewDirection, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _Property_7c5c99f2c1b340ec980675a076619f86_Out_0, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2);
            float4 _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2;
            Unity_Blend_Lighten_float4(_PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2, _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            float3 _HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2 = Unity_HDRP_SampleSceneColor_float(float4(IN.NDCPosition.xy, 0, 0).xy, 0, 1.0);
            float _Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0 = _CleanColorPower;
            float3 _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2;
            Unity_Multiply_float3_float3(_HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2, (_Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0.xxx), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2);
            float4 _Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0 = _DeepColor;
            float4 _Property_7094041d89afbd878cb83460f4ab68b8_Out_0 = _ShalowColor;
            Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c;
            _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c.ScreenPosition = IN.ScreenPosition;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2;
            SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 (0, 0), _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2);
            float _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0 = _ShalowFalloffMultiply;
            float _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0, _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2);
            float _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1;
            Unity_Absolute_float(_Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2, _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1);
            float _Property_e6dd087698d3e984bd5eb642347af797_Out_0 = _ShalowFalloffPower;
            float _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2;
            Unity_Multiply_float_float(_Property_e6dd087698d3e984bd5eb642347af797_Out_0, -1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2);
            float _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2;
            Unity_Power_float(_Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2, _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2);
            float _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1;
            Unity_Saturate_float(_Power_aaf82c5db3291a8bb2095cce38670a92_Out_2, _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1);
            float _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3;
            Unity_Clamp_float(_Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1, 0, 1, _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3);
            float4 _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3;
            Unity_Lerp_float4(_Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0, _Property_7094041d89afbd878cb83460f4ab68b8_Out_0, (_Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3.xxxx), _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3);
            float3 _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2;
            Unity_Multiply_float3_float3((_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2);
            float _Property_22da60d6cbff958696ddee1c161db229_Out_0 = _WaterAlphaMultiply;
            float _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_22da60d6cbff958696ddee1c161db229_Out_0, _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2);
            float _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3;
            Unity_Clamp_float(_Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2, 0, 1, _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3);
            float _Absolute_c4059e430bb17486afd523c0f333e478_Out_1;
            Unity_Absolute_float(_Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3, _Absolute_c4059e430bb17486afd523c0f333e478_Out_1);
            float _Property_cd34ee7769676e85b3e223f0e908967c_Out_0 = _WaterAlphaPower;
            float _Power_2c1f1e86c544138396974457f6515752_Out_2;
            Unity_Power_float(_Absolute_c4059e430bb17486afd523c0f333e478_Out_1, _Property_cd34ee7769676e85b3e223f0e908967c_Out_0, _Power_2c1f1e86c544138396974457f6515752_Out_2);
            float _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3;
            Unity_Clamp_float(_Power_2c1f1e86c544138396974457f6515752_Out_2, 0, 1, _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3);
            float3 _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3;
            Unity_Lerp_float3(_Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2, (_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), (_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3.xxx), _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3);
            float _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0 = _CleanFalloffMultiply;
            float _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0, _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2);
            float _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3;
            Unity_Clamp_float(_Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2, 0, 1, _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3);
            float _Absolute_2efac825a986e28190f26200795ca9ec_Out_1;
            Unity_Absolute_float(_Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3, _Absolute_2efac825a986e28190f26200795ca9ec_Out_1);
            float _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0 = _CleanFalloffPower;
            float _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2;
            Unity_Power_float(_Absolute_2efac825a986e28190f26200795ca9ec_Out_1, _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0, _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2);
            float _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3;
            Unity_Clamp_float(_Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2, 0, 1, _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3);
            float3 _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3;
            Unity_Lerp_float3(_Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3, (_Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3.xxx), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3);
            float3 _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3;
            Unity_Lerp_float3((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3);
            UnityTexture2D _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_256e5676e1089881ae3214634430b140_Out_0 = _DetailTilingOffset;
            float _Split_257d0b6ea953418d97fd7daa8128bf35_R_1 = _Property_256e5676e1089881ae3214634430b140_Out_0[0];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_G_2 = _Property_256e5676e1089881ae3214634430b140_Out_0[1];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_B_3 = _Property_256e5676e1089881ae3214634430b140_Out_0[2];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_A_4 = _Property_256e5676e1089881ae3214634430b140_Out_0[3];
            float2 _Vector2_98295494172421878c7a16cb2baddf9a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_R_1, _Split_257d0b6ea953418d97fd7daa8128bf35_G_2);
            float2 _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_B_3, _Split_257d0b6ea953418d97fd7daa8128bf35_A_4);
            float2 _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_98295494172421878c7a16cb2baddf9a_Out_0, _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0, _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3);
            float4 _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0 = SAMPLE_TEXTURE2D(_Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.tex, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.samplerstate, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.GetTransformedUV(_TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3) );
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.r;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.g;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.b;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.a;
            float _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4, 2, _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2);
            float _Add_fd3efcae64779e848ef39919335cd44d_Out_2;
            Unity_Add_float(_Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2, -1, _Add_fd3efcae64779e848ef39919335cd44d_Out_2);
            float _Property_605f29777330a58ba88ac032e905433b_Out_0 = _DetailAlbedoScale;
            float _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2;
            Unity_Multiply_float_float(_Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Property_605f29777330a58ba88ac032e905433b_Out_0, _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2);
            float _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1;
            Unity_Saturate_float(_Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2, _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1);
            float _Absolute_8acef423205118879e75274a48969d34_Out_1;
            Unity_Absolute_float(_Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1, _Absolute_8acef423205118879e75274a48969d34_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185;
            float3 _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float((float4(_Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3, 1.0)), _Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Absolute_8acef423205118879e75274a48969d34_Out_1, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1);
            float4 _Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0 = _WetColor;
            float3 _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2;
            Unity_Multiply_float3_float3((_Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0.xyz), _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2);
            float _Split_5b2299b48b10138ea40c141b79bfe90e_R_1 = IN.VertexColor[0];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_G_2 = IN.VertexColor[1];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_B_3 = IN.VertexColor[2];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_A_4 = IN.VertexColor[3];
            float _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3;
            Unity_Clamp_float(_Split_5b2299b48b10138ea40c141b79bfe90e_R_1, 0, 1, _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3);
            float _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1;
            Unity_OneMinus_float(_Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1);
            float3 _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            Unity_Lerp_float3(_BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2, (_OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1.xxx), _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3);
            float _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            Unity_Multiply_float_float(_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3, _Split_5b2299b48b10138ea40c141b79bfe90e_A_4, _Multiply_ffa35df91e1277898c1160f454087deb_Out_2);
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAO;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _IceSmoothness;
            float _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0 = _IceCrackSmoothness;
            UnityTexture2D _Property_be61fb085f680285bb171ac957c1d150_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv0 = IN.uv0;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv2 = IN.uv2;
            float4 _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_be61fb085f680285bb171ac957c1d150_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2);
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[0];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_G_2 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[1];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_B_3 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[2];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_A_4 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[3];
            float _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3;
            Unity_Lerp_float(_Property_0edea7916ed7a189a62b0faf2c274601_Out_0, _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0, _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3);
            float _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0 = _IceNoiseSmoothness;
            float _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3;
            Unity_Lerp_float(_Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3, _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3, _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3);
            float _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6, 2, _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2);
            float _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2;
            Unity_Add_float(_Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2, -1, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2);
            float _Property_cea4e47b293a988a83643b43f76c92ba_Out_0 = _DetailSmoothnessScale;
            float _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2;
            Unity_Multiply_float_float(_Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Property_cea4e47b293a988a83643b43f76c92ba_Out_0, _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2);
            float _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1;
            Unity_Saturate_float(_Multiply_2008466558f0e4819e60b3c41d94487c_Out_2, _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1);
            float _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1;
            Unity_Absolute_float(_Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43;
            float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1);
            float _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0 = _WetSmoothness;
            float _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1, _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3);
            float2 _Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0 = float2(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7, _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5);
            float2 _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2;
            Unity_Multiply_float2_float2(_Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0, float2(2, 2), _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2);
            float2 _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2;
            Unity_Add_float2(_Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2, float2(-1, -1), _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2);
            float _Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0 = _DetailNormalScale;
            float2 _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2;
            Unity_Multiply_float2_float2(_Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2, (_Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0.xx), _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2);
            float _Split_c4822b8eaff9b185be7c059792345712_R_1 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[0];
            float _Split_c4822b8eaff9b185be7c059792345712_G_2 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[1];
            float _Split_c4822b8eaff9b185be7c059792345712_B_3 = 0;
            float _Split_c4822b8eaff9b185be7c059792345712_A_4 = 0;
            float _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2;
            Unity_DotProduct_float2(_Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2);
            float _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1;
            Unity_Saturate_float(_DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2, _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1);
            float _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1;
            Unity_OneMinus_float(_Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1, _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1);
            float _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1;
            Unity_SquareRoot_float(_OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float3 _Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0 = float3(_Split_c4822b8eaff9b185be7c059792345712_R_1, _Split_c4822b8eaff9b185be7c059792345712_G_2, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            float _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0 = _NoiseNormalScale;
            float3 _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2.xyz), _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2);
            float3 _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3;
            Unity_Lerp_float3(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3);
            float3 _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            Unity_NormalBlend_float(_Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0, _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3, _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2);
            float _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1;
            Unity_OneMinus_float(_Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1);
            float _Property_42e21c36617ec48ba2d35424c394cb28_Out_0 = _Ice_Thickness;
            float _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2;
            Unity_Multiply_float_float(_OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1, _Property_42e21c36617ec48ba2d35424c394cb28_Out_0, _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2);
            float _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            Unity_Clamp_float(_Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2, 0, 1, _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3);
            surface.Distortion = _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            surface.DistortionBlur = 0;
            surface.BaseColor = _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            surface.TransmissionMask = 1;
            surface.Thickness = _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            surface.DiffusionProfileHash = _DiffusionProfileHash;
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.WorldSpacePosition =                         input.positionRWS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.ScreenPosition = ComputeScreenPos(TransformWorldToHClip(input.positionRWS), _ProjectionParams.x);
        
        #if UNITY_UV_STARTS_AT_TOP
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #else
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
            output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
            output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        
            output.uv0 =                                        input.texCoord0;
            output.uv2 =                                        input.texCoord2;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
            surfaceData.thickness =                 surfaceDescription.Thickness;
            surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassForward.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "RayTracingPrepass"
            Tags
            {
                "LightMode" = "RayTracingPrepass"
            }
        
            // Render State
            Cull [_CullMode]
        Blend One Zero
        ZWrite On
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_CONSTANT
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define REQUIRE_DEPTH_TEXTURE
        #define REQUIRE_OPAQUE_TEXTURE
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float _WaterAlphaMultiply;
        float _WaterAlphaPower;
        float _CleanFalloffMultiply;
        float _CleanFalloffPower;
        float _ShalowFalloffMultiply;
        float _ShalowFalloffPower;
        float _CleanColorPower;
        float4 _ShalowColor;
        float4 _DeepColor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float _IceNoiseScale;
        float _IceNoiseContrast;
        float _IceNoisePower;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _IceNoiseNormal_TexelSize;
        float _NoiseNormalScale;
        float _BaseAO;
        float _IceSmoothness;
        float _IceCrackSmoothness;
        float _IceNoiseSmoothness;
        float4 _ParalaxMap_TexelSize;
        float _ParalaxOffset;
        float _IceParallaxSteps;
        float _IceDepth;
        float _ParallaxFalloff;
        float _IceParallaxNoiseScale;
        float _IceParallaxNoiseMin;
        float _IceParallaxNoiseMax;
        float _Ice_Thickness;
        float _IceDistortion;
        float _Ice_Noise_Distortion;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_IceNoiseNormal);
        SAMPLER(sampler_IceNoiseNormal);
        TEXTURE2D(_ParalaxMap);
        SAMPLER(sampler_ParalaxMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Hashes.hlsl"
        #include "./NMParallaxLayers.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 WorldSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 ScreenPosition;
             float2 NDCPosition;
             float2 PixelPosition;
             float4 uv0;
             float4 uv2;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord2;
            output.interp5.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord2 = input.interp4.xyzw;
            output.color = input.interp5.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Branch_float4(float Predicate, float4 True, float4 False, out float4 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_058f4fba88c3437288219f1929444bf2_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_43d85b3291324c848dfbeec6adac2a71_Out_0 = IN.uv0;
        float4 _UV_36881dcaab9040168fc5215dcd00f352_Out_0 = IN.uv2;
        float4 _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3;
        Unity_Branch_float4(_Property_058f4fba88c3437288219f1929444bf2_Out_0, _UV_43d85b3291324c848dfbeec6adac2a71_Out_0, _UV_36881dcaab9040168fc5215dcd00f352_Out_0, _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float((_Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3.xy), _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3) );
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1;
        {
        float3x3 tangentTransform = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, tangentTransform, true);
        }
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        float Unity_SimpleNoise_ValueNoise_LegacySine_float (float2 uv)
        {
        float2 i = floor(uv);
        float2 f = frac(uv);
        f = f * f * (3.0 - 2.0 * f);
        uv = abs(frac(uv) - 0.5);
        float2 c0 = i + float2(0.0, 0.0);
        float2 c1 = i + float2(1.0, 0.0);
        float2 c2 = i + float2(0.0, 1.0);
        float2 c3 = i + float2(1.0, 1.0);
        float r0; Hash_LegacySine_2_1_float(c0, r0);
        float r1; Hash_LegacySine_2_1_float(c1, r1);
        float r2; Hash_LegacySine_2_1_float(c2, r2);
        float r3; Hash_LegacySine_2_1_float(c3, r3);
        float bottomOfGrid = lerp(r0, r1, f.x);
        float topOfGrid = lerp(r2, r3, f.x);
        float t = lerp(bottomOfGrid, topOfGrid, f.y);
        return t;
        }
        
        void Unity_SimpleNoise_LegacySine_float(float2 UV, float Scale, out float Out)
        {
        float freq, amp;
        Out = 0.0f;
        freq = pow(2.0, float(0));
        amp = pow(0.5, float(3-0));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(1));
        amp = pow(0.5, float(3-1));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(2));
        amp = pow(0.5, float(3-2));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(float Vector1_E4D1C13A, float Vector1_CBF4C304, Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float IN, out float XYZ_1)
        {
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0 = Vector1_CBF4C304;
        float _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2);
        float _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2);
        float _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, _Add_e855069f047fae8ea9027d56acb61e56_Out_2, _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Contrast_float(float3 In, float Contrast, out float3 Out)
        {
            float midpoint = pow(0.5, 2.2);
            Out =  (In - midpoint) * Contrast + midpoint;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Lerp_float2(float2 A, float2 B, float2 T, out float2 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_029e8e8198564838b9389b902a09fb22_Out_0 = IN.uv0;
        float4 _UV_7a6209af1506424fb75c81e87e42035a_Out_0 = IN.uv2;
        float4 _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3;
        Unity_Branch_float4(_Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0, _UV_029e8e8198564838b9389b902a09fb22_Out_0, _UV_7a6209af1506424fb75c81e87e42035a_Out_0, _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float((_Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3.xy), _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3) );
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        struct Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float IN, out float4 XZ_2)
        {
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        XZ_2 = (float4(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3, 0.0, 1.0));
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Blend_Lighten_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            Out = max(Blend, Base);
            Out = lerp(Base, Out, Opacity);
        }
        
        float3 Unity_HDRP_SampleSceneColor_float(float2 uv, float lod, float exposureMultiplier)
        {
            exposureMultiplier = 1.0;
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(_SURFACE_TYPE_TRANSPARENT) && defined(SHADERPASS) && (SHADERPASS != SHADERPASS_LIGHT_TRANSPORT) && (SHADERPASS != SHADERPASS_PATH_TRACING) && (SHADERPASS != SHADERPASS_RAYTRACING_VISIBILITY) && (SHADERPASS != SHADERPASS_RAYTRACING_FORWARD)
            return SampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(CUSTOM_PASS_SAMPLING_HLSL) && defined(SHADERPASS) && (SHADERPASS == SHADERPASS_DRAWPROCEDURAL || SHADERPASS == SHADERPASS_BLIT)
            return CustomPassSampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            return float3(0.0, 0.0, 0.0);
        }
        
        void Unity_Comparison_Greater_float(float A, float B, out float Out)
        {
            Out = A > B ? 1 : 0;
        }
        
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float
        {
        float4 ScreenPosition;
        };
        
        void SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float IN, out float2 OutVector2_1)
        {
        float4 _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0 = IN.ScreenPosition;
        float _Split_b183780fdd2343708af64846c96ee2a7_R_1 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[0];
        float _Split_b183780fdd2343708af64846c96ee2a7_G_2 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[1];
        float _Split_b183780fdd2343708af64846c96ee2a7_B_3 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[2];
        float _Split_b183780fdd2343708af64846c96ee2a7_A_4 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[3];
        float2 _Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0 = float2(_Split_b183780fdd2343708af64846c96ee2a7_R_1, _Split_b183780fdd2343708af64846c96ee2a7_G_2);
        float2 _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        Unity_Divide_float2(_Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0, (_Split_b183780fdd2343708af64846c96ee2a7_A_4.xx), _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2);
        OutVector2_1 = _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        }
        
        void Unity_SceneDepth_Raw_float(float4 UV, out float Out)
        {
            Out = SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void GetClipValues_float(out float2 Out){
        Out = float2(
        
        UNITY_NEAR_CLIP_VALUE,
        
        UNITY_RAW_FAR_CLIP_VALUE
        
        );
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
        {
            Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
        }
        
        struct Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float
        {
        float4 ScreenPosition;
        };
        
        void SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 _DistortionUV, Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float IN, out float Out_Depth_1, out float Out_DepthDistortion_2)
        {
        float _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2;
        Unity_Comparison_Greater_float(unity_OrthoParams.w, 0, _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2);
        float _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2;
        Unity_Comparison_Greater_float(_ProjectionParams.x, 0, _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2);
        Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff;
        _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff.ScreenPosition = IN.ScreenPosition;
        half2 _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1;
        SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff, _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1);
        float _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1;
        Unity_SceneDepth_Raw_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1);
        float _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1;
        Unity_OneMinus_float(_SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1);
        float _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3);
        float _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3, _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3);
        float4 _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0 = IN.ScreenPosition;
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float2 _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0;
        GetClipValues_float(_GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0);
        float _Remap_1907dbd4ae754843a5d74245135e2923_Out_3;
        Unity_Remap_float(_Split_62277fd721f74a399bd1009f8b3cb8e3_B_3, _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0, float2 (0, 1), _Remap_1907dbd4ae754843a5d74245135e2923_Out_3);
        float _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Remap_1907dbd4ae754843a5d74245135e2923_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3);
        float _Subtract_b98f5f0e27014160829b37533239eca2_Out_2;
        Unity_Subtract_float(_Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_b98f5f0e27014160829b37533239eca2_Out_2);
        float _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1;
        Unity_Saturate_float(_Subtract_b98f5f0e27014160829b37533239eca2_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1);
        float _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1);
        float _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2;
        Unity_Multiply_float_float(_SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1, _ProjectionParams.z, _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2);
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2;
        Unity_Subtract_float(_Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2);
        float _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2, _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3);
        float2 _Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0 = _DistortionUV;
        float _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1;
        Unity_SceneDepth_Raw_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1);
        float _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1;
        Unity_OneMinus_float(_SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1);
        float _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3);
        float _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3, _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3);
        float _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2;
        Unity_Subtract_float(_Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2);
        float _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1;
        Unity_Saturate_float(_Subtract_4531c88bf2b147d7a2998422330b141f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1);
        float _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1);
        float _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2;
        Unity_Multiply_float_float(_SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1, _ProjectionParams.z, _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2);
        float _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2;
        Unity_Subtract_float(_Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2);
        float _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2, _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3);
        Out_Depth_1 = _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Out_DepthDistortion_2 = _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82;
            float3 _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82, _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_b8c2309b5fa6c684bd0a6439461b5c82_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float2 Distortion;
            float DistortionBlur;
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            float _Property_e5176656505ae98292b155cb230ab233_Out_0 = _IceDistortion;
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_11506852e45cbb8f9732aebed8bbb210;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv0 = IN.uv0;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv2 = IN.uv2;
            float4 _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2);
            float _Split_f392619d76305f8e9a715324614291f5_R_1 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[0];
            float _Split_f392619d76305f8e9a715324614291f5_G_2 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[1];
            float _Split_f392619d76305f8e9a715324614291f5_B_3 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[2];
            float _Split_f392619d76305f8e9a715324614291f5_A_4 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[3];
            float4 _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4;
            float3 _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5;
            float2 _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6;
            Unity_Combine_float(_Split_f392619d76305f8e9a715324614291f5_R_1, _Split_f392619d76305f8e9a715324614291f5_G_2, 0, 0, _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4, _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5, _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6);
            float2 _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2;
            Unity_Multiply_float2_float2((_Property_e5176656505ae98292b155cb230ab233_Out_0.xx), _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6, _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2);
            float _Property_f0b2859614d93f86b920c65decb52ecf_Out_0 = _Ice_Noise_Distortion;
            UnityTexture2D _Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0 = UnityBuildTexture2DStructNoScale(_IceNoiseNormal);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv0 = IN.uv0;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv2 = IN.uv2;
            float4 _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2);
            float _Split_1c2740a46a2f0281ab926911287ce711_R_1 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[0];
            float _Split_1c2740a46a2f0281ab926911287ce711_G_2 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[1];
            float _Split_1c2740a46a2f0281ab926911287ce711_B_3 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[2];
            float _Split_1c2740a46a2f0281ab926911287ce711_A_4 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[3];
            float4 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4;
            float3 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5;
            float2 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6;
            Unity_Combine_float(_Split_1c2740a46a2f0281ab926911287ce711_R_1, _Split_1c2740a46a2f0281ab926911287ce711_G_2, 0, 0, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6);
            float2 _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2;
            Unity_Multiply_float2_float2((_Property_f0b2859614d93f86b920c65decb52ecf_Out_0.xx), _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2);
            float _Property_852d221028b884858f029fedb8de47d1_Out_0 = _IceNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_852d221028b884858f029fedb8de47d1_Out_0, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1);
            float _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1;
            Unity_Absolute_float(_TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1, _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1);
            float _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0 = _IceNoisePower;
            float _Power_1497f6299359e780a9aa8dde441d98cf_Out_2;
            Unity_Power_float(_Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1, _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0, _Power_1497f6299359e780a9aa8dde441d98cf_Out_2);
            float _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0 = _IceNoiseContrast;
            float3 _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2;
            Unity_Contrast_float((_Power_1497f6299359e780a9aa8dde441d98cf_Out_2.xxx), _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0, _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2);
            float _Split_f399eb1f3ad77580a75b6122d38451b5_R_1 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[0];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_G_2 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[1];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_B_3 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[2];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_A_4 = 0;
            float _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3;
            Unity_Clamp_float(_Split_f399eb1f3ad77580a75b6122d38451b5_R_1, 0, 1, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3);
            float2 _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            Unity_Lerp_float2(_Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xx), _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3);
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_893a7c3932a452849a5239a91f337a35;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv0 = IN.uv0;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv2 = IN.uv2;
            float4 _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_893a7c3932a452849a5239a91f337a35, _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2);
            float _Property_771911a99405a780908dd542012af7b8_Out_0 = _IceParallaxSteps;
            Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float _PlanarNMparallax_e8f8353657858a87933a47a40c74654d;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.uv0 = IN.uv0;
            float4 _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2;
            SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(_Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2);
            float _Property_efee416de222038a93fa523171fb9f0d_Out_0 = _ParalaxOffset;
            float _Property_720bc7e00a412889a10ca999204543f8_Out_0 = _IceParallaxNoiseMin;
            float _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0 = _IceParallaxNoiseMax;
            float _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0 = _IceParallaxNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1);
            float _Lerp_87de925175c62a8986309dc80655ce2f_Out_3;
            Unity_Lerp_float(_Property_720bc7e00a412889a10ca999204543f8_Out_0, _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3);
            float _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3;
            Unity_Lerp_float(_Property_efee416de222038a93fa523171fb9f0d_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3);
            float _Property_acfd17e181f6108ba7921d3e04df886d_Out_0 = _IceDepth;
            float _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0 = _ParallaxFalloff;
            float _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3;
            Unity_Lerp_float(_Property_eede9dad69eea580b2a3fdc05280f02f_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3);
            UnityTexture2D _Property_7c5c99f2c1b340ec980675a076619f86_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            float4 _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2;
            ParallaxLayers_float(_Property_771911a99405a780908dd542012af7b8_Out_0, (_PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2.xy), _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3, _Property_acfd17e181f6108ba7921d3e04df886d_Out_0, IN.TangentSpaceViewDirection, IN.WorldSpaceViewDirection, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _Property_7c5c99f2c1b340ec980675a076619f86_Out_0, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2);
            float4 _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2;
            Unity_Blend_Lighten_float4(_PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2, _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            float3 _HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2 = Unity_HDRP_SampleSceneColor_float(float4(IN.NDCPosition.xy, 0, 0).xy, 0, 1.0);
            float _Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0 = _CleanColorPower;
            float3 _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2;
            Unity_Multiply_float3_float3(_HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2, (_Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0.xxx), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2);
            float4 _Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0 = _DeepColor;
            float4 _Property_7094041d89afbd878cb83460f4ab68b8_Out_0 = _ShalowColor;
            Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c;
            _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c.ScreenPosition = IN.ScreenPosition;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2;
            SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 (0, 0), _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2);
            float _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0 = _ShalowFalloffMultiply;
            float _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0, _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2);
            float _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1;
            Unity_Absolute_float(_Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2, _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1);
            float _Property_e6dd087698d3e984bd5eb642347af797_Out_0 = _ShalowFalloffPower;
            float _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2;
            Unity_Multiply_float_float(_Property_e6dd087698d3e984bd5eb642347af797_Out_0, -1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2);
            float _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2;
            Unity_Power_float(_Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2, _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2);
            float _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1;
            Unity_Saturate_float(_Power_aaf82c5db3291a8bb2095cce38670a92_Out_2, _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1);
            float _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3;
            Unity_Clamp_float(_Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1, 0, 1, _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3);
            float4 _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3;
            Unity_Lerp_float4(_Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0, _Property_7094041d89afbd878cb83460f4ab68b8_Out_0, (_Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3.xxxx), _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3);
            float3 _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2;
            Unity_Multiply_float3_float3((_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2);
            float _Property_22da60d6cbff958696ddee1c161db229_Out_0 = _WaterAlphaMultiply;
            float _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_22da60d6cbff958696ddee1c161db229_Out_0, _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2);
            float _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3;
            Unity_Clamp_float(_Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2, 0, 1, _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3);
            float _Absolute_c4059e430bb17486afd523c0f333e478_Out_1;
            Unity_Absolute_float(_Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3, _Absolute_c4059e430bb17486afd523c0f333e478_Out_1);
            float _Property_cd34ee7769676e85b3e223f0e908967c_Out_0 = _WaterAlphaPower;
            float _Power_2c1f1e86c544138396974457f6515752_Out_2;
            Unity_Power_float(_Absolute_c4059e430bb17486afd523c0f333e478_Out_1, _Property_cd34ee7769676e85b3e223f0e908967c_Out_0, _Power_2c1f1e86c544138396974457f6515752_Out_2);
            float _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3;
            Unity_Clamp_float(_Power_2c1f1e86c544138396974457f6515752_Out_2, 0, 1, _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3);
            float3 _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3;
            Unity_Lerp_float3(_Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2, (_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), (_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3.xxx), _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3);
            float _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0 = _CleanFalloffMultiply;
            float _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0, _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2);
            float _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3;
            Unity_Clamp_float(_Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2, 0, 1, _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3);
            float _Absolute_2efac825a986e28190f26200795ca9ec_Out_1;
            Unity_Absolute_float(_Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3, _Absolute_2efac825a986e28190f26200795ca9ec_Out_1);
            float _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0 = _CleanFalloffPower;
            float _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2;
            Unity_Power_float(_Absolute_2efac825a986e28190f26200795ca9ec_Out_1, _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0, _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2);
            float _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3;
            Unity_Clamp_float(_Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2, 0, 1, _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3);
            float3 _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3;
            Unity_Lerp_float3(_Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3, (_Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3.xxx), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3);
            float3 _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3;
            Unity_Lerp_float3((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3);
            UnityTexture2D _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_256e5676e1089881ae3214634430b140_Out_0 = _DetailTilingOffset;
            float _Split_257d0b6ea953418d97fd7daa8128bf35_R_1 = _Property_256e5676e1089881ae3214634430b140_Out_0[0];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_G_2 = _Property_256e5676e1089881ae3214634430b140_Out_0[1];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_B_3 = _Property_256e5676e1089881ae3214634430b140_Out_0[2];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_A_4 = _Property_256e5676e1089881ae3214634430b140_Out_0[3];
            float2 _Vector2_98295494172421878c7a16cb2baddf9a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_R_1, _Split_257d0b6ea953418d97fd7daa8128bf35_G_2);
            float2 _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_B_3, _Split_257d0b6ea953418d97fd7daa8128bf35_A_4);
            float2 _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_98295494172421878c7a16cb2baddf9a_Out_0, _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0, _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3);
            float4 _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0 = SAMPLE_TEXTURE2D(_Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.tex, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.samplerstate, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.GetTransformedUV(_TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3) );
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.r;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.g;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.b;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.a;
            float _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4, 2, _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2);
            float _Add_fd3efcae64779e848ef39919335cd44d_Out_2;
            Unity_Add_float(_Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2, -1, _Add_fd3efcae64779e848ef39919335cd44d_Out_2);
            float _Property_605f29777330a58ba88ac032e905433b_Out_0 = _DetailAlbedoScale;
            float _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2;
            Unity_Multiply_float_float(_Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Property_605f29777330a58ba88ac032e905433b_Out_0, _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2);
            float _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1;
            Unity_Saturate_float(_Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2, _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1);
            float _Absolute_8acef423205118879e75274a48969d34_Out_1;
            Unity_Absolute_float(_Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1, _Absolute_8acef423205118879e75274a48969d34_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185;
            float3 _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float((float4(_Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3, 1.0)), _Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Absolute_8acef423205118879e75274a48969d34_Out_1, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1);
            float4 _Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0 = _WetColor;
            float3 _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2;
            Unity_Multiply_float3_float3((_Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0.xyz), _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2);
            float _Split_5b2299b48b10138ea40c141b79bfe90e_R_1 = IN.VertexColor[0];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_G_2 = IN.VertexColor[1];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_B_3 = IN.VertexColor[2];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_A_4 = IN.VertexColor[3];
            float _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3;
            Unity_Clamp_float(_Split_5b2299b48b10138ea40c141b79bfe90e_R_1, 0, 1, _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3);
            float _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1;
            Unity_OneMinus_float(_Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1);
            float3 _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            Unity_Lerp_float3(_BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2, (_OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1.xxx), _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3);
            float _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            Unity_Multiply_float_float(_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3, _Split_5b2299b48b10138ea40c141b79bfe90e_A_4, _Multiply_ffa35df91e1277898c1160f454087deb_Out_2);
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAO;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _IceSmoothness;
            float _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0 = _IceCrackSmoothness;
            UnityTexture2D _Property_be61fb085f680285bb171ac957c1d150_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv0 = IN.uv0;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv2 = IN.uv2;
            float4 _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_be61fb085f680285bb171ac957c1d150_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2);
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[0];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_G_2 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[1];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_B_3 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[2];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_A_4 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[3];
            float _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3;
            Unity_Lerp_float(_Property_0edea7916ed7a189a62b0faf2c274601_Out_0, _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0, _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3);
            float _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0 = _IceNoiseSmoothness;
            float _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3;
            Unity_Lerp_float(_Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3, _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3, _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3);
            float _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6, 2, _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2);
            float _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2;
            Unity_Add_float(_Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2, -1, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2);
            float _Property_cea4e47b293a988a83643b43f76c92ba_Out_0 = _DetailSmoothnessScale;
            float _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2;
            Unity_Multiply_float_float(_Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Property_cea4e47b293a988a83643b43f76c92ba_Out_0, _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2);
            float _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1;
            Unity_Saturate_float(_Multiply_2008466558f0e4819e60b3c41d94487c_Out_2, _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1);
            float _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1;
            Unity_Absolute_float(_Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43;
            float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1);
            float _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0 = _WetSmoothness;
            float _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1, _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3);
            float2 _Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0 = float2(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7, _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5);
            float2 _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2;
            Unity_Multiply_float2_float2(_Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0, float2(2, 2), _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2);
            float2 _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2;
            Unity_Add_float2(_Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2, float2(-1, -1), _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2);
            float _Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0 = _DetailNormalScale;
            float2 _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2;
            Unity_Multiply_float2_float2(_Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2, (_Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0.xx), _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2);
            float _Split_c4822b8eaff9b185be7c059792345712_R_1 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[0];
            float _Split_c4822b8eaff9b185be7c059792345712_G_2 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[1];
            float _Split_c4822b8eaff9b185be7c059792345712_B_3 = 0;
            float _Split_c4822b8eaff9b185be7c059792345712_A_4 = 0;
            float _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2;
            Unity_DotProduct_float2(_Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2);
            float _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1;
            Unity_Saturate_float(_DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2, _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1);
            float _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1;
            Unity_OneMinus_float(_Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1, _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1);
            float _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1;
            Unity_SquareRoot_float(_OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float3 _Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0 = float3(_Split_c4822b8eaff9b185be7c059792345712_R_1, _Split_c4822b8eaff9b185be7c059792345712_G_2, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            float _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0 = _NoiseNormalScale;
            float3 _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2.xyz), _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2);
            float3 _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3;
            Unity_Lerp_float3(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3);
            float3 _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            Unity_NormalBlend_float(_Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0, _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3, _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2);
            float _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1;
            Unity_OneMinus_float(_Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1);
            float _Property_42e21c36617ec48ba2d35424c394cb28_Out_0 = _Ice_Thickness;
            float _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2;
            Unity_Multiply_float_float(_OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1, _Property_42e21c36617ec48ba2d35424c394cb28_Out_0, _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2);
            float _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            Unity_Clamp_float(_Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2, 0, 1, _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3);
            surface.Distortion = _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            surface.DistortionBlur = 0;
            surface.BaseColor = _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            surface.TransmissionMask = 1;
            surface.Thickness = _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            surface.DiffusionProfileHash = _DiffusionProfileHash;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.WorldSpacePosition =                         input.positionRWS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.ScreenPosition = ComputeScreenPos(TransformWorldToHClip(input.positionRWS), _ProjectionParams.x);
        
        #if UNITY_UV_STARTS_AT_TOP
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #else
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
            output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
            output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        
            output.uv0 =                                        input.texCoord0;
            output.uv2 =                                        input.texCoord2;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
            surfaceData.thickness =                 surfaceDescription.Thickness;
            surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassConstant.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="HDRenderPipeline"
            "RenderType"="HDLitShader"
            "Queue"="Transparent+0"
            "ShaderGraphShader"="true"
            "ShaderGraphTargetId"="HDLitSubTarget"
        }
        Pass
        {
            Name "IndirectDXR"
            Tags
            {
                "LightMode" = "IndirectDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma multi_compile _ MULTI_BOUNCE_INDIRECT
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD1
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_INDIRECT
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define HAS_LIGHTLOOP 1
        #define REQUIRE_DEPTH_TEXTURE
        #define REQUIRE_OPAQUE_TEXTURE
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float _WaterAlphaMultiply;
        float _WaterAlphaPower;
        float _CleanFalloffMultiply;
        float _CleanFalloffPower;
        float _ShalowFalloffMultiply;
        float _ShalowFalloffPower;
        float _CleanColorPower;
        float4 _ShalowColor;
        float4 _DeepColor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float _IceNoiseScale;
        float _IceNoiseContrast;
        float _IceNoisePower;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _IceNoiseNormal_TexelSize;
        float _NoiseNormalScale;
        float _BaseAO;
        float _IceSmoothness;
        float _IceCrackSmoothness;
        float _IceNoiseSmoothness;
        float4 _ParalaxMap_TexelSize;
        float _ParalaxOffset;
        float _IceParallaxSteps;
        float _IceDepth;
        float _ParallaxFalloff;
        float _IceParallaxNoiseScale;
        float _IceParallaxNoiseMin;
        float _IceParallaxNoiseMax;
        float _Ice_Thickness;
        float _IceDistortion;
        float _Ice_Noise_Distortion;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_IceNoiseNormal);
        SAMPLER(sampler_IceNoiseNormal);
        TEXTURE2D(_ParalaxMap);
        SAMPLER(sampler_ParalaxMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Hashes.hlsl"
        #include "./NMParallaxLayers.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 WorldSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 ScreenPosition;
             float2 NDCPosition;
             float2 PixelPosition;
             float4 uv0;
             float4 uv2;
             float4 VertexColor;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Branch_float4(float Predicate, float4 True, float4 False, out float4 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_058f4fba88c3437288219f1929444bf2_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_43d85b3291324c848dfbeec6adac2a71_Out_0 = IN.uv0;
        float4 _UV_36881dcaab9040168fc5215dcd00f352_Out_0 = IN.uv2;
        float4 _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3;
        Unity_Branch_float4(_Property_058f4fba88c3437288219f1929444bf2_Out_0, _UV_43d85b3291324c848dfbeec6adac2a71_Out_0, _UV_36881dcaab9040168fc5215dcd00f352_Out_0, _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float((_Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3.xy), _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3) );
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1;
        {
        float3x3 tangentTransform = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, tangentTransform, true);
        }
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        float Unity_SimpleNoise_ValueNoise_LegacySine_float (float2 uv)
        {
        float2 i = floor(uv);
        float2 f = frac(uv);
        f = f * f * (3.0 - 2.0 * f);
        uv = abs(frac(uv) - 0.5);
        float2 c0 = i + float2(0.0, 0.0);
        float2 c1 = i + float2(1.0, 0.0);
        float2 c2 = i + float2(0.0, 1.0);
        float2 c3 = i + float2(1.0, 1.0);
        float r0; Hash_LegacySine_2_1_float(c0, r0);
        float r1; Hash_LegacySine_2_1_float(c1, r1);
        float r2; Hash_LegacySine_2_1_float(c2, r2);
        float r3; Hash_LegacySine_2_1_float(c3, r3);
        float bottomOfGrid = lerp(r0, r1, f.x);
        float topOfGrid = lerp(r2, r3, f.x);
        float t = lerp(bottomOfGrid, topOfGrid, f.y);
        return t;
        }
        
        void Unity_SimpleNoise_LegacySine_float(float2 UV, float Scale, out float Out)
        {
        float freq, amp;
        Out = 0.0f;
        freq = pow(2.0, float(0));
        amp = pow(0.5, float(3-0));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(1));
        amp = pow(0.5, float(3-1));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(2));
        amp = pow(0.5, float(3-2));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(float Vector1_E4D1C13A, float Vector1_CBF4C304, Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float IN, out float XYZ_1)
        {
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0 = Vector1_CBF4C304;
        float _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2);
        float _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2);
        float _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, _Add_e855069f047fae8ea9027d56acb61e56_Out_2, _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Contrast_float(float3 In, float Contrast, out float3 Out)
        {
            float midpoint = pow(0.5, 2.2);
            Out =  (In - midpoint) * Contrast + midpoint;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Lerp_float2(float2 A, float2 B, float2 T, out float2 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_029e8e8198564838b9389b902a09fb22_Out_0 = IN.uv0;
        float4 _UV_7a6209af1506424fb75c81e87e42035a_Out_0 = IN.uv2;
        float4 _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3;
        Unity_Branch_float4(_Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0, _UV_029e8e8198564838b9389b902a09fb22_Out_0, _UV_7a6209af1506424fb75c81e87e42035a_Out_0, _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float((_Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3.xy), _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3) );
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        struct Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float IN, out float4 XZ_2)
        {
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        XZ_2 = (float4(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3, 0.0, 1.0));
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Blend_Lighten_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            Out = max(Blend, Base);
            Out = lerp(Base, Out, Opacity);
        }
        
        float3 Unity_HDRP_SampleSceneColor_float(float2 uv, float lod, float exposureMultiplier)
        {
            exposureMultiplier = 1.0;
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(_SURFACE_TYPE_TRANSPARENT) && defined(SHADERPASS) && (SHADERPASS != SHADERPASS_LIGHT_TRANSPORT) && (SHADERPASS != SHADERPASS_PATH_TRACING) && (SHADERPASS != SHADERPASS_RAYTRACING_VISIBILITY) && (SHADERPASS != SHADERPASS_RAYTRACING_FORWARD)
            return SampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(CUSTOM_PASS_SAMPLING_HLSL) && defined(SHADERPASS) && (SHADERPASS == SHADERPASS_DRAWPROCEDURAL || SHADERPASS == SHADERPASS_BLIT)
            return CustomPassSampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            return float3(0.0, 0.0, 0.0);
        }
        
        void Unity_Comparison_Greater_float(float A, float B, out float Out)
        {
            Out = A > B ? 1 : 0;
        }
        
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float
        {
        float4 ScreenPosition;
        };
        
        void SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float IN, out float2 OutVector2_1)
        {
        float4 _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0 = IN.ScreenPosition;
        float _Split_b183780fdd2343708af64846c96ee2a7_R_1 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[0];
        float _Split_b183780fdd2343708af64846c96ee2a7_G_2 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[1];
        float _Split_b183780fdd2343708af64846c96ee2a7_B_3 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[2];
        float _Split_b183780fdd2343708af64846c96ee2a7_A_4 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[3];
        float2 _Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0 = float2(_Split_b183780fdd2343708af64846c96ee2a7_R_1, _Split_b183780fdd2343708af64846c96ee2a7_G_2);
        float2 _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        Unity_Divide_float2(_Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0, (_Split_b183780fdd2343708af64846c96ee2a7_A_4.xx), _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2);
        OutVector2_1 = _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        }
        
        void Unity_SceneDepth_Raw_float(float4 UV, out float Out)
        {
            Out = SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void GetClipValues_float(out float2 Out){
        Out = float2(
        
        UNITY_NEAR_CLIP_VALUE,
        
        UNITY_RAW_FAR_CLIP_VALUE
        
        );
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
        {
            Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
        }
        
        struct Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float
        {
        float4 ScreenPosition;
        };
        
        void SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 _DistortionUV, Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float IN, out float Out_Depth_1, out float Out_DepthDistortion_2)
        {
        float _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2;
        Unity_Comparison_Greater_float(unity_OrthoParams.w, 0, _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2);
        float _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2;
        Unity_Comparison_Greater_float(_ProjectionParams.x, 0, _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2);
        Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff;
        _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff.ScreenPosition = IN.ScreenPosition;
        half2 _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1;
        SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff, _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1);
        float _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1;
        Unity_SceneDepth_Raw_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1);
        float _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1;
        Unity_OneMinus_float(_SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1);
        float _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3);
        float _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3, _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3);
        float4 _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0 = IN.ScreenPosition;
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float2 _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0;
        GetClipValues_float(_GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0);
        float _Remap_1907dbd4ae754843a5d74245135e2923_Out_3;
        Unity_Remap_float(_Split_62277fd721f74a399bd1009f8b3cb8e3_B_3, _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0, float2 (0, 1), _Remap_1907dbd4ae754843a5d74245135e2923_Out_3);
        float _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Remap_1907dbd4ae754843a5d74245135e2923_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3);
        float _Subtract_b98f5f0e27014160829b37533239eca2_Out_2;
        Unity_Subtract_float(_Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_b98f5f0e27014160829b37533239eca2_Out_2);
        float _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1;
        Unity_Saturate_float(_Subtract_b98f5f0e27014160829b37533239eca2_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1);
        float _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1);
        float _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2;
        Unity_Multiply_float_float(_SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1, _ProjectionParams.z, _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2);
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2;
        Unity_Subtract_float(_Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2);
        float _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2, _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3);
        float2 _Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0 = _DistortionUV;
        float _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1;
        Unity_SceneDepth_Raw_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1);
        float _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1;
        Unity_OneMinus_float(_SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1);
        float _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3);
        float _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3, _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3);
        float _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2;
        Unity_Subtract_float(_Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2);
        float _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1;
        Unity_Saturate_float(_Subtract_4531c88bf2b147d7a2998422330b141f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1);
        float _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1);
        float _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2;
        Unity_Multiply_float_float(_SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1, _ProjectionParams.z, _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2);
        float _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2;
        Unity_Subtract_float(_Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2);
        float _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2, _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3);
        Out_Depth_1 = _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Out_DepthDistortion_2 = _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float2 Distortion;
            float DistortionBlur;
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            float _Property_e5176656505ae98292b155cb230ab233_Out_0 = _IceDistortion;
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_11506852e45cbb8f9732aebed8bbb210;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv0 = IN.uv0;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv2 = IN.uv2;
            float4 _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2);
            float _Split_f392619d76305f8e9a715324614291f5_R_1 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[0];
            float _Split_f392619d76305f8e9a715324614291f5_G_2 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[1];
            float _Split_f392619d76305f8e9a715324614291f5_B_3 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[2];
            float _Split_f392619d76305f8e9a715324614291f5_A_4 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[3];
            float4 _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4;
            float3 _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5;
            float2 _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6;
            Unity_Combine_float(_Split_f392619d76305f8e9a715324614291f5_R_1, _Split_f392619d76305f8e9a715324614291f5_G_2, 0, 0, _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4, _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5, _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6);
            float2 _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2;
            Unity_Multiply_float2_float2((_Property_e5176656505ae98292b155cb230ab233_Out_0.xx), _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6, _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2);
            float _Property_f0b2859614d93f86b920c65decb52ecf_Out_0 = _Ice_Noise_Distortion;
            UnityTexture2D _Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0 = UnityBuildTexture2DStructNoScale(_IceNoiseNormal);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv0 = IN.uv0;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv2 = IN.uv2;
            float4 _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2);
            float _Split_1c2740a46a2f0281ab926911287ce711_R_1 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[0];
            float _Split_1c2740a46a2f0281ab926911287ce711_G_2 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[1];
            float _Split_1c2740a46a2f0281ab926911287ce711_B_3 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[2];
            float _Split_1c2740a46a2f0281ab926911287ce711_A_4 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[3];
            float4 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4;
            float3 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5;
            float2 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6;
            Unity_Combine_float(_Split_1c2740a46a2f0281ab926911287ce711_R_1, _Split_1c2740a46a2f0281ab926911287ce711_G_2, 0, 0, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6);
            float2 _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2;
            Unity_Multiply_float2_float2((_Property_f0b2859614d93f86b920c65decb52ecf_Out_0.xx), _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2);
            float _Property_852d221028b884858f029fedb8de47d1_Out_0 = _IceNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_852d221028b884858f029fedb8de47d1_Out_0, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1);
            float _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1;
            Unity_Absolute_float(_TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1, _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1);
            float _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0 = _IceNoisePower;
            float _Power_1497f6299359e780a9aa8dde441d98cf_Out_2;
            Unity_Power_float(_Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1, _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0, _Power_1497f6299359e780a9aa8dde441d98cf_Out_2);
            float _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0 = _IceNoiseContrast;
            float3 _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2;
            Unity_Contrast_float((_Power_1497f6299359e780a9aa8dde441d98cf_Out_2.xxx), _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0, _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2);
            float _Split_f399eb1f3ad77580a75b6122d38451b5_R_1 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[0];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_G_2 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[1];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_B_3 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[2];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_A_4 = 0;
            float _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3;
            Unity_Clamp_float(_Split_f399eb1f3ad77580a75b6122d38451b5_R_1, 0, 1, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3);
            float2 _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            Unity_Lerp_float2(_Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xx), _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3);
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_893a7c3932a452849a5239a91f337a35;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv0 = IN.uv0;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv2 = IN.uv2;
            float4 _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_893a7c3932a452849a5239a91f337a35, _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2);
            float _Property_771911a99405a780908dd542012af7b8_Out_0 = _IceParallaxSteps;
            Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float _PlanarNMparallax_e8f8353657858a87933a47a40c74654d;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.uv0 = IN.uv0;
            float4 _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2;
            SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(_Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2);
            float _Property_efee416de222038a93fa523171fb9f0d_Out_0 = _ParalaxOffset;
            float _Property_720bc7e00a412889a10ca999204543f8_Out_0 = _IceParallaxNoiseMin;
            float _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0 = _IceParallaxNoiseMax;
            float _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0 = _IceParallaxNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1);
            float _Lerp_87de925175c62a8986309dc80655ce2f_Out_3;
            Unity_Lerp_float(_Property_720bc7e00a412889a10ca999204543f8_Out_0, _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3);
            float _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3;
            Unity_Lerp_float(_Property_efee416de222038a93fa523171fb9f0d_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3);
            float _Property_acfd17e181f6108ba7921d3e04df886d_Out_0 = _IceDepth;
            float _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0 = _ParallaxFalloff;
            float _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3;
            Unity_Lerp_float(_Property_eede9dad69eea580b2a3fdc05280f02f_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3);
            UnityTexture2D _Property_7c5c99f2c1b340ec980675a076619f86_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            float4 _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2;
            ParallaxLayers_float(_Property_771911a99405a780908dd542012af7b8_Out_0, (_PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2.xy), _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3, _Property_acfd17e181f6108ba7921d3e04df886d_Out_0, IN.TangentSpaceViewDirection, IN.WorldSpaceViewDirection, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _Property_7c5c99f2c1b340ec980675a076619f86_Out_0, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2);
            float4 _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2;
            Unity_Blend_Lighten_float4(_PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2, _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            float3 _HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2 = Unity_HDRP_SampleSceneColor_float(float4(IN.NDCPosition.xy, 0, 0).xy, 0, 1.0);
            float _Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0 = _CleanColorPower;
            float3 _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2;
            Unity_Multiply_float3_float3(_HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2, (_Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0.xxx), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2);
            float4 _Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0 = _DeepColor;
            float4 _Property_7094041d89afbd878cb83460f4ab68b8_Out_0 = _ShalowColor;
            Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c;
            _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c.ScreenPosition = IN.ScreenPosition;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2;
            SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 (0, 0), _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2);
            float _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0 = _ShalowFalloffMultiply;
            float _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0, _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2);
            float _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1;
            Unity_Absolute_float(_Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2, _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1);
            float _Property_e6dd087698d3e984bd5eb642347af797_Out_0 = _ShalowFalloffPower;
            float _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2;
            Unity_Multiply_float_float(_Property_e6dd087698d3e984bd5eb642347af797_Out_0, -1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2);
            float _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2;
            Unity_Power_float(_Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2, _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2);
            float _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1;
            Unity_Saturate_float(_Power_aaf82c5db3291a8bb2095cce38670a92_Out_2, _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1);
            float _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3;
            Unity_Clamp_float(_Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1, 0, 1, _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3);
            float4 _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3;
            Unity_Lerp_float4(_Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0, _Property_7094041d89afbd878cb83460f4ab68b8_Out_0, (_Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3.xxxx), _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3);
            float3 _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2;
            Unity_Multiply_float3_float3((_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2);
            float _Property_22da60d6cbff958696ddee1c161db229_Out_0 = _WaterAlphaMultiply;
            float _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_22da60d6cbff958696ddee1c161db229_Out_0, _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2);
            float _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3;
            Unity_Clamp_float(_Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2, 0, 1, _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3);
            float _Absolute_c4059e430bb17486afd523c0f333e478_Out_1;
            Unity_Absolute_float(_Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3, _Absolute_c4059e430bb17486afd523c0f333e478_Out_1);
            float _Property_cd34ee7769676e85b3e223f0e908967c_Out_0 = _WaterAlphaPower;
            float _Power_2c1f1e86c544138396974457f6515752_Out_2;
            Unity_Power_float(_Absolute_c4059e430bb17486afd523c0f333e478_Out_1, _Property_cd34ee7769676e85b3e223f0e908967c_Out_0, _Power_2c1f1e86c544138396974457f6515752_Out_2);
            float _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3;
            Unity_Clamp_float(_Power_2c1f1e86c544138396974457f6515752_Out_2, 0, 1, _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3);
            float3 _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3;
            Unity_Lerp_float3(_Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2, (_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), (_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3.xxx), _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3);
            float _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0 = _CleanFalloffMultiply;
            float _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0, _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2);
            float _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3;
            Unity_Clamp_float(_Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2, 0, 1, _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3);
            float _Absolute_2efac825a986e28190f26200795ca9ec_Out_1;
            Unity_Absolute_float(_Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3, _Absolute_2efac825a986e28190f26200795ca9ec_Out_1);
            float _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0 = _CleanFalloffPower;
            float _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2;
            Unity_Power_float(_Absolute_2efac825a986e28190f26200795ca9ec_Out_1, _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0, _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2);
            float _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3;
            Unity_Clamp_float(_Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2, 0, 1, _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3);
            float3 _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3;
            Unity_Lerp_float3(_Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3, (_Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3.xxx), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3);
            float3 _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3;
            Unity_Lerp_float3((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3);
            UnityTexture2D _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_256e5676e1089881ae3214634430b140_Out_0 = _DetailTilingOffset;
            float _Split_257d0b6ea953418d97fd7daa8128bf35_R_1 = _Property_256e5676e1089881ae3214634430b140_Out_0[0];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_G_2 = _Property_256e5676e1089881ae3214634430b140_Out_0[1];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_B_3 = _Property_256e5676e1089881ae3214634430b140_Out_0[2];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_A_4 = _Property_256e5676e1089881ae3214634430b140_Out_0[3];
            float2 _Vector2_98295494172421878c7a16cb2baddf9a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_R_1, _Split_257d0b6ea953418d97fd7daa8128bf35_G_2);
            float2 _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_B_3, _Split_257d0b6ea953418d97fd7daa8128bf35_A_4);
            float2 _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_98295494172421878c7a16cb2baddf9a_Out_0, _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0, _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3);
            float4 _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0 = SAMPLE_TEXTURE2D(_Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.tex, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.samplerstate, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.GetTransformedUV(_TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3) );
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.r;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.g;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.b;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.a;
            float _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4, 2, _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2);
            float _Add_fd3efcae64779e848ef39919335cd44d_Out_2;
            Unity_Add_float(_Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2, -1, _Add_fd3efcae64779e848ef39919335cd44d_Out_2);
            float _Property_605f29777330a58ba88ac032e905433b_Out_0 = _DetailAlbedoScale;
            float _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2;
            Unity_Multiply_float_float(_Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Property_605f29777330a58ba88ac032e905433b_Out_0, _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2);
            float _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1;
            Unity_Saturate_float(_Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2, _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1);
            float _Absolute_8acef423205118879e75274a48969d34_Out_1;
            Unity_Absolute_float(_Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1, _Absolute_8acef423205118879e75274a48969d34_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185;
            float3 _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float((float4(_Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3, 1.0)), _Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Absolute_8acef423205118879e75274a48969d34_Out_1, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1);
            float4 _Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0 = _WetColor;
            float3 _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2;
            Unity_Multiply_float3_float3((_Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0.xyz), _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2);
            float _Split_5b2299b48b10138ea40c141b79bfe90e_R_1 = IN.VertexColor[0];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_G_2 = IN.VertexColor[1];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_B_3 = IN.VertexColor[2];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_A_4 = IN.VertexColor[3];
            float _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3;
            Unity_Clamp_float(_Split_5b2299b48b10138ea40c141b79bfe90e_R_1, 0, 1, _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3);
            float _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1;
            Unity_OneMinus_float(_Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1);
            float3 _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            Unity_Lerp_float3(_BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2, (_OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1.xxx), _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3);
            float _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            Unity_Multiply_float_float(_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3, _Split_5b2299b48b10138ea40c141b79bfe90e_A_4, _Multiply_ffa35df91e1277898c1160f454087deb_Out_2);
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAO;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _IceSmoothness;
            float _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0 = _IceCrackSmoothness;
            UnityTexture2D _Property_be61fb085f680285bb171ac957c1d150_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv0 = IN.uv0;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv2 = IN.uv2;
            float4 _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_be61fb085f680285bb171ac957c1d150_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2);
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[0];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_G_2 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[1];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_B_3 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[2];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_A_4 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[3];
            float _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3;
            Unity_Lerp_float(_Property_0edea7916ed7a189a62b0faf2c274601_Out_0, _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0, _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3);
            float _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0 = _IceNoiseSmoothness;
            float _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3;
            Unity_Lerp_float(_Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3, _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3, _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3);
            float _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6, 2, _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2);
            float _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2;
            Unity_Add_float(_Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2, -1, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2);
            float _Property_cea4e47b293a988a83643b43f76c92ba_Out_0 = _DetailSmoothnessScale;
            float _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2;
            Unity_Multiply_float_float(_Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Property_cea4e47b293a988a83643b43f76c92ba_Out_0, _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2);
            float _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1;
            Unity_Saturate_float(_Multiply_2008466558f0e4819e60b3c41d94487c_Out_2, _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1);
            float _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1;
            Unity_Absolute_float(_Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43;
            float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1);
            float _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0 = _WetSmoothness;
            float _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1, _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3);
            float2 _Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0 = float2(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7, _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5);
            float2 _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2;
            Unity_Multiply_float2_float2(_Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0, float2(2, 2), _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2);
            float2 _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2;
            Unity_Add_float2(_Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2, float2(-1, -1), _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2);
            float _Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0 = _DetailNormalScale;
            float2 _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2;
            Unity_Multiply_float2_float2(_Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2, (_Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0.xx), _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2);
            float _Split_c4822b8eaff9b185be7c059792345712_R_1 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[0];
            float _Split_c4822b8eaff9b185be7c059792345712_G_2 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[1];
            float _Split_c4822b8eaff9b185be7c059792345712_B_3 = 0;
            float _Split_c4822b8eaff9b185be7c059792345712_A_4 = 0;
            float _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2;
            Unity_DotProduct_float2(_Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2);
            float _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1;
            Unity_Saturate_float(_DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2, _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1);
            float _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1;
            Unity_OneMinus_float(_Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1, _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1);
            float _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1;
            Unity_SquareRoot_float(_OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float3 _Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0 = float3(_Split_c4822b8eaff9b185be7c059792345712_R_1, _Split_c4822b8eaff9b185be7c059792345712_G_2, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            float _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0 = _NoiseNormalScale;
            float3 _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2.xyz), _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2);
            float3 _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3;
            Unity_Lerp_float3(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3);
            float3 _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            Unity_NormalBlend_float(_Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0, _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3, _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2);
            float _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1;
            Unity_OneMinus_float(_Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1);
            float _Property_42e21c36617ec48ba2d35424c394cb28_Out_0 = _Ice_Thickness;
            float _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2;
            Unity_Multiply_float_float(_OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1, _Property_42e21c36617ec48ba2d35424c394cb28_Out_0, _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2);
            float _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            Unity_Clamp_float(_Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2, 0, 1, _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3);
            surface.Distortion = _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            surface.DistortionBlur = 0;
            surface.BaseColor = _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            surface.TransmissionMask = 1;
            surface.Thickness = _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            surface.DiffusionProfileHash = _DiffusionProfileHash;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.WorldSpacePosition =                         input.positionRWS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.ScreenPosition = ComputeScreenPos(TransformWorldToHClip(input.positionRWS), _ProjectionParams.x);
        
        #if UNITY_UV_STARTS_AT_TOP
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #else
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
            output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
            output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        
            output.uv0 =                                        input.texCoord0;
            output.uv2 =                                        input.texCoord2;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
            surfaceData.thickness =                 surfaceDescription.Thickness;
            surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingIndirect.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "VisibilityDXR"
            Tags
            {
                "LightMode" = "VisibilityDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma multi_compile _ TRANSPARENT_COLOR_SHADOW
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_VISIBILITY
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define REQUIRE_DEPTH_TEXTURE
        #define REQUIRE_OPAQUE_TEXTURE
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float _WaterAlphaMultiply;
        float _WaterAlphaPower;
        float _CleanFalloffMultiply;
        float _CleanFalloffPower;
        float _ShalowFalloffMultiply;
        float _ShalowFalloffPower;
        float _CleanColorPower;
        float4 _ShalowColor;
        float4 _DeepColor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float _IceNoiseScale;
        float _IceNoiseContrast;
        float _IceNoisePower;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _IceNoiseNormal_TexelSize;
        float _NoiseNormalScale;
        float _BaseAO;
        float _IceSmoothness;
        float _IceCrackSmoothness;
        float _IceNoiseSmoothness;
        float4 _ParalaxMap_TexelSize;
        float _ParalaxOffset;
        float _IceParallaxSteps;
        float _IceDepth;
        float _ParallaxFalloff;
        float _IceParallaxNoiseScale;
        float _IceParallaxNoiseMin;
        float _IceParallaxNoiseMax;
        float _Ice_Thickness;
        float _IceDistortion;
        float _Ice_Noise_Distortion;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_IceNoiseNormal);
        SAMPLER(sampler_IceNoiseNormal);
        TEXTURE2D(_ParalaxMap);
        SAMPLER(sampler_ParalaxMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Hashes.hlsl"
        #include "./NMParallaxLayers.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 WorldSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 ScreenPosition;
             float2 NDCPosition;
             float2 PixelPosition;
             float4 uv0;
             float4 uv2;
             float4 VertexColor;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Branch_float4(float Predicate, float4 True, float4 False, out float4 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_058f4fba88c3437288219f1929444bf2_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_43d85b3291324c848dfbeec6adac2a71_Out_0 = IN.uv0;
        float4 _UV_36881dcaab9040168fc5215dcd00f352_Out_0 = IN.uv2;
        float4 _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3;
        Unity_Branch_float4(_Property_058f4fba88c3437288219f1929444bf2_Out_0, _UV_43d85b3291324c848dfbeec6adac2a71_Out_0, _UV_36881dcaab9040168fc5215dcd00f352_Out_0, _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float((_Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3.xy), _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3) );
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1;
        {
        float3x3 tangentTransform = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, tangentTransform, true);
        }
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        float Unity_SimpleNoise_ValueNoise_LegacySine_float (float2 uv)
        {
        float2 i = floor(uv);
        float2 f = frac(uv);
        f = f * f * (3.0 - 2.0 * f);
        uv = abs(frac(uv) - 0.5);
        float2 c0 = i + float2(0.0, 0.0);
        float2 c1 = i + float2(1.0, 0.0);
        float2 c2 = i + float2(0.0, 1.0);
        float2 c3 = i + float2(1.0, 1.0);
        float r0; Hash_LegacySine_2_1_float(c0, r0);
        float r1; Hash_LegacySine_2_1_float(c1, r1);
        float r2; Hash_LegacySine_2_1_float(c2, r2);
        float r3; Hash_LegacySine_2_1_float(c3, r3);
        float bottomOfGrid = lerp(r0, r1, f.x);
        float topOfGrid = lerp(r2, r3, f.x);
        float t = lerp(bottomOfGrid, topOfGrid, f.y);
        return t;
        }
        
        void Unity_SimpleNoise_LegacySine_float(float2 UV, float Scale, out float Out)
        {
        float freq, amp;
        Out = 0.0f;
        freq = pow(2.0, float(0));
        amp = pow(0.5, float(3-0));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(1));
        amp = pow(0.5, float(3-1));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(2));
        amp = pow(0.5, float(3-2));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(float Vector1_E4D1C13A, float Vector1_CBF4C304, Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float IN, out float XYZ_1)
        {
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0 = Vector1_CBF4C304;
        float _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2);
        float _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2);
        float _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, _Add_e855069f047fae8ea9027d56acb61e56_Out_2, _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Contrast_float(float3 In, float Contrast, out float3 Out)
        {
            float midpoint = pow(0.5, 2.2);
            Out =  (In - midpoint) * Contrast + midpoint;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Lerp_float2(float2 A, float2 B, float2 T, out float2 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_029e8e8198564838b9389b902a09fb22_Out_0 = IN.uv0;
        float4 _UV_7a6209af1506424fb75c81e87e42035a_Out_0 = IN.uv2;
        float4 _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3;
        Unity_Branch_float4(_Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0, _UV_029e8e8198564838b9389b902a09fb22_Out_0, _UV_7a6209af1506424fb75c81e87e42035a_Out_0, _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float((_Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3.xy), _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3) );
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        struct Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float IN, out float4 XZ_2)
        {
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        XZ_2 = (float4(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3, 0.0, 1.0));
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Blend_Lighten_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            Out = max(Blend, Base);
            Out = lerp(Base, Out, Opacity);
        }
        
        float3 Unity_HDRP_SampleSceneColor_float(float2 uv, float lod, float exposureMultiplier)
        {
            exposureMultiplier = 1.0;
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(_SURFACE_TYPE_TRANSPARENT) && defined(SHADERPASS) && (SHADERPASS != SHADERPASS_LIGHT_TRANSPORT) && (SHADERPASS != SHADERPASS_PATH_TRACING) && (SHADERPASS != SHADERPASS_RAYTRACING_VISIBILITY) && (SHADERPASS != SHADERPASS_RAYTRACING_FORWARD)
            return SampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(CUSTOM_PASS_SAMPLING_HLSL) && defined(SHADERPASS) && (SHADERPASS == SHADERPASS_DRAWPROCEDURAL || SHADERPASS == SHADERPASS_BLIT)
            return CustomPassSampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            return float3(0.0, 0.0, 0.0);
        }
        
        void Unity_Comparison_Greater_float(float A, float B, out float Out)
        {
            Out = A > B ? 1 : 0;
        }
        
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float
        {
        float4 ScreenPosition;
        };
        
        void SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float IN, out float2 OutVector2_1)
        {
        float4 _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0 = IN.ScreenPosition;
        float _Split_b183780fdd2343708af64846c96ee2a7_R_1 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[0];
        float _Split_b183780fdd2343708af64846c96ee2a7_G_2 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[1];
        float _Split_b183780fdd2343708af64846c96ee2a7_B_3 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[2];
        float _Split_b183780fdd2343708af64846c96ee2a7_A_4 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[3];
        float2 _Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0 = float2(_Split_b183780fdd2343708af64846c96ee2a7_R_1, _Split_b183780fdd2343708af64846c96ee2a7_G_2);
        float2 _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        Unity_Divide_float2(_Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0, (_Split_b183780fdd2343708af64846c96ee2a7_A_4.xx), _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2);
        OutVector2_1 = _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        }
        
        void Unity_SceneDepth_Raw_float(float4 UV, out float Out)
        {
            Out = SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void GetClipValues_float(out float2 Out){
        Out = float2(
        
        UNITY_NEAR_CLIP_VALUE,
        
        UNITY_RAW_FAR_CLIP_VALUE
        
        );
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
        {
            Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
        }
        
        struct Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float
        {
        float4 ScreenPosition;
        };
        
        void SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 _DistortionUV, Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float IN, out float Out_Depth_1, out float Out_DepthDistortion_2)
        {
        float _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2;
        Unity_Comparison_Greater_float(unity_OrthoParams.w, 0, _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2);
        float _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2;
        Unity_Comparison_Greater_float(_ProjectionParams.x, 0, _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2);
        Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff;
        _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff.ScreenPosition = IN.ScreenPosition;
        half2 _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1;
        SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff, _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1);
        float _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1;
        Unity_SceneDepth_Raw_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1);
        float _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1;
        Unity_OneMinus_float(_SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1);
        float _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3);
        float _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3, _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3);
        float4 _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0 = IN.ScreenPosition;
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float2 _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0;
        GetClipValues_float(_GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0);
        float _Remap_1907dbd4ae754843a5d74245135e2923_Out_3;
        Unity_Remap_float(_Split_62277fd721f74a399bd1009f8b3cb8e3_B_3, _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0, float2 (0, 1), _Remap_1907dbd4ae754843a5d74245135e2923_Out_3);
        float _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Remap_1907dbd4ae754843a5d74245135e2923_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3);
        float _Subtract_b98f5f0e27014160829b37533239eca2_Out_2;
        Unity_Subtract_float(_Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_b98f5f0e27014160829b37533239eca2_Out_2);
        float _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1;
        Unity_Saturate_float(_Subtract_b98f5f0e27014160829b37533239eca2_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1);
        float _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1);
        float _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2;
        Unity_Multiply_float_float(_SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1, _ProjectionParams.z, _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2);
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2;
        Unity_Subtract_float(_Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2);
        float _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2, _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3);
        float2 _Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0 = _DistortionUV;
        float _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1;
        Unity_SceneDepth_Raw_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1);
        float _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1;
        Unity_OneMinus_float(_SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1);
        float _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3);
        float _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3, _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3);
        float _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2;
        Unity_Subtract_float(_Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2);
        float _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1;
        Unity_Saturate_float(_Subtract_4531c88bf2b147d7a2998422330b141f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1);
        float _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1);
        float _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2;
        Unity_Multiply_float_float(_SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1, _ProjectionParams.z, _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2);
        float _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2;
        Unity_Subtract_float(_Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2);
        float _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2, _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3);
        Out_Depth_1 = _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Out_DepthDistortion_2 = _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float2 Distortion;
            float DistortionBlur;
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            float _Property_e5176656505ae98292b155cb230ab233_Out_0 = _IceDistortion;
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_11506852e45cbb8f9732aebed8bbb210;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv0 = IN.uv0;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv2 = IN.uv2;
            float4 _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2);
            float _Split_f392619d76305f8e9a715324614291f5_R_1 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[0];
            float _Split_f392619d76305f8e9a715324614291f5_G_2 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[1];
            float _Split_f392619d76305f8e9a715324614291f5_B_3 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[2];
            float _Split_f392619d76305f8e9a715324614291f5_A_4 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[3];
            float4 _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4;
            float3 _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5;
            float2 _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6;
            Unity_Combine_float(_Split_f392619d76305f8e9a715324614291f5_R_1, _Split_f392619d76305f8e9a715324614291f5_G_2, 0, 0, _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4, _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5, _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6);
            float2 _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2;
            Unity_Multiply_float2_float2((_Property_e5176656505ae98292b155cb230ab233_Out_0.xx), _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6, _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2);
            float _Property_f0b2859614d93f86b920c65decb52ecf_Out_0 = _Ice_Noise_Distortion;
            UnityTexture2D _Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0 = UnityBuildTexture2DStructNoScale(_IceNoiseNormal);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv0 = IN.uv0;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv2 = IN.uv2;
            float4 _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2);
            float _Split_1c2740a46a2f0281ab926911287ce711_R_1 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[0];
            float _Split_1c2740a46a2f0281ab926911287ce711_G_2 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[1];
            float _Split_1c2740a46a2f0281ab926911287ce711_B_3 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[2];
            float _Split_1c2740a46a2f0281ab926911287ce711_A_4 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[3];
            float4 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4;
            float3 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5;
            float2 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6;
            Unity_Combine_float(_Split_1c2740a46a2f0281ab926911287ce711_R_1, _Split_1c2740a46a2f0281ab926911287ce711_G_2, 0, 0, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6);
            float2 _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2;
            Unity_Multiply_float2_float2((_Property_f0b2859614d93f86b920c65decb52ecf_Out_0.xx), _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2);
            float _Property_852d221028b884858f029fedb8de47d1_Out_0 = _IceNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_852d221028b884858f029fedb8de47d1_Out_0, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1);
            float _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1;
            Unity_Absolute_float(_TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1, _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1);
            float _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0 = _IceNoisePower;
            float _Power_1497f6299359e780a9aa8dde441d98cf_Out_2;
            Unity_Power_float(_Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1, _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0, _Power_1497f6299359e780a9aa8dde441d98cf_Out_2);
            float _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0 = _IceNoiseContrast;
            float3 _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2;
            Unity_Contrast_float((_Power_1497f6299359e780a9aa8dde441d98cf_Out_2.xxx), _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0, _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2);
            float _Split_f399eb1f3ad77580a75b6122d38451b5_R_1 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[0];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_G_2 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[1];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_B_3 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[2];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_A_4 = 0;
            float _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3;
            Unity_Clamp_float(_Split_f399eb1f3ad77580a75b6122d38451b5_R_1, 0, 1, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3);
            float2 _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            Unity_Lerp_float2(_Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xx), _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3);
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_893a7c3932a452849a5239a91f337a35;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv0 = IN.uv0;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv2 = IN.uv2;
            float4 _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_893a7c3932a452849a5239a91f337a35, _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2);
            float _Property_771911a99405a780908dd542012af7b8_Out_0 = _IceParallaxSteps;
            Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float _PlanarNMparallax_e8f8353657858a87933a47a40c74654d;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.uv0 = IN.uv0;
            float4 _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2;
            SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(_Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2);
            float _Property_efee416de222038a93fa523171fb9f0d_Out_0 = _ParalaxOffset;
            float _Property_720bc7e00a412889a10ca999204543f8_Out_0 = _IceParallaxNoiseMin;
            float _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0 = _IceParallaxNoiseMax;
            float _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0 = _IceParallaxNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1);
            float _Lerp_87de925175c62a8986309dc80655ce2f_Out_3;
            Unity_Lerp_float(_Property_720bc7e00a412889a10ca999204543f8_Out_0, _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3);
            float _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3;
            Unity_Lerp_float(_Property_efee416de222038a93fa523171fb9f0d_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3);
            float _Property_acfd17e181f6108ba7921d3e04df886d_Out_0 = _IceDepth;
            float _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0 = _ParallaxFalloff;
            float _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3;
            Unity_Lerp_float(_Property_eede9dad69eea580b2a3fdc05280f02f_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3);
            UnityTexture2D _Property_7c5c99f2c1b340ec980675a076619f86_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            float4 _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2;
            ParallaxLayers_float(_Property_771911a99405a780908dd542012af7b8_Out_0, (_PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2.xy), _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3, _Property_acfd17e181f6108ba7921d3e04df886d_Out_0, IN.TangentSpaceViewDirection, IN.WorldSpaceViewDirection, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _Property_7c5c99f2c1b340ec980675a076619f86_Out_0, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2);
            float4 _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2;
            Unity_Blend_Lighten_float4(_PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2, _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            float3 _HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2 = Unity_HDRP_SampleSceneColor_float(float4(IN.NDCPosition.xy, 0, 0).xy, 0, 1.0);
            float _Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0 = _CleanColorPower;
            float3 _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2;
            Unity_Multiply_float3_float3(_HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2, (_Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0.xxx), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2);
            float4 _Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0 = _DeepColor;
            float4 _Property_7094041d89afbd878cb83460f4ab68b8_Out_0 = _ShalowColor;
            Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c;
            _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c.ScreenPosition = IN.ScreenPosition;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2;
            SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 (0, 0), _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2);
            float _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0 = _ShalowFalloffMultiply;
            float _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0, _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2);
            float _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1;
            Unity_Absolute_float(_Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2, _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1);
            float _Property_e6dd087698d3e984bd5eb642347af797_Out_0 = _ShalowFalloffPower;
            float _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2;
            Unity_Multiply_float_float(_Property_e6dd087698d3e984bd5eb642347af797_Out_0, -1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2);
            float _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2;
            Unity_Power_float(_Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2, _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2);
            float _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1;
            Unity_Saturate_float(_Power_aaf82c5db3291a8bb2095cce38670a92_Out_2, _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1);
            float _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3;
            Unity_Clamp_float(_Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1, 0, 1, _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3);
            float4 _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3;
            Unity_Lerp_float4(_Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0, _Property_7094041d89afbd878cb83460f4ab68b8_Out_0, (_Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3.xxxx), _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3);
            float3 _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2;
            Unity_Multiply_float3_float3((_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2);
            float _Property_22da60d6cbff958696ddee1c161db229_Out_0 = _WaterAlphaMultiply;
            float _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_22da60d6cbff958696ddee1c161db229_Out_0, _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2);
            float _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3;
            Unity_Clamp_float(_Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2, 0, 1, _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3);
            float _Absolute_c4059e430bb17486afd523c0f333e478_Out_1;
            Unity_Absolute_float(_Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3, _Absolute_c4059e430bb17486afd523c0f333e478_Out_1);
            float _Property_cd34ee7769676e85b3e223f0e908967c_Out_0 = _WaterAlphaPower;
            float _Power_2c1f1e86c544138396974457f6515752_Out_2;
            Unity_Power_float(_Absolute_c4059e430bb17486afd523c0f333e478_Out_1, _Property_cd34ee7769676e85b3e223f0e908967c_Out_0, _Power_2c1f1e86c544138396974457f6515752_Out_2);
            float _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3;
            Unity_Clamp_float(_Power_2c1f1e86c544138396974457f6515752_Out_2, 0, 1, _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3);
            float3 _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3;
            Unity_Lerp_float3(_Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2, (_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), (_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3.xxx), _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3);
            float _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0 = _CleanFalloffMultiply;
            float _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0, _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2);
            float _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3;
            Unity_Clamp_float(_Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2, 0, 1, _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3);
            float _Absolute_2efac825a986e28190f26200795ca9ec_Out_1;
            Unity_Absolute_float(_Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3, _Absolute_2efac825a986e28190f26200795ca9ec_Out_1);
            float _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0 = _CleanFalloffPower;
            float _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2;
            Unity_Power_float(_Absolute_2efac825a986e28190f26200795ca9ec_Out_1, _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0, _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2);
            float _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3;
            Unity_Clamp_float(_Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2, 0, 1, _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3);
            float3 _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3;
            Unity_Lerp_float3(_Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3, (_Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3.xxx), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3);
            float3 _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3;
            Unity_Lerp_float3((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3);
            UnityTexture2D _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_256e5676e1089881ae3214634430b140_Out_0 = _DetailTilingOffset;
            float _Split_257d0b6ea953418d97fd7daa8128bf35_R_1 = _Property_256e5676e1089881ae3214634430b140_Out_0[0];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_G_2 = _Property_256e5676e1089881ae3214634430b140_Out_0[1];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_B_3 = _Property_256e5676e1089881ae3214634430b140_Out_0[2];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_A_4 = _Property_256e5676e1089881ae3214634430b140_Out_0[3];
            float2 _Vector2_98295494172421878c7a16cb2baddf9a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_R_1, _Split_257d0b6ea953418d97fd7daa8128bf35_G_2);
            float2 _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_B_3, _Split_257d0b6ea953418d97fd7daa8128bf35_A_4);
            float2 _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_98295494172421878c7a16cb2baddf9a_Out_0, _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0, _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3);
            float4 _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0 = SAMPLE_TEXTURE2D(_Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.tex, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.samplerstate, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.GetTransformedUV(_TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3) );
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.r;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.g;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.b;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.a;
            float _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4, 2, _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2);
            float _Add_fd3efcae64779e848ef39919335cd44d_Out_2;
            Unity_Add_float(_Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2, -1, _Add_fd3efcae64779e848ef39919335cd44d_Out_2);
            float _Property_605f29777330a58ba88ac032e905433b_Out_0 = _DetailAlbedoScale;
            float _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2;
            Unity_Multiply_float_float(_Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Property_605f29777330a58ba88ac032e905433b_Out_0, _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2);
            float _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1;
            Unity_Saturate_float(_Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2, _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1);
            float _Absolute_8acef423205118879e75274a48969d34_Out_1;
            Unity_Absolute_float(_Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1, _Absolute_8acef423205118879e75274a48969d34_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185;
            float3 _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float((float4(_Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3, 1.0)), _Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Absolute_8acef423205118879e75274a48969d34_Out_1, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1);
            float4 _Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0 = _WetColor;
            float3 _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2;
            Unity_Multiply_float3_float3((_Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0.xyz), _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2);
            float _Split_5b2299b48b10138ea40c141b79bfe90e_R_1 = IN.VertexColor[0];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_G_2 = IN.VertexColor[1];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_B_3 = IN.VertexColor[2];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_A_4 = IN.VertexColor[3];
            float _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3;
            Unity_Clamp_float(_Split_5b2299b48b10138ea40c141b79bfe90e_R_1, 0, 1, _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3);
            float _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1;
            Unity_OneMinus_float(_Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1);
            float3 _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            Unity_Lerp_float3(_BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2, (_OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1.xxx), _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3);
            float _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            Unity_Multiply_float_float(_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3, _Split_5b2299b48b10138ea40c141b79bfe90e_A_4, _Multiply_ffa35df91e1277898c1160f454087deb_Out_2);
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAO;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _IceSmoothness;
            float _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0 = _IceCrackSmoothness;
            UnityTexture2D _Property_be61fb085f680285bb171ac957c1d150_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv0 = IN.uv0;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv2 = IN.uv2;
            float4 _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_be61fb085f680285bb171ac957c1d150_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2);
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[0];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_G_2 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[1];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_B_3 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[2];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_A_4 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[3];
            float _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3;
            Unity_Lerp_float(_Property_0edea7916ed7a189a62b0faf2c274601_Out_0, _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0, _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3);
            float _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0 = _IceNoiseSmoothness;
            float _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3;
            Unity_Lerp_float(_Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3, _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3, _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3);
            float _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6, 2, _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2);
            float _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2;
            Unity_Add_float(_Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2, -1, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2);
            float _Property_cea4e47b293a988a83643b43f76c92ba_Out_0 = _DetailSmoothnessScale;
            float _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2;
            Unity_Multiply_float_float(_Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Property_cea4e47b293a988a83643b43f76c92ba_Out_0, _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2);
            float _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1;
            Unity_Saturate_float(_Multiply_2008466558f0e4819e60b3c41d94487c_Out_2, _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1);
            float _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1;
            Unity_Absolute_float(_Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43;
            float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1);
            float _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0 = _WetSmoothness;
            float _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1, _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3);
            float2 _Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0 = float2(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7, _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5);
            float2 _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2;
            Unity_Multiply_float2_float2(_Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0, float2(2, 2), _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2);
            float2 _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2;
            Unity_Add_float2(_Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2, float2(-1, -1), _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2);
            float _Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0 = _DetailNormalScale;
            float2 _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2;
            Unity_Multiply_float2_float2(_Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2, (_Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0.xx), _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2);
            float _Split_c4822b8eaff9b185be7c059792345712_R_1 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[0];
            float _Split_c4822b8eaff9b185be7c059792345712_G_2 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[1];
            float _Split_c4822b8eaff9b185be7c059792345712_B_3 = 0;
            float _Split_c4822b8eaff9b185be7c059792345712_A_4 = 0;
            float _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2;
            Unity_DotProduct_float2(_Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2);
            float _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1;
            Unity_Saturate_float(_DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2, _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1);
            float _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1;
            Unity_OneMinus_float(_Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1, _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1);
            float _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1;
            Unity_SquareRoot_float(_OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float3 _Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0 = float3(_Split_c4822b8eaff9b185be7c059792345712_R_1, _Split_c4822b8eaff9b185be7c059792345712_G_2, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            float _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0 = _NoiseNormalScale;
            float3 _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2.xyz), _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2);
            float3 _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3;
            Unity_Lerp_float3(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3);
            float3 _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            Unity_NormalBlend_float(_Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0, _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3, _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2);
            float _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1;
            Unity_OneMinus_float(_Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1);
            float _Property_42e21c36617ec48ba2d35424c394cb28_Out_0 = _Ice_Thickness;
            float _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2;
            Unity_Multiply_float_float(_OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1, _Property_42e21c36617ec48ba2d35424c394cb28_Out_0, _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2);
            float _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            Unity_Clamp_float(_Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2, 0, 1, _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3);
            surface.Distortion = _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            surface.DistortionBlur = 0;
            surface.BaseColor = _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            surface.TransmissionMask = 1;
            surface.Thickness = _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            surface.DiffusionProfileHash = _DiffusionProfileHash;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.WorldSpacePosition =                         input.positionRWS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.ScreenPosition = ComputeScreenPos(TransformWorldToHClip(input.positionRWS), _ProjectionParams.x);
        
        #if UNITY_UV_STARTS_AT_TOP
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #else
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
            output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
            output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        
            output.uv0 =                                        input.texCoord0;
            output.uv2 =                                        input.texCoord2;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
            surfaceData.thickness =                 surfaceDescription.Thickness;
            surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingVisibility.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "ForwardDXR"
            Tags
            {
                "LightMode" = "ForwardDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD1
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_FORWARD
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define HAS_LIGHTLOOP 1
        #define REQUIRE_DEPTH_TEXTURE
        #define REQUIRE_OPAQUE_TEXTURE
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float _WaterAlphaMultiply;
        float _WaterAlphaPower;
        float _CleanFalloffMultiply;
        float _CleanFalloffPower;
        float _ShalowFalloffMultiply;
        float _ShalowFalloffPower;
        float _CleanColorPower;
        float4 _ShalowColor;
        float4 _DeepColor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float _IceNoiseScale;
        float _IceNoiseContrast;
        float _IceNoisePower;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _IceNoiseNormal_TexelSize;
        float _NoiseNormalScale;
        float _BaseAO;
        float _IceSmoothness;
        float _IceCrackSmoothness;
        float _IceNoiseSmoothness;
        float4 _ParalaxMap_TexelSize;
        float _ParalaxOffset;
        float _IceParallaxSteps;
        float _IceDepth;
        float _ParallaxFalloff;
        float _IceParallaxNoiseScale;
        float _IceParallaxNoiseMin;
        float _IceParallaxNoiseMax;
        float _Ice_Thickness;
        float _IceDistortion;
        float _Ice_Noise_Distortion;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_IceNoiseNormal);
        SAMPLER(sampler_IceNoiseNormal);
        TEXTURE2D(_ParalaxMap);
        SAMPLER(sampler_ParalaxMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Hashes.hlsl"
        #include "./NMParallaxLayers.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 WorldSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 ScreenPosition;
             float2 NDCPosition;
             float2 PixelPosition;
             float4 uv0;
             float4 uv2;
             float4 VertexColor;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Branch_float4(float Predicate, float4 True, float4 False, out float4 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_058f4fba88c3437288219f1929444bf2_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_43d85b3291324c848dfbeec6adac2a71_Out_0 = IN.uv0;
        float4 _UV_36881dcaab9040168fc5215dcd00f352_Out_0 = IN.uv2;
        float4 _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3;
        Unity_Branch_float4(_Property_058f4fba88c3437288219f1929444bf2_Out_0, _UV_43d85b3291324c848dfbeec6adac2a71_Out_0, _UV_36881dcaab9040168fc5215dcd00f352_Out_0, _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float((_Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3.xy), _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3) );
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1;
        {
        float3x3 tangentTransform = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, tangentTransform, true);
        }
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        float Unity_SimpleNoise_ValueNoise_LegacySine_float (float2 uv)
        {
        float2 i = floor(uv);
        float2 f = frac(uv);
        f = f * f * (3.0 - 2.0 * f);
        uv = abs(frac(uv) - 0.5);
        float2 c0 = i + float2(0.0, 0.0);
        float2 c1 = i + float2(1.0, 0.0);
        float2 c2 = i + float2(0.0, 1.0);
        float2 c3 = i + float2(1.0, 1.0);
        float r0; Hash_LegacySine_2_1_float(c0, r0);
        float r1; Hash_LegacySine_2_1_float(c1, r1);
        float r2; Hash_LegacySine_2_1_float(c2, r2);
        float r3; Hash_LegacySine_2_1_float(c3, r3);
        float bottomOfGrid = lerp(r0, r1, f.x);
        float topOfGrid = lerp(r2, r3, f.x);
        float t = lerp(bottomOfGrid, topOfGrid, f.y);
        return t;
        }
        
        void Unity_SimpleNoise_LegacySine_float(float2 UV, float Scale, out float Out)
        {
        float freq, amp;
        Out = 0.0f;
        freq = pow(2.0, float(0));
        amp = pow(0.5, float(3-0));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(1));
        amp = pow(0.5, float(3-1));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(2));
        amp = pow(0.5, float(3-2));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(float Vector1_E4D1C13A, float Vector1_CBF4C304, Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float IN, out float XYZ_1)
        {
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0 = Vector1_CBF4C304;
        float _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2);
        float _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2);
        float _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, _Add_e855069f047fae8ea9027d56acb61e56_Out_2, _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Contrast_float(float3 In, float Contrast, out float3 Out)
        {
            float midpoint = pow(0.5, 2.2);
            Out =  (In - midpoint) * Contrast + midpoint;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Lerp_float2(float2 A, float2 B, float2 T, out float2 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_029e8e8198564838b9389b902a09fb22_Out_0 = IN.uv0;
        float4 _UV_7a6209af1506424fb75c81e87e42035a_Out_0 = IN.uv2;
        float4 _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3;
        Unity_Branch_float4(_Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0, _UV_029e8e8198564838b9389b902a09fb22_Out_0, _UV_7a6209af1506424fb75c81e87e42035a_Out_0, _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float((_Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3.xy), _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3) );
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        struct Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float IN, out float4 XZ_2)
        {
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        XZ_2 = (float4(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3, 0.0, 1.0));
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Blend_Lighten_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            Out = max(Blend, Base);
            Out = lerp(Base, Out, Opacity);
        }
        
        float3 Unity_HDRP_SampleSceneColor_float(float2 uv, float lod, float exposureMultiplier)
        {
            exposureMultiplier = 1.0;
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(_SURFACE_TYPE_TRANSPARENT) && defined(SHADERPASS) && (SHADERPASS != SHADERPASS_LIGHT_TRANSPORT) && (SHADERPASS != SHADERPASS_PATH_TRACING) && (SHADERPASS != SHADERPASS_RAYTRACING_VISIBILITY) && (SHADERPASS != SHADERPASS_RAYTRACING_FORWARD)
            return SampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(CUSTOM_PASS_SAMPLING_HLSL) && defined(SHADERPASS) && (SHADERPASS == SHADERPASS_DRAWPROCEDURAL || SHADERPASS == SHADERPASS_BLIT)
            return CustomPassSampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            return float3(0.0, 0.0, 0.0);
        }
        
        void Unity_Comparison_Greater_float(float A, float B, out float Out)
        {
            Out = A > B ? 1 : 0;
        }
        
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float
        {
        float4 ScreenPosition;
        };
        
        void SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float IN, out float2 OutVector2_1)
        {
        float4 _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0 = IN.ScreenPosition;
        float _Split_b183780fdd2343708af64846c96ee2a7_R_1 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[0];
        float _Split_b183780fdd2343708af64846c96ee2a7_G_2 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[1];
        float _Split_b183780fdd2343708af64846c96ee2a7_B_3 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[2];
        float _Split_b183780fdd2343708af64846c96ee2a7_A_4 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[3];
        float2 _Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0 = float2(_Split_b183780fdd2343708af64846c96ee2a7_R_1, _Split_b183780fdd2343708af64846c96ee2a7_G_2);
        float2 _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        Unity_Divide_float2(_Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0, (_Split_b183780fdd2343708af64846c96ee2a7_A_4.xx), _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2);
        OutVector2_1 = _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        }
        
        void Unity_SceneDepth_Raw_float(float4 UV, out float Out)
        {
            Out = SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void GetClipValues_float(out float2 Out){
        Out = float2(
        
        UNITY_NEAR_CLIP_VALUE,
        
        UNITY_RAW_FAR_CLIP_VALUE
        
        );
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
        {
            Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
        }
        
        struct Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float
        {
        float4 ScreenPosition;
        };
        
        void SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 _DistortionUV, Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float IN, out float Out_Depth_1, out float Out_DepthDistortion_2)
        {
        float _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2;
        Unity_Comparison_Greater_float(unity_OrthoParams.w, 0, _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2);
        float _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2;
        Unity_Comparison_Greater_float(_ProjectionParams.x, 0, _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2);
        Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff;
        _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff.ScreenPosition = IN.ScreenPosition;
        half2 _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1;
        SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff, _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1);
        float _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1;
        Unity_SceneDepth_Raw_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1);
        float _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1;
        Unity_OneMinus_float(_SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1);
        float _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3);
        float _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3, _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3);
        float4 _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0 = IN.ScreenPosition;
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float2 _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0;
        GetClipValues_float(_GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0);
        float _Remap_1907dbd4ae754843a5d74245135e2923_Out_3;
        Unity_Remap_float(_Split_62277fd721f74a399bd1009f8b3cb8e3_B_3, _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0, float2 (0, 1), _Remap_1907dbd4ae754843a5d74245135e2923_Out_3);
        float _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Remap_1907dbd4ae754843a5d74245135e2923_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3);
        float _Subtract_b98f5f0e27014160829b37533239eca2_Out_2;
        Unity_Subtract_float(_Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_b98f5f0e27014160829b37533239eca2_Out_2);
        float _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1;
        Unity_Saturate_float(_Subtract_b98f5f0e27014160829b37533239eca2_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1);
        float _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1);
        float _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2;
        Unity_Multiply_float_float(_SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1, _ProjectionParams.z, _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2);
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2;
        Unity_Subtract_float(_Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2);
        float _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2, _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3);
        float2 _Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0 = _DistortionUV;
        float _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1;
        Unity_SceneDepth_Raw_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1);
        float _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1;
        Unity_OneMinus_float(_SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1);
        float _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3);
        float _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3, _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3);
        float _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2;
        Unity_Subtract_float(_Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2);
        float _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1;
        Unity_Saturate_float(_Subtract_4531c88bf2b147d7a2998422330b141f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1);
        float _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1);
        float _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2;
        Unity_Multiply_float_float(_SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1, _ProjectionParams.z, _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2);
        float _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2;
        Unity_Subtract_float(_Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2);
        float _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2, _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3);
        Out_Depth_1 = _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Out_DepthDistortion_2 = _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float2 Distortion;
            float DistortionBlur;
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            float _Property_e5176656505ae98292b155cb230ab233_Out_0 = _IceDistortion;
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_11506852e45cbb8f9732aebed8bbb210;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv0 = IN.uv0;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv2 = IN.uv2;
            float4 _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2);
            float _Split_f392619d76305f8e9a715324614291f5_R_1 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[0];
            float _Split_f392619d76305f8e9a715324614291f5_G_2 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[1];
            float _Split_f392619d76305f8e9a715324614291f5_B_3 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[2];
            float _Split_f392619d76305f8e9a715324614291f5_A_4 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[3];
            float4 _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4;
            float3 _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5;
            float2 _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6;
            Unity_Combine_float(_Split_f392619d76305f8e9a715324614291f5_R_1, _Split_f392619d76305f8e9a715324614291f5_G_2, 0, 0, _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4, _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5, _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6);
            float2 _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2;
            Unity_Multiply_float2_float2((_Property_e5176656505ae98292b155cb230ab233_Out_0.xx), _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6, _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2);
            float _Property_f0b2859614d93f86b920c65decb52ecf_Out_0 = _Ice_Noise_Distortion;
            UnityTexture2D _Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0 = UnityBuildTexture2DStructNoScale(_IceNoiseNormal);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv0 = IN.uv0;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv2 = IN.uv2;
            float4 _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2);
            float _Split_1c2740a46a2f0281ab926911287ce711_R_1 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[0];
            float _Split_1c2740a46a2f0281ab926911287ce711_G_2 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[1];
            float _Split_1c2740a46a2f0281ab926911287ce711_B_3 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[2];
            float _Split_1c2740a46a2f0281ab926911287ce711_A_4 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[3];
            float4 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4;
            float3 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5;
            float2 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6;
            Unity_Combine_float(_Split_1c2740a46a2f0281ab926911287ce711_R_1, _Split_1c2740a46a2f0281ab926911287ce711_G_2, 0, 0, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6);
            float2 _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2;
            Unity_Multiply_float2_float2((_Property_f0b2859614d93f86b920c65decb52ecf_Out_0.xx), _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2);
            float _Property_852d221028b884858f029fedb8de47d1_Out_0 = _IceNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_852d221028b884858f029fedb8de47d1_Out_0, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1);
            float _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1;
            Unity_Absolute_float(_TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1, _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1);
            float _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0 = _IceNoisePower;
            float _Power_1497f6299359e780a9aa8dde441d98cf_Out_2;
            Unity_Power_float(_Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1, _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0, _Power_1497f6299359e780a9aa8dde441d98cf_Out_2);
            float _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0 = _IceNoiseContrast;
            float3 _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2;
            Unity_Contrast_float((_Power_1497f6299359e780a9aa8dde441d98cf_Out_2.xxx), _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0, _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2);
            float _Split_f399eb1f3ad77580a75b6122d38451b5_R_1 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[0];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_G_2 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[1];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_B_3 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[2];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_A_4 = 0;
            float _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3;
            Unity_Clamp_float(_Split_f399eb1f3ad77580a75b6122d38451b5_R_1, 0, 1, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3);
            float2 _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            Unity_Lerp_float2(_Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xx), _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3);
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_893a7c3932a452849a5239a91f337a35;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv0 = IN.uv0;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv2 = IN.uv2;
            float4 _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_893a7c3932a452849a5239a91f337a35, _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2);
            float _Property_771911a99405a780908dd542012af7b8_Out_0 = _IceParallaxSteps;
            Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float _PlanarNMparallax_e8f8353657858a87933a47a40c74654d;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.uv0 = IN.uv0;
            float4 _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2;
            SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(_Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2);
            float _Property_efee416de222038a93fa523171fb9f0d_Out_0 = _ParalaxOffset;
            float _Property_720bc7e00a412889a10ca999204543f8_Out_0 = _IceParallaxNoiseMin;
            float _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0 = _IceParallaxNoiseMax;
            float _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0 = _IceParallaxNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1);
            float _Lerp_87de925175c62a8986309dc80655ce2f_Out_3;
            Unity_Lerp_float(_Property_720bc7e00a412889a10ca999204543f8_Out_0, _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3);
            float _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3;
            Unity_Lerp_float(_Property_efee416de222038a93fa523171fb9f0d_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3);
            float _Property_acfd17e181f6108ba7921d3e04df886d_Out_0 = _IceDepth;
            float _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0 = _ParallaxFalloff;
            float _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3;
            Unity_Lerp_float(_Property_eede9dad69eea580b2a3fdc05280f02f_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3);
            UnityTexture2D _Property_7c5c99f2c1b340ec980675a076619f86_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            float4 _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2;
            ParallaxLayers_float(_Property_771911a99405a780908dd542012af7b8_Out_0, (_PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2.xy), _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3, _Property_acfd17e181f6108ba7921d3e04df886d_Out_0, IN.TangentSpaceViewDirection, IN.WorldSpaceViewDirection, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _Property_7c5c99f2c1b340ec980675a076619f86_Out_0, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2);
            float4 _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2;
            Unity_Blend_Lighten_float4(_PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2, _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            float3 _HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2 = Unity_HDRP_SampleSceneColor_float(float4(IN.NDCPosition.xy, 0, 0).xy, 0, 1.0);
            float _Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0 = _CleanColorPower;
            float3 _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2;
            Unity_Multiply_float3_float3(_HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2, (_Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0.xxx), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2);
            float4 _Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0 = _DeepColor;
            float4 _Property_7094041d89afbd878cb83460f4ab68b8_Out_0 = _ShalowColor;
            Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c;
            _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c.ScreenPosition = IN.ScreenPosition;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2;
            SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 (0, 0), _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2);
            float _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0 = _ShalowFalloffMultiply;
            float _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0, _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2);
            float _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1;
            Unity_Absolute_float(_Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2, _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1);
            float _Property_e6dd087698d3e984bd5eb642347af797_Out_0 = _ShalowFalloffPower;
            float _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2;
            Unity_Multiply_float_float(_Property_e6dd087698d3e984bd5eb642347af797_Out_0, -1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2);
            float _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2;
            Unity_Power_float(_Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2, _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2);
            float _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1;
            Unity_Saturate_float(_Power_aaf82c5db3291a8bb2095cce38670a92_Out_2, _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1);
            float _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3;
            Unity_Clamp_float(_Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1, 0, 1, _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3);
            float4 _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3;
            Unity_Lerp_float4(_Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0, _Property_7094041d89afbd878cb83460f4ab68b8_Out_0, (_Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3.xxxx), _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3);
            float3 _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2;
            Unity_Multiply_float3_float3((_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2);
            float _Property_22da60d6cbff958696ddee1c161db229_Out_0 = _WaterAlphaMultiply;
            float _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_22da60d6cbff958696ddee1c161db229_Out_0, _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2);
            float _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3;
            Unity_Clamp_float(_Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2, 0, 1, _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3);
            float _Absolute_c4059e430bb17486afd523c0f333e478_Out_1;
            Unity_Absolute_float(_Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3, _Absolute_c4059e430bb17486afd523c0f333e478_Out_1);
            float _Property_cd34ee7769676e85b3e223f0e908967c_Out_0 = _WaterAlphaPower;
            float _Power_2c1f1e86c544138396974457f6515752_Out_2;
            Unity_Power_float(_Absolute_c4059e430bb17486afd523c0f333e478_Out_1, _Property_cd34ee7769676e85b3e223f0e908967c_Out_0, _Power_2c1f1e86c544138396974457f6515752_Out_2);
            float _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3;
            Unity_Clamp_float(_Power_2c1f1e86c544138396974457f6515752_Out_2, 0, 1, _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3);
            float3 _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3;
            Unity_Lerp_float3(_Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2, (_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), (_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3.xxx), _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3);
            float _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0 = _CleanFalloffMultiply;
            float _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0, _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2);
            float _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3;
            Unity_Clamp_float(_Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2, 0, 1, _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3);
            float _Absolute_2efac825a986e28190f26200795ca9ec_Out_1;
            Unity_Absolute_float(_Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3, _Absolute_2efac825a986e28190f26200795ca9ec_Out_1);
            float _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0 = _CleanFalloffPower;
            float _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2;
            Unity_Power_float(_Absolute_2efac825a986e28190f26200795ca9ec_Out_1, _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0, _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2);
            float _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3;
            Unity_Clamp_float(_Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2, 0, 1, _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3);
            float3 _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3;
            Unity_Lerp_float3(_Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3, (_Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3.xxx), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3);
            float3 _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3;
            Unity_Lerp_float3((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3);
            UnityTexture2D _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_256e5676e1089881ae3214634430b140_Out_0 = _DetailTilingOffset;
            float _Split_257d0b6ea953418d97fd7daa8128bf35_R_1 = _Property_256e5676e1089881ae3214634430b140_Out_0[0];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_G_2 = _Property_256e5676e1089881ae3214634430b140_Out_0[1];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_B_3 = _Property_256e5676e1089881ae3214634430b140_Out_0[2];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_A_4 = _Property_256e5676e1089881ae3214634430b140_Out_0[3];
            float2 _Vector2_98295494172421878c7a16cb2baddf9a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_R_1, _Split_257d0b6ea953418d97fd7daa8128bf35_G_2);
            float2 _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_B_3, _Split_257d0b6ea953418d97fd7daa8128bf35_A_4);
            float2 _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_98295494172421878c7a16cb2baddf9a_Out_0, _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0, _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3);
            float4 _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0 = SAMPLE_TEXTURE2D(_Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.tex, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.samplerstate, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.GetTransformedUV(_TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3) );
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.r;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.g;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.b;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.a;
            float _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4, 2, _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2);
            float _Add_fd3efcae64779e848ef39919335cd44d_Out_2;
            Unity_Add_float(_Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2, -1, _Add_fd3efcae64779e848ef39919335cd44d_Out_2);
            float _Property_605f29777330a58ba88ac032e905433b_Out_0 = _DetailAlbedoScale;
            float _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2;
            Unity_Multiply_float_float(_Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Property_605f29777330a58ba88ac032e905433b_Out_0, _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2);
            float _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1;
            Unity_Saturate_float(_Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2, _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1);
            float _Absolute_8acef423205118879e75274a48969d34_Out_1;
            Unity_Absolute_float(_Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1, _Absolute_8acef423205118879e75274a48969d34_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185;
            float3 _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float((float4(_Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3, 1.0)), _Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Absolute_8acef423205118879e75274a48969d34_Out_1, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1);
            float4 _Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0 = _WetColor;
            float3 _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2;
            Unity_Multiply_float3_float3((_Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0.xyz), _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2);
            float _Split_5b2299b48b10138ea40c141b79bfe90e_R_1 = IN.VertexColor[0];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_G_2 = IN.VertexColor[1];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_B_3 = IN.VertexColor[2];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_A_4 = IN.VertexColor[3];
            float _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3;
            Unity_Clamp_float(_Split_5b2299b48b10138ea40c141b79bfe90e_R_1, 0, 1, _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3);
            float _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1;
            Unity_OneMinus_float(_Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1);
            float3 _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            Unity_Lerp_float3(_BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2, (_OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1.xxx), _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3);
            float _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            Unity_Multiply_float_float(_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3, _Split_5b2299b48b10138ea40c141b79bfe90e_A_4, _Multiply_ffa35df91e1277898c1160f454087deb_Out_2);
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAO;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _IceSmoothness;
            float _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0 = _IceCrackSmoothness;
            UnityTexture2D _Property_be61fb085f680285bb171ac957c1d150_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv0 = IN.uv0;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv2 = IN.uv2;
            float4 _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_be61fb085f680285bb171ac957c1d150_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2);
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[0];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_G_2 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[1];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_B_3 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[2];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_A_4 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[3];
            float _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3;
            Unity_Lerp_float(_Property_0edea7916ed7a189a62b0faf2c274601_Out_0, _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0, _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3);
            float _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0 = _IceNoiseSmoothness;
            float _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3;
            Unity_Lerp_float(_Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3, _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3, _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3);
            float _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6, 2, _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2);
            float _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2;
            Unity_Add_float(_Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2, -1, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2);
            float _Property_cea4e47b293a988a83643b43f76c92ba_Out_0 = _DetailSmoothnessScale;
            float _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2;
            Unity_Multiply_float_float(_Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Property_cea4e47b293a988a83643b43f76c92ba_Out_0, _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2);
            float _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1;
            Unity_Saturate_float(_Multiply_2008466558f0e4819e60b3c41d94487c_Out_2, _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1);
            float _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1;
            Unity_Absolute_float(_Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43;
            float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1);
            float _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0 = _WetSmoothness;
            float _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1, _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3);
            float2 _Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0 = float2(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7, _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5);
            float2 _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2;
            Unity_Multiply_float2_float2(_Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0, float2(2, 2), _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2);
            float2 _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2;
            Unity_Add_float2(_Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2, float2(-1, -1), _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2);
            float _Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0 = _DetailNormalScale;
            float2 _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2;
            Unity_Multiply_float2_float2(_Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2, (_Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0.xx), _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2);
            float _Split_c4822b8eaff9b185be7c059792345712_R_1 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[0];
            float _Split_c4822b8eaff9b185be7c059792345712_G_2 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[1];
            float _Split_c4822b8eaff9b185be7c059792345712_B_3 = 0;
            float _Split_c4822b8eaff9b185be7c059792345712_A_4 = 0;
            float _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2;
            Unity_DotProduct_float2(_Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2);
            float _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1;
            Unity_Saturate_float(_DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2, _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1);
            float _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1;
            Unity_OneMinus_float(_Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1, _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1);
            float _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1;
            Unity_SquareRoot_float(_OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float3 _Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0 = float3(_Split_c4822b8eaff9b185be7c059792345712_R_1, _Split_c4822b8eaff9b185be7c059792345712_G_2, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            float _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0 = _NoiseNormalScale;
            float3 _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2.xyz), _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2);
            float3 _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3;
            Unity_Lerp_float3(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3);
            float3 _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            Unity_NormalBlend_float(_Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0, _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3, _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2);
            float _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1;
            Unity_OneMinus_float(_Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1);
            float _Property_42e21c36617ec48ba2d35424c394cb28_Out_0 = _Ice_Thickness;
            float _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2;
            Unity_Multiply_float_float(_OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1, _Property_42e21c36617ec48ba2d35424c394cb28_Out_0, _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2);
            float _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            Unity_Clamp_float(_Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2, 0, 1, _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3);
            surface.Distortion = _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            surface.DistortionBlur = 0;
            surface.BaseColor = _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            surface.TransmissionMask = 1;
            surface.Thickness = _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            surface.DiffusionProfileHash = _DiffusionProfileHash;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.WorldSpacePosition =                         input.positionRWS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.ScreenPosition = ComputeScreenPos(TransformWorldToHClip(input.positionRWS), _ProjectionParams.x);
        
        #if UNITY_UV_STARTS_AT_TOP
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #else
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
            output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
            output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        
            output.uv0 =                                        input.texCoord0;
            output.uv2 =                                        input.texCoord2;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
            surfaceData.thickness =                 surfaceDescription.Thickness;
            surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingForward.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "GBufferDXR"
            Tags
            {
                "LightMode" = "GBufferDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma multi_compile _ MINIMAL_GBUFFER
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD1
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_GBUFFER
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define REQUIRE_DEPTH_TEXTURE
        #define REQUIRE_OPAQUE_TEXTURE
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float _WaterAlphaMultiply;
        float _WaterAlphaPower;
        float _CleanFalloffMultiply;
        float _CleanFalloffPower;
        float _ShalowFalloffMultiply;
        float _ShalowFalloffPower;
        float _CleanColorPower;
        float4 _ShalowColor;
        float4 _DeepColor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float _IceNoiseScale;
        float _IceNoiseContrast;
        float _IceNoisePower;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _IceNoiseNormal_TexelSize;
        float _NoiseNormalScale;
        float _BaseAO;
        float _IceSmoothness;
        float _IceCrackSmoothness;
        float _IceNoiseSmoothness;
        float4 _ParalaxMap_TexelSize;
        float _ParalaxOffset;
        float _IceParallaxSteps;
        float _IceDepth;
        float _ParallaxFalloff;
        float _IceParallaxNoiseScale;
        float _IceParallaxNoiseMin;
        float _IceParallaxNoiseMax;
        float _Ice_Thickness;
        float _IceDistortion;
        float _Ice_Noise_Distortion;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_IceNoiseNormal);
        SAMPLER(sampler_IceNoiseNormal);
        TEXTURE2D(_ParalaxMap);
        SAMPLER(sampler_ParalaxMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Deferred/RaytracingIntersectonGBuffer.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/StandardLit/StandardLit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Hashes.hlsl"
        #include "./NMParallaxLayers.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 WorldSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 ScreenPosition;
             float2 NDCPosition;
             float2 PixelPosition;
             float4 uv0;
             float4 uv2;
             float4 VertexColor;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Branch_float4(float Predicate, float4 True, float4 False, out float4 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_058f4fba88c3437288219f1929444bf2_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_43d85b3291324c848dfbeec6adac2a71_Out_0 = IN.uv0;
        float4 _UV_36881dcaab9040168fc5215dcd00f352_Out_0 = IN.uv2;
        float4 _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3;
        Unity_Branch_float4(_Property_058f4fba88c3437288219f1929444bf2_Out_0, _UV_43d85b3291324c848dfbeec6adac2a71_Out_0, _UV_36881dcaab9040168fc5215dcd00f352_Out_0, _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float((_Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3.xy), _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3) );
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1;
        {
        float3x3 tangentTransform = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, tangentTransform, true);
        }
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        float Unity_SimpleNoise_ValueNoise_LegacySine_float (float2 uv)
        {
        float2 i = floor(uv);
        float2 f = frac(uv);
        f = f * f * (3.0 - 2.0 * f);
        uv = abs(frac(uv) - 0.5);
        float2 c0 = i + float2(0.0, 0.0);
        float2 c1 = i + float2(1.0, 0.0);
        float2 c2 = i + float2(0.0, 1.0);
        float2 c3 = i + float2(1.0, 1.0);
        float r0; Hash_LegacySine_2_1_float(c0, r0);
        float r1; Hash_LegacySine_2_1_float(c1, r1);
        float r2; Hash_LegacySine_2_1_float(c2, r2);
        float r3; Hash_LegacySine_2_1_float(c3, r3);
        float bottomOfGrid = lerp(r0, r1, f.x);
        float topOfGrid = lerp(r2, r3, f.x);
        float t = lerp(bottomOfGrid, topOfGrid, f.y);
        return t;
        }
        
        void Unity_SimpleNoise_LegacySine_float(float2 UV, float Scale, out float Out)
        {
        float freq, amp;
        Out = 0.0f;
        freq = pow(2.0, float(0));
        amp = pow(0.5, float(3-0));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(1));
        amp = pow(0.5, float(3-1));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(2));
        amp = pow(0.5, float(3-2));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(float Vector1_E4D1C13A, float Vector1_CBF4C304, Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float IN, out float XYZ_1)
        {
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0 = Vector1_CBF4C304;
        float _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2);
        float _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2);
        float _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, _Add_e855069f047fae8ea9027d56acb61e56_Out_2, _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Contrast_float(float3 In, float Contrast, out float3 Out)
        {
            float midpoint = pow(0.5, 2.2);
            Out =  (In - midpoint) * Contrast + midpoint;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Lerp_float2(float2 A, float2 B, float2 T, out float2 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_029e8e8198564838b9389b902a09fb22_Out_0 = IN.uv0;
        float4 _UV_7a6209af1506424fb75c81e87e42035a_Out_0 = IN.uv2;
        float4 _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3;
        Unity_Branch_float4(_Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0, _UV_029e8e8198564838b9389b902a09fb22_Out_0, _UV_7a6209af1506424fb75c81e87e42035a_Out_0, _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float((_Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3.xy), _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3) );
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        struct Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float IN, out float4 XZ_2)
        {
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        XZ_2 = (float4(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3, 0.0, 1.0));
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Blend_Lighten_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            Out = max(Blend, Base);
            Out = lerp(Base, Out, Opacity);
        }
        
        float3 Unity_HDRP_SampleSceneColor_float(float2 uv, float lod, float exposureMultiplier)
        {
            exposureMultiplier = 1.0;
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(_SURFACE_TYPE_TRANSPARENT) && defined(SHADERPASS) && (SHADERPASS != SHADERPASS_LIGHT_TRANSPORT) && (SHADERPASS != SHADERPASS_PATH_TRACING) && (SHADERPASS != SHADERPASS_RAYTRACING_VISIBILITY) && (SHADERPASS != SHADERPASS_RAYTRACING_FORWARD)
            return SampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(CUSTOM_PASS_SAMPLING_HLSL) && defined(SHADERPASS) && (SHADERPASS == SHADERPASS_DRAWPROCEDURAL || SHADERPASS == SHADERPASS_BLIT)
            return CustomPassSampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            return float3(0.0, 0.0, 0.0);
        }
        
        void Unity_Comparison_Greater_float(float A, float B, out float Out)
        {
            Out = A > B ? 1 : 0;
        }
        
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float
        {
        float4 ScreenPosition;
        };
        
        void SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float IN, out float2 OutVector2_1)
        {
        float4 _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0 = IN.ScreenPosition;
        float _Split_b183780fdd2343708af64846c96ee2a7_R_1 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[0];
        float _Split_b183780fdd2343708af64846c96ee2a7_G_2 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[1];
        float _Split_b183780fdd2343708af64846c96ee2a7_B_3 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[2];
        float _Split_b183780fdd2343708af64846c96ee2a7_A_4 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[3];
        float2 _Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0 = float2(_Split_b183780fdd2343708af64846c96ee2a7_R_1, _Split_b183780fdd2343708af64846c96ee2a7_G_2);
        float2 _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        Unity_Divide_float2(_Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0, (_Split_b183780fdd2343708af64846c96ee2a7_A_4.xx), _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2);
        OutVector2_1 = _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        }
        
        void Unity_SceneDepth_Raw_float(float4 UV, out float Out)
        {
            Out = SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void GetClipValues_float(out float2 Out){
        Out = float2(
        
        UNITY_NEAR_CLIP_VALUE,
        
        UNITY_RAW_FAR_CLIP_VALUE
        
        );
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
        {
            Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
        }
        
        struct Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float
        {
        float4 ScreenPosition;
        };
        
        void SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 _DistortionUV, Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float IN, out float Out_Depth_1, out float Out_DepthDistortion_2)
        {
        float _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2;
        Unity_Comparison_Greater_float(unity_OrthoParams.w, 0, _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2);
        float _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2;
        Unity_Comparison_Greater_float(_ProjectionParams.x, 0, _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2);
        Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff;
        _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff.ScreenPosition = IN.ScreenPosition;
        half2 _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1;
        SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff, _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1);
        float _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1;
        Unity_SceneDepth_Raw_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1);
        float _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1;
        Unity_OneMinus_float(_SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1);
        float _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3);
        float _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3, _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3);
        float4 _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0 = IN.ScreenPosition;
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float2 _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0;
        GetClipValues_float(_GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0);
        float _Remap_1907dbd4ae754843a5d74245135e2923_Out_3;
        Unity_Remap_float(_Split_62277fd721f74a399bd1009f8b3cb8e3_B_3, _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0, float2 (0, 1), _Remap_1907dbd4ae754843a5d74245135e2923_Out_3);
        float _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Remap_1907dbd4ae754843a5d74245135e2923_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3);
        float _Subtract_b98f5f0e27014160829b37533239eca2_Out_2;
        Unity_Subtract_float(_Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_b98f5f0e27014160829b37533239eca2_Out_2);
        float _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1;
        Unity_Saturate_float(_Subtract_b98f5f0e27014160829b37533239eca2_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1);
        float _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1);
        float _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2;
        Unity_Multiply_float_float(_SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1, _ProjectionParams.z, _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2);
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2;
        Unity_Subtract_float(_Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2);
        float _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2, _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3);
        float2 _Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0 = _DistortionUV;
        float _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1;
        Unity_SceneDepth_Raw_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1);
        float _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1;
        Unity_OneMinus_float(_SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1);
        float _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3);
        float _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3, _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3);
        float _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2;
        Unity_Subtract_float(_Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2);
        float _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1;
        Unity_Saturate_float(_Subtract_4531c88bf2b147d7a2998422330b141f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1);
        float _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1);
        float _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2;
        Unity_Multiply_float_float(_SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1, _ProjectionParams.z, _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2);
        float _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2;
        Unity_Subtract_float(_Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2);
        float _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2, _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3);
        Out_Depth_1 = _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Out_DepthDistortion_2 = _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float2 Distortion;
            float DistortionBlur;
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            float _Property_e5176656505ae98292b155cb230ab233_Out_0 = _IceDistortion;
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_11506852e45cbb8f9732aebed8bbb210;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv0 = IN.uv0;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv2 = IN.uv2;
            float4 _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2);
            float _Split_f392619d76305f8e9a715324614291f5_R_1 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[0];
            float _Split_f392619d76305f8e9a715324614291f5_G_2 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[1];
            float _Split_f392619d76305f8e9a715324614291f5_B_3 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[2];
            float _Split_f392619d76305f8e9a715324614291f5_A_4 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[3];
            float4 _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4;
            float3 _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5;
            float2 _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6;
            Unity_Combine_float(_Split_f392619d76305f8e9a715324614291f5_R_1, _Split_f392619d76305f8e9a715324614291f5_G_2, 0, 0, _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4, _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5, _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6);
            float2 _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2;
            Unity_Multiply_float2_float2((_Property_e5176656505ae98292b155cb230ab233_Out_0.xx), _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6, _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2);
            float _Property_f0b2859614d93f86b920c65decb52ecf_Out_0 = _Ice_Noise_Distortion;
            UnityTexture2D _Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0 = UnityBuildTexture2DStructNoScale(_IceNoiseNormal);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv0 = IN.uv0;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv2 = IN.uv2;
            float4 _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2);
            float _Split_1c2740a46a2f0281ab926911287ce711_R_1 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[0];
            float _Split_1c2740a46a2f0281ab926911287ce711_G_2 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[1];
            float _Split_1c2740a46a2f0281ab926911287ce711_B_3 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[2];
            float _Split_1c2740a46a2f0281ab926911287ce711_A_4 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[3];
            float4 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4;
            float3 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5;
            float2 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6;
            Unity_Combine_float(_Split_1c2740a46a2f0281ab926911287ce711_R_1, _Split_1c2740a46a2f0281ab926911287ce711_G_2, 0, 0, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6);
            float2 _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2;
            Unity_Multiply_float2_float2((_Property_f0b2859614d93f86b920c65decb52ecf_Out_0.xx), _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2);
            float _Property_852d221028b884858f029fedb8de47d1_Out_0 = _IceNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_852d221028b884858f029fedb8de47d1_Out_0, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1);
            float _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1;
            Unity_Absolute_float(_TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1, _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1);
            float _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0 = _IceNoisePower;
            float _Power_1497f6299359e780a9aa8dde441d98cf_Out_2;
            Unity_Power_float(_Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1, _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0, _Power_1497f6299359e780a9aa8dde441d98cf_Out_2);
            float _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0 = _IceNoiseContrast;
            float3 _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2;
            Unity_Contrast_float((_Power_1497f6299359e780a9aa8dde441d98cf_Out_2.xxx), _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0, _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2);
            float _Split_f399eb1f3ad77580a75b6122d38451b5_R_1 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[0];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_G_2 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[1];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_B_3 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[2];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_A_4 = 0;
            float _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3;
            Unity_Clamp_float(_Split_f399eb1f3ad77580a75b6122d38451b5_R_1, 0, 1, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3);
            float2 _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            Unity_Lerp_float2(_Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xx), _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3);
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_893a7c3932a452849a5239a91f337a35;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv0 = IN.uv0;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv2 = IN.uv2;
            float4 _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_893a7c3932a452849a5239a91f337a35, _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2);
            float _Property_771911a99405a780908dd542012af7b8_Out_0 = _IceParallaxSteps;
            Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float _PlanarNMparallax_e8f8353657858a87933a47a40c74654d;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.uv0 = IN.uv0;
            float4 _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2;
            SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(_Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2);
            float _Property_efee416de222038a93fa523171fb9f0d_Out_0 = _ParalaxOffset;
            float _Property_720bc7e00a412889a10ca999204543f8_Out_0 = _IceParallaxNoiseMin;
            float _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0 = _IceParallaxNoiseMax;
            float _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0 = _IceParallaxNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1);
            float _Lerp_87de925175c62a8986309dc80655ce2f_Out_3;
            Unity_Lerp_float(_Property_720bc7e00a412889a10ca999204543f8_Out_0, _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3);
            float _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3;
            Unity_Lerp_float(_Property_efee416de222038a93fa523171fb9f0d_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3);
            float _Property_acfd17e181f6108ba7921d3e04df886d_Out_0 = _IceDepth;
            float _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0 = _ParallaxFalloff;
            float _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3;
            Unity_Lerp_float(_Property_eede9dad69eea580b2a3fdc05280f02f_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3);
            UnityTexture2D _Property_7c5c99f2c1b340ec980675a076619f86_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            float4 _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2;
            ParallaxLayers_float(_Property_771911a99405a780908dd542012af7b8_Out_0, (_PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2.xy), _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3, _Property_acfd17e181f6108ba7921d3e04df886d_Out_0, IN.TangentSpaceViewDirection, IN.WorldSpaceViewDirection, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _Property_7c5c99f2c1b340ec980675a076619f86_Out_0, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2);
            float4 _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2;
            Unity_Blend_Lighten_float4(_PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2, _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            float3 _HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2 = Unity_HDRP_SampleSceneColor_float(float4(IN.NDCPosition.xy, 0, 0).xy, 0, 1.0);
            float _Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0 = _CleanColorPower;
            float3 _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2;
            Unity_Multiply_float3_float3(_HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2, (_Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0.xxx), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2);
            float4 _Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0 = _DeepColor;
            float4 _Property_7094041d89afbd878cb83460f4ab68b8_Out_0 = _ShalowColor;
            Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c;
            _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c.ScreenPosition = IN.ScreenPosition;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2;
            SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 (0, 0), _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2);
            float _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0 = _ShalowFalloffMultiply;
            float _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0, _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2);
            float _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1;
            Unity_Absolute_float(_Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2, _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1);
            float _Property_e6dd087698d3e984bd5eb642347af797_Out_0 = _ShalowFalloffPower;
            float _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2;
            Unity_Multiply_float_float(_Property_e6dd087698d3e984bd5eb642347af797_Out_0, -1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2);
            float _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2;
            Unity_Power_float(_Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2, _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2);
            float _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1;
            Unity_Saturate_float(_Power_aaf82c5db3291a8bb2095cce38670a92_Out_2, _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1);
            float _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3;
            Unity_Clamp_float(_Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1, 0, 1, _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3);
            float4 _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3;
            Unity_Lerp_float4(_Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0, _Property_7094041d89afbd878cb83460f4ab68b8_Out_0, (_Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3.xxxx), _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3);
            float3 _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2;
            Unity_Multiply_float3_float3((_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2);
            float _Property_22da60d6cbff958696ddee1c161db229_Out_0 = _WaterAlphaMultiply;
            float _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_22da60d6cbff958696ddee1c161db229_Out_0, _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2);
            float _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3;
            Unity_Clamp_float(_Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2, 0, 1, _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3);
            float _Absolute_c4059e430bb17486afd523c0f333e478_Out_1;
            Unity_Absolute_float(_Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3, _Absolute_c4059e430bb17486afd523c0f333e478_Out_1);
            float _Property_cd34ee7769676e85b3e223f0e908967c_Out_0 = _WaterAlphaPower;
            float _Power_2c1f1e86c544138396974457f6515752_Out_2;
            Unity_Power_float(_Absolute_c4059e430bb17486afd523c0f333e478_Out_1, _Property_cd34ee7769676e85b3e223f0e908967c_Out_0, _Power_2c1f1e86c544138396974457f6515752_Out_2);
            float _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3;
            Unity_Clamp_float(_Power_2c1f1e86c544138396974457f6515752_Out_2, 0, 1, _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3);
            float3 _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3;
            Unity_Lerp_float3(_Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2, (_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), (_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3.xxx), _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3);
            float _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0 = _CleanFalloffMultiply;
            float _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0, _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2);
            float _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3;
            Unity_Clamp_float(_Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2, 0, 1, _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3);
            float _Absolute_2efac825a986e28190f26200795ca9ec_Out_1;
            Unity_Absolute_float(_Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3, _Absolute_2efac825a986e28190f26200795ca9ec_Out_1);
            float _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0 = _CleanFalloffPower;
            float _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2;
            Unity_Power_float(_Absolute_2efac825a986e28190f26200795ca9ec_Out_1, _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0, _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2);
            float _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3;
            Unity_Clamp_float(_Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2, 0, 1, _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3);
            float3 _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3;
            Unity_Lerp_float3(_Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3, (_Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3.xxx), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3);
            float3 _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3;
            Unity_Lerp_float3((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3);
            UnityTexture2D _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_256e5676e1089881ae3214634430b140_Out_0 = _DetailTilingOffset;
            float _Split_257d0b6ea953418d97fd7daa8128bf35_R_1 = _Property_256e5676e1089881ae3214634430b140_Out_0[0];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_G_2 = _Property_256e5676e1089881ae3214634430b140_Out_0[1];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_B_3 = _Property_256e5676e1089881ae3214634430b140_Out_0[2];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_A_4 = _Property_256e5676e1089881ae3214634430b140_Out_0[3];
            float2 _Vector2_98295494172421878c7a16cb2baddf9a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_R_1, _Split_257d0b6ea953418d97fd7daa8128bf35_G_2);
            float2 _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_B_3, _Split_257d0b6ea953418d97fd7daa8128bf35_A_4);
            float2 _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_98295494172421878c7a16cb2baddf9a_Out_0, _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0, _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3);
            float4 _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0 = SAMPLE_TEXTURE2D(_Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.tex, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.samplerstate, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.GetTransformedUV(_TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3) );
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.r;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.g;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.b;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.a;
            float _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4, 2, _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2);
            float _Add_fd3efcae64779e848ef39919335cd44d_Out_2;
            Unity_Add_float(_Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2, -1, _Add_fd3efcae64779e848ef39919335cd44d_Out_2);
            float _Property_605f29777330a58ba88ac032e905433b_Out_0 = _DetailAlbedoScale;
            float _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2;
            Unity_Multiply_float_float(_Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Property_605f29777330a58ba88ac032e905433b_Out_0, _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2);
            float _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1;
            Unity_Saturate_float(_Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2, _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1);
            float _Absolute_8acef423205118879e75274a48969d34_Out_1;
            Unity_Absolute_float(_Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1, _Absolute_8acef423205118879e75274a48969d34_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185;
            float3 _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float((float4(_Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3, 1.0)), _Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Absolute_8acef423205118879e75274a48969d34_Out_1, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1);
            float4 _Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0 = _WetColor;
            float3 _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2;
            Unity_Multiply_float3_float3((_Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0.xyz), _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2);
            float _Split_5b2299b48b10138ea40c141b79bfe90e_R_1 = IN.VertexColor[0];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_G_2 = IN.VertexColor[1];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_B_3 = IN.VertexColor[2];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_A_4 = IN.VertexColor[3];
            float _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3;
            Unity_Clamp_float(_Split_5b2299b48b10138ea40c141b79bfe90e_R_1, 0, 1, _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3);
            float _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1;
            Unity_OneMinus_float(_Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1);
            float3 _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            Unity_Lerp_float3(_BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2, (_OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1.xxx), _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3);
            float _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            Unity_Multiply_float_float(_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3, _Split_5b2299b48b10138ea40c141b79bfe90e_A_4, _Multiply_ffa35df91e1277898c1160f454087deb_Out_2);
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAO;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _IceSmoothness;
            float _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0 = _IceCrackSmoothness;
            UnityTexture2D _Property_be61fb085f680285bb171ac957c1d150_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv0 = IN.uv0;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv2 = IN.uv2;
            float4 _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_be61fb085f680285bb171ac957c1d150_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2);
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[0];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_G_2 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[1];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_B_3 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[2];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_A_4 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[3];
            float _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3;
            Unity_Lerp_float(_Property_0edea7916ed7a189a62b0faf2c274601_Out_0, _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0, _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3);
            float _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0 = _IceNoiseSmoothness;
            float _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3;
            Unity_Lerp_float(_Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3, _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3, _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3);
            float _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6, 2, _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2);
            float _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2;
            Unity_Add_float(_Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2, -1, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2);
            float _Property_cea4e47b293a988a83643b43f76c92ba_Out_0 = _DetailSmoothnessScale;
            float _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2;
            Unity_Multiply_float_float(_Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Property_cea4e47b293a988a83643b43f76c92ba_Out_0, _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2);
            float _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1;
            Unity_Saturate_float(_Multiply_2008466558f0e4819e60b3c41d94487c_Out_2, _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1);
            float _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1;
            Unity_Absolute_float(_Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43;
            float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1);
            float _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0 = _WetSmoothness;
            float _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1, _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3);
            float2 _Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0 = float2(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7, _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5);
            float2 _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2;
            Unity_Multiply_float2_float2(_Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0, float2(2, 2), _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2);
            float2 _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2;
            Unity_Add_float2(_Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2, float2(-1, -1), _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2);
            float _Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0 = _DetailNormalScale;
            float2 _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2;
            Unity_Multiply_float2_float2(_Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2, (_Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0.xx), _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2);
            float _Split_c4822b8eaff9b185be7c059792345712_R_1 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[0];
            float _Split_c4822b8eaff9b185be7c059792345712_G_2 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[1];
            float _Split_c4822b8eaff9b185be7c059792345712_B_3 = 0;
            float _Split_c4822b8eaff9b185be7c059792345712_A_4 = 0;
            float _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2;
            Unity_DotProduct_float2(_Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2);
            float _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1;
            Unity_Saturate_float(_DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2, _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1);
            float _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1;
            Unity_OneMinus_float(_Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1, _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1);
            float _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1;
            Unity_SquareRoot_float(_OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float3 _Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0 = float3(_Split_c4822b8eaff9b185be7c059792345712_R_1, _Split_c4822b8eaff9b185be7c059792345712_G_2, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            float _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0 = _NoiseNormalScale;
            float3 _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2.xyz), _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2);
            float3 _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3;
            Unity_Lerp_float3(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3);
            float3 _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            Unity_NormalBlend_float(_Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0, _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3, _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2);
            float _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1;
            Unity_OneMinus_float(_Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1);
            float _Property_42e21c36617ec48ba2d35424c394cb28_Out_0 = _Ice_Thickness;
            float _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2;
            Unity_Multiply_float_float(_OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1, _Property_42e21c36617ec48ba2d35424c394cb28_Out_0, _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2);
            float _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            Unity_Clamp_float(_Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2, 0, 1, _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3);
            surface.Distortion = _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            surface.DistortionBlur = 0;
            surface.BaseColor = _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            surface.TransmissionMask = 1;
            surface.Thickness = _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            surface.DiffusionProfileHash = _DiffusionProfileHash;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.WorldSpacePosition =                         input.positionRWS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.ScreenPosition = ComputeScreenPos(TransformWorldToHClip(input.positionRWS), _ProjectionParams.x);
        
        #if UNITY_UV_STARTS_AT_TOP
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #else
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
            output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
            output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        
            output.uv0 =                                        input.texCoord0;
            output.uv2 =                                        input.texCoord2;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
            surfaceData.thickness =                 surfaceDescription.Thickness;
            surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingGBuffer.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "DebugDXR"
            Tags
            {
                "LightMode" = "DebugDXR"
            }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Hashes.hlsl"
        #include "./NMParallaxLayers.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRayTracingDebug.hlsl"
        
            ENDHLSL
        }
        Pass
        {
            Name "PathTracingDXR"
            Tags
            {
                "LightMode" = "PathTracingDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
            #define FRAG_INPUTS_USE_TEXCOORD0
            #define FRAG_INPUTS_USE_TEXCOORD1
            #define FRAG_INPUTS_USE_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_PATH_TRACING
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define HAS_LIGHTLOOP 1
        #define REQUIRE_DEPTH_TEXTURE
        #define REQUIRE_OPAQUE_TEXTURE
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float _WaterAlphaMultiply;
        float _WaterAlphaPower;
        float _CleanFalloffMultiply;
        float _CleanFalloffPower;
        float _ShalowFalloffMultiply;
        float _ShalowFalloffPower;
        float _CleanColorPower;
        float4 _ShalowColor;
        float4 _DeepColor;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float _IceNoiseScale;
        float _IceNoiseContrast;
        float _IceNoisePower;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _IceNoiseNormal_TexelSize;
        float _NoiseNormalScale;
        float _BaseAO;
        float _IceSmoothness;
        float _IceCrackSmoothness;
        float _IceNoiseSmoothness;
        float4 _ParalaxMap_TexelSize;
        float _ParalaxOffset;
        float _IceParallaxSteps;
        float _IceDepth;
        float _ParallaxFalloff;
        float _IceParallaxNoiseScale;
        float _IceParallaxNoiseMin;
        float _IceParallaxNoiseMax;
        float _Ice_Thickness;
        float _IceDistortion;
        float _Ice_Noise_Distortion;
        float4 _DetailMap_TexelSize;
        float4 _DetailTilingOffset;
        float _DetailAlbedoScale;
        float _DetailNormalScale;
        float _DetailSmoothnessScale;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Linear_Repeat_Aniso8);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_IceNoiseNormal);
        SAMPLER(sampler_IceNoiseNormal);
        TEXTURE2D(_ParalaxMap);
        SAMPLER(sampler_ParalaxMap);
        TEXTURE2D(_DetailMap);
        SAMPLER(sampler_DetailMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitPathTracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Hashes.hlsl"
        #include "./NMParallaxLayers.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 WorldSpaceViewDirection;
             float3 TangentSpaceViewDirection;
             float3 WorldSpacePosition;
             float3 AbsoluteWorldSpacePosition;
             float4 ScreenPosition;
             float2 NDCPosition;
             float2 PixelPosition;
             float4 uv0;
             float4 uv2;
             float4 VertexColor;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_Branch_float4(float Predicate, float4 True, float4 False, out float4 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_058f4fba88c3437288219f1929444bf2_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_43d85b3291324c848dfbeec6adac2a71_Out_0 = IN.uv0;
        float4 _UV_36881dcaab9040168fc5215dcd00f352_Out_0 = IN.uv2;
        float4 _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3;
        Unity_Branch_float4(_Property_058f4fba88c3437288219f1929444bf2_Out_0, _UV_43d85b3291324c848dfbeec6adac2a71_Out_0, _UV_36881dcaab9040168fc5215dcd00f352_Out_0, _Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float((_Branch_8054d58a73be4ce1b22d48a84389ae07_Out_3.xy), _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3) );
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1;
        {
        float3x3 tangentTransform = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, tangentTransform, true);
        }
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        float Unity_SimpleNoise_ValueNoise_LegacySine_float (float2 uv)
        {
        float2 i = floor(uv);
        float2 f = frac(uv);
        f = f * f * (3.0 - 2.0 * f);
        uv = abs(frac(uv) - 0.5);
        float2 c0 = i + float2(0.0, 0.0);
        float2 c1 = i + float2(1.0, 0.0);
        float2 c2 = i + float2(0.0, 1.0);
        float2 c3 = i + float2(1.0, 1.0);
        float r0; Hash_LegacySine_2_1_float(c0, r0);
        float r1; Hash_LegacySine_2_1_float(c1, r1);
        float r2; Hash_LegacySine_2_1_float(c2, r2);
        float r3; Hash_LegacySine_2_1_float(c3, r3);
        float bottomOfGrid = lerp(r0, r1, f.x);
        float topOfGrid = lerp(r2, r3, f.x);
        float t = lerp(bottomOfGrid, topOfGrid, f.y);
        return t;
        }
        
        void Unity_SimpleNoise_LegacySine_float(float2 UV, float Scale, out float Out)
        {
        float freq, amp;
        Out = 0.0f;
        freq = pow(2.0, float(0));
        amp = pow(0.5, float(3-0));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(1));
        amp = pow(0.5, float(3-1));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        freq = pow(2.0, float(2));
        amp = pow(0.5, float(3-2));
        Out += Unity_SimpleNoise_ValueNoise_LegacySine_float(float2(UV.xy*(Scale/freq)))*amp;
        }
        
        void Unity_Absolute_float3(float3 In, out float3 Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float3(float3 A, float3 B, out float3 Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        struct Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float
        {
        float3 WorldSpaceNormal;
        float3 AbsoluteWorldSpacePosition;
        };
        
        void SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(float Vector1_E4D1C13A, float Vector1_CBF4C304, Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float IN, out float XYZ_1)
        {
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float3 _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1);
        float _Split_742547a7039de986a646d04c157ae549_R_1 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[0];
        float _Split_742547a7039de986a646d04c157ae549_G_2 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[1];
        float _Split_742547a7039de986a646d04c157ae549_B_3 = _Sign_b826e0ff2d95ec8cb2b2cbbd7ea2eab6_Out_1[2];
        float _Split_742547a7039de986a646d04c157ae549_A_4 = 0;
        float2 _Vector2_40a8919e571ec18499de72022c155b38_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_G_2, 1);
        float2 _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2;
        Unity_Multiply_float2_float2((_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4.xy), _Vector2_40a8919e571ec18499de72022c155b38_Out_0, _Multiply_5fa32af59cdca88389832336b2268bd5_Out_2);
        float _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0 = Vector1_CBF4C304;
        float _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_5fa32af59cdca88389832336b2268bd5_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2);
        float3 _Absolute_644b798714827680b39bf5d34f70385f_Out_1;
        Unity_Absolute_float3(IN.WorldSpaceNormal, _Absolute_644b798714827680b39bf5d34f70385f_Out_1);
        float _Property_adc4c59482221c8aad681c6558728ac9_Out_0 = Vector1_E4D1C13A;
        float3 _Power_ee478822a04529849ae8df1636c29fe2_Out_2;
        Unity_Power_float3(_Absolute_644b798714827680b39bf5d34f70385f_Out_1, (_Property_adc4c59482221c8aad681c6558728ac9_Out_0.xxx), _Power_ee478822a04529849ae8df1636c29fe2_Out_2);
        float3 _Multiply_b386a937554d73828e437d126d69608b_Out_2;
        Unity_Multiply_float3_float3(_Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Power_ee478822a04529849ae8df1636c29fe2_Out_2, _Multiply_b386a937554d73828e437d126d69608b_Out_2);
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[0];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[1];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3 = _Multiply_b386a937554d73828e437d126d69608b_Out_2[2];
        float _Split_ae83014fcbd9f7879a0b91fa66dc9718_A_4 = 0;
        float _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_0e7b58280659be8c8ca8f9afb8e0ca3b_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2);
        float4 _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4;
        float3 _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5;
        float2 _Combine_192c2c4a69be588b90ca005a32e22552_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4, _Combine_192c2c4a69be588b90ca005a32e22552_RGB_5, _Combine_192c2c4a69be588b90ca005a32e22552_RG_6);
        float _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2;
        Unity_Multiply_float_float(_Split_742547a7039de986a646d04c157ae549_B_3, -1, _Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2);
        float2 _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0 = float2(_Multiply_014402ded5a3988a8c18ba07636ea5a7_Out_2, 1);
        float2 _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2;
        Unity_Multiply_float2_float2((_Combine_192c2c4a69be588b90ca005a32e22552_RGBA_4.xy), _Vector2_caa25d55d456a58982bdfc39b1b43f3f_Out_0, _Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2);
        float _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_a67201b6e1a0a28c98cd9d06e8b09543_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2);
        float _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_88ae991d8653e086af3b82e51f2955ef_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2);
        float4 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4;
        float3 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5;
        float2 _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_B_3, _Split_89ed63cb625cb3878c183d0b71c03400_G_2, 0, 0, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGB_5, _Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RG_6);
        float2 _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0 = float2(_Split_742547a7039de986a646d04c157ae549_R_1, 1);
        float2 _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2;
        Unity_Multiply_float2_float2((_Combine_1e9ffdba42d6918fb7a4b185f1585d2a_RGBA_4.xy), _Vector2_54dfd40df2fc78809955dd272f2cf0c3_Out_0, _Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2);
        float _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2;
        Unity_SimpleNoise_LegacySine_float(_Multiply_addbd5fcede95f80bbb806c94e49ef63_Out_2, _Property_c11cebe3c88d6b87bb35406f7a2f70a2_Out_0, _SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2);
        float _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2;
        Unity_Multiply_float_float(_SimpleNoise_6f991cff7666da838f92bf955d096b48_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2);
        float _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2;
        Unity_Add_float(_Multiply_7bb4009c92b108849ac6ca92bc1442f2_Out_2, _Multiply_77818c22e359fc8cbb7dd20216a8db72_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2);
        float _Add_14295f72880e4b87a1baf1ced943ac40_Out_2;
        Unity_Add_float(_Multiply_2e1040ca9c98d085ace76ee93f094039_Out_2, _Add_769d9ee909c9238dbbf72d2800a2f268_Out_2, _Add_14295f72880e4b87a1baf1ced943ac40_Out_2);
        float _Add_e59af300bba2498db32eac1412123447_Out_2;
        Unity_Add_float(_Split_ae83014fcbd9f7879a0b91fa66dc9718_R_1, _Split_ae83014fcbd9f7879a0b91fa66dc9718_G_2, _Add_e59af300bba2498db32eac1412123447_Out_2);
        float _Add_e855069f047fae8ea9027d56acb61e56_Out_2;
        Unity_Add_float(_Add_e59af300bba2498db32eac1412123447_Out_2, _Split_ae83014fcbd9f7879a0b91fa66dc9718_B_3, _Add_e855069f047fae8ea9027d56acb61e56_Out_2);
        float _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        Unity_Divide_float(_Add_14295f72880e4b87a1baf1ced943ac40_Out_2, _Add_e855069f047fae8ea9027d56acb61e56_Out_2, _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2);
        XYZ_1 = _Divide_91ae4b94f1d9b78e99d0472293b8098c_Out_2;
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Contrast_float(float3 In, float Contrast, out float3 Out)
        {
            float midpoint = pow(0.5, 2.2);
            Out =  (In - midpoint) * Contrast + midpoint;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Lerp_float2(float2 A, float2 B, float2 T, out float2 Out)
        {
            Out = lerp(A, B, T);
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        half4 uv2;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, float Boolean_5ddfe6daabcc4715a44b5f34fc19becb, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float _Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0 = Boolean_5ddfe6daabcc4715a44b5f34fc19becb;
        float4 _UV_029e8e8198564838b9389b902a09fb22_Out_0 = IN.uv0;
        float4 _UV_7a6209af1506424fb75c81e87e42035a_Out_0 = IN.uv2;
        float4 _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3;
        Unity_Branch_float4(_Property_f17c7bf877e64b6abdd66b1fe9f5accc_Out_0, _UV_029e8e8198564838b9389b902a09fb22_Out_0, _UV_7a6209af1506424fb75c81e87e42035a_Out_0, _Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float((_Branch_fc37bb4bf641457cbbc6e290603056ff_Out_3.xy), _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3) );
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        struct Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float IN, out float4 XZ_2)
        {
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        XZ_2 = (float4(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3, 0.0, 1.0));
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Blend_Lighten_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            Out = max(Blend, Base);
            Out = lerp(Base, Out, Opacity);
        }
        
        float3 Unity_HDRP_SampleSceneColor_float(float2 uv, float lod, float exposureMultiplier)
        {
            exposureMultiplier = 1.0;
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(_SURFACE_TYPE_TRANSPARENT) && defined(SHADERPASS) && (SHADERPASS != SHADERPASS_LIGHT_TRANSPORT) && (SHADERPASS != SHADERPASS_PATH_TRACING) && (SHADERPASS != SHADERPASS_RAYTRACING_VISIBILITY) && (SHADERPASS != SHADERPASS_RAYTRACING_FORWARD)
            return SampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            #if defined(REQUIRE_OPAQUE_TEXTURE) && defined(CUSTOM_PASS_SAMPLING_HLSL) && defined(SHADERPASS) && (SHADERPASS == SHADERPASS_DRAWPROCEDURAL || SHADERPASS == SHADERPASS_BLIT)
            return CustomPassSampleCameraColor(uv, lod) * exposureMultiplier;
            #endif
            return float3(0.0, 0.0, 0.0);
        }
        
        void Unity_Comparison_Greater_float(float A, float B, out float Out)
        {
            Out = A > B ? 1 : 0;
        }
        
        void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float
        {
        float4 ScreenPosition;
        };
        
        void SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float IN, out float2 OutVector2_1)
        {
        float4 _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0 = IN.ScreenPosition;
        float _Split_b183780fdd2343708af64846c96ee2a7_R_1 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[0];
        float _Split_b183780fdd2343708af64846c96ee2a7_G_2 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[1];
        float _Split_b183780fdd2343708af64846c96ee2a7_B_3 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[2];
        float _Split_b183780fdd2343708af64846c96ee2a7_A_4 = _ScreenPosition_e8854004f7c84ca6b0ae5e0634e43991_Out_0[3];
        float2 _Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0 = float2(_Split_b183780fdd2343708af64846c96ee2a7_R_1, _Split_b183780fdd2343708af64846c96ee2a7_G_2);
        float2 _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        Unity_Divide_float2(_Vector2_6dd19d4505434bdbbd4800c0288161b8_Out_0, (_Split_b183780fdd2343708af64846c96ee2a7_A_4.xx), _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2);
        OutVector2_1 = _Divide_cfcecb4fab3f488e9c147f35ab04393c_Out_2;
        }
        
        void Unity_SceneDepth_Raw_float(float4 UV, out float Out)
        {
            Out = SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void GetClipValues_float(out float2 Out){
        Out = float2(
        
        UNITY_NEAR_CLIP_VALUE,
        
        UNITY_RAW_FAR_CLIP_VALUE
        
        );
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
        {
            Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
        }
        
        struct Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float
        {
        float4 ScreenPosition;
        };
        
        void SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 _DistortionUV, Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float IN, out float Out_Depth_1, out float Out_DepthDistortion_2)
        {
        float _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2;
        Unity_Comparison_Greater_float(unity_OrthoParams.w, 0, _Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2);
        float _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2;
        Unity_Comparison_Greater_float(_ProjectionParams.x, 0, _Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2);
        Bindings_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff;
        _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff.ScreenPosition = IN.ScreenPosition;
        half2 _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1;
        SG_ScreenPositionDefaultFix_14b7a9220cd562642bb5ca4e6e363770_float(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff, _ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1);
        float _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1;
        Unity_SceneDepth_Raw_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1);
        float _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1;
        Unity_OneMinus_float(_SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1);
        float _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_6fe53cd00c8e44ec9419827b739c5999_Out_1, _OneMinus_af72815d977e4523b2215afd286e7a06_Out_1, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3);
        float _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_bf486b3b6118472fbf8e4f051cb27ee8_Out_3, _Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3);
        float4 _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0 = IN.ScreenPosition;
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_62277fd721f74a399bd1009f8b3cb8e3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float2 _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0;
        GetClipValues_float(_GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0);
        float _Remap_1907dbd4ae754843a5d74245135e2923_Out_3;
        Unity_Remap_float(_Split_62277fd721f74a399bd1009f8b3cb8e3_B_3, _GetClipValuesCustomFunction_81a683b70b2c40e697034db9303cd697_Out_0, float2 (0, 1), _Remap_1907dbd4ae754843a5d74245135e2923_Out_3);
        float _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Remap_1907dbd4ae754843a5d74245135e2923_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3);
        float _Subtract_b98f5f0e27014160829b37533239eca2_Out_2;
        Unity_Subtract_float(_Lerp_69aceedd19ff4eab82ca8871df668e7d_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_b98f5f0e27014160829b37533239eca2_Out_2);
        float _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1;
        Unity_Saturate_float(_Subtract_b98f5f0e27014160829b37533239eca2_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1);
        float _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_ScreenPositionDefaultFix_10d639c887134602b839450ed51f3fff_OutVector2_1, 0.0, 1.0)), _SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1);
        float _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2;
        Unity_Multiply_float_float(_SceneDepth_fbdb86649cb648d5a0b14fe96d1a4aaa_Out_1, _ProjectionParams.z, _Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2);
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_R_1 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[0];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_G_2 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[1];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_B_3 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[2];
        float _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4 = _ScreenPosition_bee0465ff8f44c37a1d3c33e60259869_Out_0[3];
        float _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2;
        Unity_Subtract_float(_Multiply_a09f3cb241a0445e9172911ea60b1176_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2);
        float _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_b1b2516521e947caae8cd2a91d4d96ca_Out_1, _Subtract_270f2b4ef4ec46dda4dc793ad9b9d91f_Out_2, _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3);
        float2 _Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0 = _DistortionUV;
        float _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1;
        Unity_SceneDepth_Raw_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1);
        float _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1;
        Unity_OneMinus_float(_SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1);
        float _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3;
        Unity_Branch_float(_Comparison_d96395b3e72040e188ca478af6a1c33c_Out_2, _SceneDepth_5a411fe90bf444ff9ea01103c79c63f5_Out_1, _OneMinus_00d8ea9ce94c4a4e91e0e165cc8555fa_Out_1, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3);
        float _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3;
        Unity_Lerp_float(_ProjectionParams.y, _ProjectionParams.z, _Branch_4527348cee674ed3b9c07200ba2aa77c_Out_3, _Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3);
        float _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2;
        Unity_Subtract_float(_Lerp_2e0415cdfe7648d7a827c18c172a80bd_Out_3, _Lerp_c0ff8fdca15244b8928cae7c04ed3c8a_Out_3, _Subtract_4531c88bf2b147d7a2998422330b141f_Out_2);
        float _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1;
        Unity_Saturate_float(_Subtract_4531c88bf2b147d7a2998422330b141f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1);
        float _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1;
        Unity_SceneDepth_Linear01_float((float4(_Property_dabc6529d2e346d7bdfb05e1196afe0b_Out_0, 0.0, 1.0)), _SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1);
        float _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2;
        Unity_Multiply_float_float(_SceneDepth_7bc3d353f7a74bdea0b565695ec7001f_Out_1, _ProjectionParams.z, _Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2);
        float _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2;
        Unity_Subtract_float(_Multiply_a22f1a08343e4f52922a1b5d1eb1afd5_Out_2, _Split_3ca0bff404aa485a9fc20ea40bd8fbf3_A_4, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2);
        float _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        Unity_Branch_float(_Comparison_985e0c3c97f94010884b675fbb75d53f_Out_2, _Saturate_2ac9ee3a21914e27a6458dab397f424a_Out_1, _Subtract_22f51bcf15214d0198f877bc2e3eb95c_Out_2, _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3);
        Out_Depth_1 = _Branch_ebe5a68892494ba1936d0ea3513c3689_Out_3;
        Out_DepthDistortion_2 = _Branch_2602a4d77dc140b3a8ea443bd691dcdd_Out_3;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_SquareRoot_float4(float4 In, out float4 Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_Sign_float(float In, out float Out)
        {
            Out = sign(In);
        }
        
        void Unity_Ceiling_float(float In, out float Out)
        {
            Out = ceil(In);
        }
        
        struct Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float
        {
        };
        
        void SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float(float4 Color_9AA111D3, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float IN, out float3 OutVector4_1)
        {
        float4 _Property_012510d774fb7f8b860f5270dca4500f_Out_0 = Color_9AA111D3;
        float4 _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1;
        Unity_SquareRoot_float4(_Property_012510d774fb7f8b860f5270dca4500f_Out_0, _SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1);
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2;
        Unity_Multiply_float_float(_Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2);
        float4 _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float4(_SquareRoot_c2c57d0223a9538aa9240890c3cacb0c_Out_1, (_Ceiling_95ad15988aa9b98184875fa754feae01_Out_1.xxxx), (_Multiply_9564ecda5193bc8286d9ff771c9226cd_Out_2.xxxx), _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        float4 _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2;
        Unity_Multiply_float4_float4(_Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3, _Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2);
        OutVector4_1 = (_Multiply_39d1daff98488f8ea2cd794ad4f20926_Out_2.xyz);
        }
        
        struct Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float
        {
        };
        
        void SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(float Vector1_32317166, float Vector1_FBE622A2, float Vector1_8C15C351, Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float IN, out float SmoothnessOverlay_1)
        {
        float _Property_728cc50521e9e988ac9cbff4872d5139_Out_0 = Vector1_32317166;
        float _Property_a00e29241d12f983b30177515b367ec9_Out_0 = Vector1_FBE622A2;
        float _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1;
        Unity_Sign_float(_Property_a00e29241d12f983b30177515b367ec9_Out_0, _Sign_343a45ede7349283a681c6bd9998fd8e_Out_1);
        float _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2;
        Unity_Add_float(_Sign_343a45ede7349283a681c6bd9998fd8e_Out_1, 1, _Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2);
        float _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2;
        Unity_Multiply_float_float(_Add_681019b8f5d3d68bb482d419c9fc61a9_Out_2, 0.5, _Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2);
        float _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1;
        Unity_Ceiling_float(_Multiply_e8f4cb722712a880ac0db6c7461427f7_Out_2, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1);
        float _Property_2db1c747a05ee284a8b00076062f91a4_Out_0 = Vector1_8C15C351;
        float _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        Unity_Lerp_float(_Property_728cc50521e9e988ac9cbff4872d5139_Out_0, _Ceiling_95ad15988aa9b98184875fa754feae01_Out_1, _Property_2db1c747a05ee284a8b00076062f91a4_Out_0, _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3);
        SmoothnessOverlay_1 = _Lerp_b3cdb01fc3c5b988ac9b184943bf7c01_Out_3;
        }
        
        void Unity_DotProduct_float2(float2 A, float2 B, out float Out)
        {
            Out = dot(A, B);
        }
        
        void Unity_SquareRoot_float(float In, out float Out)
        {
            Out = sqrt(In);
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float2 Distortion;
            float DistortionBlur;
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            float _Property_e5176656505ae98292b155cb230ab233_Out_0 = _IceDistortion;
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_11506852e45cbb8f9732aebed8bbb210;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv0 = IN.uv0;
            _PlanarNMn_11506852e45cbb8f9732aebed8bbb210.uv2 = IN.uv2;
            float4 _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210, _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2);
            float _Split_f392619d76305f8e9a715324614291f5_R_1 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[0];
            float _Split_f392619d76305f8e9a715324614291f5_G_2 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[1];
            float _Split_f392619d76305f8e9a715324614291f5_B_3 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[2];
            float _Split_f392619d76305f8e9a715324614291f5_A_4 = _PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2[3];
            float4 _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4;
            float3 _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5;
            float2 _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6;
            Unity_Combine_float(_Split_f392619d76305f8e9a715324614291f5_R_1, _Split_f392619d76305f8e9a715324614291f5_G_2, 0, 0, _Combine_ffa1d5099d929288a6826e1795857ed4_RGBA_4, _Combine_ffa1d5099d929288a6826e1795857ed4_RGB_5, _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6);
            float2 _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2;
            Unity_Multiply_float2_float2((_Property_e5176656505ae98292b155cb230ab233_Out_0.xx), _Combine_ffa1d5099d929288a6826e1795857ed4_RG_6, _Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2);
            float _Property_f0b2859614d93f86b920c65decb52ecf_Out_0 = _Ice_Noise_Distortion;
            UnityTexture2D _Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0 = UnityBuildTexture2DStructNoScale(_IceNoiseNormal);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv0 = IN.uv0;
            _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc.uv2 = IN.uv2;
            float4 _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_18f0f01e1e17cf87a7ebcd949e011c50_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc, _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2);
            float _Split_1c2740a46a2f0281ab926911287ce711_R_1 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[0];
            float _Split_1c2740a46a2f0281ab926911287ce711_G_2 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[1];
            float _Split_1c2740a46a2f0281ab926911287ce711_B_3 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[2];
            float _Split_1c2740a46a2f0281ab926911287ce711_A_4 = _PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2[3];
            float4 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4;
            float3 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5;
            float2 _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6;
            Unity_Combine_float(_Split_1c2740a46a2f0281ab926911287ce711_R_1, _Split_1c2740a46a2f0281ab926911287ce711_G_2, 0, 0, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGBA_4, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RGB_5, _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6);
            float2 _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2;
            Unity_Multiply_float2_float2((_Property_f0b2859614d93f86b920c65decb52ecf_Out_0.xx), _Combine_59fe8c3f75bca586b73ccae403ed0dd0_RG_6, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2);
            float _Property_852d221028b884858f029fedb8de47d1_Out_0 = _IceNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_852d221028b884858f029fedb8de47d1_Out_0, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b, _TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1);
            float _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1;
            Unity_Absolute_float(_TriplanarNMNoise_d9dabd43450d5c8595fb4cc8af5a9b5b_XYZ_1, _Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1);
            float _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0 = _IceNoisePower;
            float _Power_1497f6299359e780a9aa8dde441d98cf_Out_2;
            Unity_Power_float(_Absolute_a7dfccd396cb61888c16cea510a7f519_Out_1, _Property_df6feda9e5377a89a942c1f7636f1e96_Out_0, _Power_1497f6299359e780a9aa8dde441d98cf_Out_2);
            float _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0 = _IceNoiseContrast;
            float3 _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2;
            Unity_Contrast_float((_Power_1497f6299359e780a9aa8dde441d98cf_Out_2.xxx), _Property_a956e66de9f6cf8b87e64439b746f1c9_Out_0, _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2);
            float _Split_f399eb1f3ad77580a75b6122d38451b5_R_1 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[0];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_G_2 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[1];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_B_3 = _Contrast_4024e4b32e83d98fb27ed40d4f36eefb_Out_2[2];
            float _Split_f399eb1f3ad77580a75b6122d38451b5_A_4 = 0;
            float _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3;
            Unity_Clamp_float(_Split_f399eb1f3ad77580a75b6122d38451b5_R_1, 0, 1, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3);
            float2 _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            Unity_Lerp_float2(_Multiply_2410d6f4b2d8a883a12662b5ab734011_Out_2, _Multiply_172bb34867fc2d87b4c285f1d3d71d43_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xx), _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3);
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_893a7c3932a452849a5239a91f337a35;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv0 = IN.uv0;
            _PlanarNM_893a7c3932a452849a5239a91f337a35.uv2 = IN.uv2;
            float4 _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_893a7c3932a452849a5239a91f337a35, _PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2);
            float _Property_771911a99405a780908dd542012af7b8_Out_0 = _IceParallaxSteps;
            Bindings_PlanarNMparallax_e1166d251b71417469a121875a845180_float _PlanarNMparallax_e8f8353657858a87933a47a40c74654d;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMparallax_e8f8353657858a87933a47a40c74654d.uv0 = IN.uv0;
            float4 _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2;
            SG_PlanarNMparallax_e1166d251b71417469a121875a845180_float(_Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d, _PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2);
            float _Property_efee416de222038a93fa523171fb9f0d_Out_0 = _ParalaxOffset;
            float _Property_720bc7e00a412889a10ca999204543f8_Out_0 = _IceParallaxNoiseMin;
            float _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0 = _IceParallaxNoiseMax;
            float _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0 = _IceParallaxNoiseScale;
            Bindings_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.WorldSpaceNormal = IN.WorldSpaceNormal;
            _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            float _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1;
            SG_TriplanarNMNoise_1831d3bdba78d68499d25c34379bcc3e_float(4, _Property_99873eff650d6e89849f8aa6330fa9cf_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1);
            float _Lerp_87de925175c62a8986309dc80655ce2f_Out_3;
            Unity_Lerp_float(_Property_720bc7e00a412889a10ca999204543f8_Out_0, _Property_ec27f3a0ab3e9d848017cc0d4fc13f20_Out_0, _TriplanarNMNoise_cc9a67980c1cb48c8e06187c5164566b_XYZ_1, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3);
            float _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3;
            Unity_Lerp_float(_Property_efee416de222038a93fa523171fb9f0d_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3);
            float _Property_acfd17e181f6108ba7921d3e04df886d_Out_0 = _IceDepth;
            float _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0 = _ParallaxFalloff;
            float _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3;
            Unity_Lerp_float(_Property_eede9dad69eea580b2a3fdc05280f02f_Out_0, 0, _Lerp_87de925175c62a8986309dc80655ce2f_Out_3, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3);
            UnityTexture2D _Property_7c5c99f2c1b340ec980675a076619f86_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            float4 _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2;
            ParallaxLayers_float(_Property_771911a99405a780908dd542012af7b8_Out_0, (_PlanarNMparallax_e8f8353657858a87933a47a40c74654d_XZ_2.xy), _Lerp_1e424454311ced8eb7ed8fb2e1a1c54e_Out_3, _Property_acfd17e181f6108ba7921d3e04df886d_Out_0, IN.TangentSpaceViewDirection, IN.WorldSpaceViewDirection, _Lerp_b366f3fe289156818a5f95d3160c5204_Out_3, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, _Property_7c5c99f2c1b340ec980675a076619f86_Out_0, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2);
            float4 _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2;
            Unity_Blend_Lighten_float4(_PlanarNM_893a7c3932a452849a5239a91f337a35_XZ_2, _ParallaxLayersCustomFunction_ec5469e08f93178cbe9a45517f7b2921_Out_2, _Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_eede9dad69eea580b2a3fdc05280f02f_Out_0);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_Blend_fbdc6b1c3b073780a1c18c93cce4b655_Out_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            float3 _HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2 = Unity_HDRP_SampleSceneColor_float(float4(IN.NDCPosition.xy, 0, 0).xy, 0, 1.0);
            float _Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0 = _CleanColorPower;
            float3 _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2;
            Unity_Multiply_float3_float3(_HDSceneColor_cc61f37e10bcd487895dff278a02899e_Output_2, (_Property_4c58c2cfbe23908bb7d92b95c88fd39d_Out_0.xxx), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2);
            float4 _Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0 = _DeepColor;
            float4 _Property_7094041d89afbd878cb83460f4ab68b8_Out_0 = _ShalowColor;
            Bindings_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c;
            _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c.ScreenPosition = IN.ScreenPosition;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1;
            float _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2;
            SG_DepthTestAdvanced_f9f335495d6a0234fa99f642ff3ba88c_float(float2 (0, 0), _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepthDistortion_2);
            float _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0 = _ShalowFalloffMultiply;
            float _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_d45faccb9a8eb38699cf047ce0e1bb91_Out_0, _Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2);
            float _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1;
            Unity_Absolute_float(_Multiply_09842a1e2e3dab8097df031fcbac3009_Out_2, _Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1);
            float _Property_e6dd087698d3e984bd5eb642347af797_Out_0 = _ShalowFalloffPower;
            float _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2;
            Unity_Multiply_float_float(_Property_e6dd087698d3e984bd5eb642347af797_Out_0, -1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2);
            float _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2;
            Unity_Power_float(_Absolute_c9feaf529682ca80b82407b0d7b43670_Out_1, _Multiply_becf2d84b3023389befca89c1a80edcf_Out_2, _Power_aaf82c5db3291a8bb2095cce38670a92_Out_2);
            float _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1;
            Unity_Saturate_float(_Power_aaf82c5db3291a8bb2095cce38670a92_Out_2, _Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1);
            float _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3;
            Unity_Clamp_float(_Saturate_ad5b4b8242b08088a70a691ffa09f856_Out_1, 0, 1, _Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3);
            float4 _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3;
            Unity_Lerp_float4(_Property_4bd0c6ca665a3d8c94ecdc6712294e47_Out_0, _Property_7094041d89afbd878cb83460f4ab68b8_Out_0, (_Clamp_f5baa0daace6e28ea726519de4641bc4_Out_3.xxxx), _Lerp_bff7238223fec786b08d9cf92a09754c_Out_3);
            float3 _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2;
            Unity_Multiply_float3_float3((_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), _Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2);
            float _Property_22da60d6cbff958696ddee1c161db229_Out_0 = _WaterAlphaMultiply;
            float _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_22da60d6cbff958696ddee1c161db229_Out_0, _Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2);
            float _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3;
            Unity_Clamp_float(_Multiply_bf5d4e2e314909829fe2ff9014877be3_Out_2, 0, 1, _Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3);
            float _Absolute_c4059e430bb17486afd523c0f333e478_Out_1;
            Unity_Absolute_float(_Clamp_3ea1474685f2dc84aa87adae458076e1_Out_3, _Absolute_c4059e430bb17486afd523c0f333e478_Out_1);
            float _Property_cd34ee7769676e85b3e223f0e908967c_Out_0 = _WaterAlphaPower;
            float _Power_2c1f1e86c544138396974457f6515752_Out_2;
            Unity_Power_float(_Absolute_c4059e430bb17486afd523c0f333e478_Out_1, _Property_cd34ee7769676e85b3e223f0e908967c_Out_0, _Power_2c1f1e86c544138396974457f6515752_Out_2);
            float _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3;
            Unity_Clamp_float(_Power_2c1f1e86c544138396974457f6515752_Out_2, 0, 1, _Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3);
            float3 _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3;
            Unity_Lerp_float3(_Multiply_68323b2eef0a378e94e0dc4529e5212b_Out_2, (_Lerp_bff7238223fec786b08d9cf92a09754c_Out_3.xyz), (_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3.xxx), _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3);
            float _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0 = _CleanFalloffMultiply;
            float _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2;
            Unity_Multiply_float_float(_DepthTestAdvanced_887d16f048a54cf19ce80c5165690a8c_OutDepth_1, _Property_a887c93266ebda8fbf7fa2426fd08088_Out_0, _Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2);
            float _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3;
            Unity_Clamp_float(_Multiply_1727b2cc4cab2b889161b05cede2a830_Out_2, 0, 1, _Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3);
            float _Absolute_2efac825a986e28190f26200795ca9ec_Out_1;
            Unity_Absolute_float(_Clamp_b1b90ad6d1d94a8d928998aae0fc2a0f_Out_3, _Absolute_2efac825a986e28190f26200795ca9ec_Out_1);
            float _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0 = _CleanFalloffPower;
            float _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2;
            Unity_Power_float(_Absolute_2efac825a986e28190f26200795ca9ec_Out_1, _Property_150ab2ec8c4a8983b5372fb8ee1209a7_Out_0, _Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2);
            float _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3;
            Unity_Clamp_float(_Power_f4a310d75a76d28bb72f53cb07b7cf22_Out_2, 0, 1, _Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3);
            float3 _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3;
            Unity_Lerp_float3(_Multiply_a4f240bd7666558280af7f24150a84bb_Out_2, _Lerp_7d6667b75195e08098a53683b6d6d887_Out_3, (_Clamp_1b643e9f17afdf8eb0042c0268373325_Out_3.xxx), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3);
            float3 _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3;
            Unity_Lerp_float3((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Lerp_70bfc77a9388cd829e05b11ae0140006_Out_3, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3);
            UnityTexture2D _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0 = UnityBuildTexture2DStructNoScale(_DetailMap);
            float4 _Property_256e5676e1089881ae3214634430b140_Out_0 = _DetailTilingOffset;
            float _Split_257d0b6ea953418d97fd7daa8128bf35_R_1 = _Property_256e5676e1089881ae3214634430b140_Out_0[0];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_G_2 = _Property_256e5676e1089881ae3214634430b140_Out_0[1];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_B_3 = _Property_256e5676e1089881ae3214634430b140_Out_0[2];
            float _Split_257d0b6ea953418d97fd7daa8128bf35_A_4 = _Property_256e5676e1089881ae3214634430b140_Out_0[3];
            float2 _Vector2_98295494172421878c7a16cb2baddf9a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_R_1, _Split_257d0b6ea953418d97fd7daa8128bf35_G_2);
            float2 _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0 = float2(_Split_257d0b6ea953418d97fd7daa8128bf35_B_3, _Split_257d0b6ea953418d97fd7daa8128bf35_A_4);
            float2 _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3;
            Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_98295494172421878c7a16cb2baddf9a_Out_0, _Vector2_130e8faa59837a81a7506636fcb30b8a_Out_0, _TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3);
            float4 _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0 = SAMPLE_TEXTURE2D(_Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.tex, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.samplerstate, _Property_50403cc6b1e3998a82afc21c6a6332ae_Out_0.GetTransformedUV(_TilingAndOffset_1dfb2b4859ec3680ad3a74cf8f1bc17b_Out_3) );
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.r;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.g;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.b;
            float _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7 = _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_RGBA_0.a;
            float _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_R_4, 2, _Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2);
            float _Add_fd3efcae64779e848ef39919335cd44d_Out_2;
            Unity_Add_float(_Multiply_52f8b5b58fa8038aa7f5e6bd44a5987b_Out_2, -1, _Add_fd3efcae64779e848ef39919335cd44d_Out_2);
            float _Property_605f29777330a58ba88ac032e905433b_Out_0 = _DetailAlbedoScale;
            float _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2;
            Unity_Multiply_float_float(_Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Property_605f29777330a58ba88ac032e905433b_Out_0, _Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2);
            float _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1;
            Unity_Saturate_float(_Multiply_e2f43f3d32aa118aa7a6ae4764d42b26_Out_2, _Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1);
            float _Absolute_8acef423205118879e75274a48969d34_Out_1;
            Unity_Absolute_float(_Saturate_7c8334fd3d10d0819f8e616286670f68_Out_1, _Absolute_8acef423205118879e75274a48969d34_Out_1);
            Bindings_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185;
            float3 _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1;
            SG_BlendOverlayBaseColor_acdb3dfca72bd6b42bbc35f4613331a2_float((float4(_Lerp_1c64acb6f67d3780b4f4de14046b8c10_Out_3, 1.0)), _Add_fd3efcae64779e848ef39919335cd44d_Out_2, _Absolute_8acef423205118879e75274a48969d34_Out_1, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185, _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1);
            float4 _Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0 = _WetColor;
            float3 _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2;
            Unity_Multiply_float3_float3((_Property_b3a0f629ac3f4c84be44eb113c15ef93_Out_0.xyz), _BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2);
            float _Split_5b2299b48b10138ea40c141b79bfe90e_R_1 = IN.VertexColor[0];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_G_2 = IN.VertexColor[1];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_B_3 = IN.VertexColor[2];
            float _Split_5b2299b48b10138ea40c141b79bfe90e_A_4 = IN.VertexColor[3];
            float _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3;
            Unity_Clamp_float(_Split_5b2299b48b10138ea40c141b79bfe90e_R_1, 0, 1, _Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3);
            float _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1;
            Unity_OneMinus_float(_Clamp_922c5e46ca34b68a8eaf1cf3639fe4ae_Out_3, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1);
            float3 _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            Unity_Lerp_float3(_BlendOverlayBaseColor_66b5af480b0a3288ba91497f7c750185_OutVector4_1, _Multiply_388c575a3467b88ab4d3719bf2b02ad5_Out_2, (_OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1.xxx), _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3);
            float _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            Unity_Multiply_float_float(_Clamp_74f7e1e8f9f75d82afadcb8f37dde846_Out_3, _Split_5b2299b48b10138ea40c141b79bfe90e_A_4, _Multiply_ffa35df91e1277898c1160f454087deb_Out_2);
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAO;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _IceSmoothness;
            float _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0 = _IceCrackSmoothness;
            UnityTexture2D _Property_be61fb085f680285bb171ac957c1d150_Out_0 = UnityBuildTexture2DStructNoScale(_ParalaxMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv0 = IN.uv0;
            _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c.uv2 = IN.uv2;
            float4 _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_be61fb085f680285bb171ac957c1d150_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_122c0f9ef0a1c4818a140c75e512abe4_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat_Aniso8), 1, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c, _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2);
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[0];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_G_2 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[1];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_B_3 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[2];
            float _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_A_4 = _PlanarNM_8bdaac0074d41786b1f86fefb4295b3c_XZ_2[3];
            float _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3;
            Unity_Lerp_float(_Property_0edea7916ed7a189a62b0faf2c274601_Out_0, _Property_1a0bf713a75e068aacef13a95a7ea011_Out_0, _Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3);
            float _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0 = _IceNoiseSmoothness;
            float _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3;
            Unity_Lerp_float(_Lerp_99e1105aeec5c981bdda0260115c2cfa_Out_3, _Property_eff8621aba14e2838e2bfd2839d8eb73_Out_0, _Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3, _Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3);
            float _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_B_6, 2, _Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2);
            float _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2;
            Unity_Add_float(_Multiply_0248fa77a8136c81b6e9a6bbf4b8ae44_Out_2, -1, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2);
            float _Property_cea4e47b293a988a83643b43f76c92ba_Out_0 = _DetailSmoothnessScale;
            float _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2;
            Unity_Multiply_float_float(_Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Property_cea4e47b293a988a83643b43f76c92ba_Out_0, _Multiply_2008466558f0e4819e60b3c41d94487c_Out_2);
            float _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1;
            Unity_Saturate_float(_Multiply_2008466558f0e4819e60b3c41d94487c_Out_2, _Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1);
            float _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1;
            Unity_Absolute_float(_Saturate_3d70f31d57bf638291bde1017f7f7782_Out_1, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1);
            Bindings_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43;
            float _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1;
            SG_BlendOverlayDetailSmoothness_06e12138dc89c0040b45a57abe520a1a_float(_Lerp_00d6e8b1fa661f87978c2b3bde91b9bf_Out_3, _Add_c58fd9db8613298bb7c10a8054cbe39a_Out_2, _Absolute_9df346239512598fa5a33dfdc91746c0_Out_1, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43, _BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1);
            float _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1;
            Unity_Saturate_float(_BlendOverlayDetailSmoothness_bf930d30c7c40486b65597615e35de43_SmoothnessOverlay_1, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0, _Saturate_52f6692b8656668b837aebcf2f45f921_Out_1);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0 = _WetSmoothness;
            float _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_006bb9304a39f5808cf13865f8c36ad4_Out_0, _OneMinus_489965dacb44928393bb0c19acfc1dad_Out_1, _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3);
            float2 _Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0 = float2(_SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_A_7, _SampleTexture2D_d8eb0186b9a0cd819cde65431b4ea5ea_G_5);
            float2 _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2;
            Unity_Multiply_float2_float2(_Vector2_0d28074858599a88940dfc8b57b9a60f_Out_0, float2(2, 2), _Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2);
            float2 _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2;
            Unity_Add_float2(_Multiply_fac8d94f82a53486bc0142a1e64b3d32_Out_2, float2(-1, -1), _Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2);
            float _Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0 = _DetailNormalScale;
            float2 _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2;
            Unity_Multiply_float2_float2(_Add_f0e6e847d8d8798ab3ca8c4d878bafc0_Out_2, (_Property_d0e8d8f7fd10f0829e8fd86c278c8226_Out_0.xx), _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2);
            float _Split_c4822b8eaff9b185be7c059792345712_R_1 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[0];
            float _Split_c4822b8eaff9b185be7c059792345712_G_2 = _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2[1];
            float _Split_c4822b8eaff9b185be7c059792345712_B_3 = 0;
            float _Split_c4822b8eaff9b185be7c059792345712_A_4 = 0;
            float _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2;
            Unity_DotProduct_float2(_Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _Multiply_11f3dfc5283ea188ad9c83e552cf7e0f_Out_2, _DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2);
            float _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1;
            Unity_Saturate_float(_DotProduct_1a01939a143c548c8ccd7e8a04fe680d_Out_2, _Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1);
            float _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1;
            Unity_OneMinus_float(_Saturate_bf3d57899db77f86a1689105ce6a373a_Out_1, _OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1);
            float _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1;
            Unity_SquareRoot_float(_OneMinus_052960238cc4a18cb83109d2bcae6d09_Out_1, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float3 _Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0 = float3(_Split_c4822b8eaff9b185be7c059792345712_R_1, _Split_c4822b8eaff9b185be7c059792345712_G_2, _SquareRoot_d4f67288e4dbf5898bea492a70b89ab9_Out_1);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_11506852e45cbb8f9732aebed8bbb210_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            float _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0 = _NoiseNormalScale;
            float3 _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_7a043284499e5081bab0ed1ddcce79bc_XZ_2.xyz), _Property_345c364a9e67bd878b47cfd40d450e2f_Out_0, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2);
            float3 _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3;
            Unity_Lerp_float3(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _NormalStrength_b496ef5766b1ca83b00cc208ea1bd034_Out_2, (_Clamp_e2ecb22fcddb4389ab87beedf0f68421_Out_3.xxx), _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3);
            float3 _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            Unity_NormalBlend_float(_Vector3_1e56146bdd567884bb8d5ae769df4d29_Out_0, _Lerp_a57daa4ae094b684a79282f8139084cf_Out_3, _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2);
            float _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1;
            Unity_OneMinus_float(_Split_fa7dfd1ac102598eb9429e8c37ff6ef4_R_1, _OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1);
            float _Property_42e21c36617ec48ba2d35424c394cb28_Out_0 = _Ice_Thickness;
            float _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2;
            Unity_Multiply_float_float(_OneMinus_f3a0d236afbe6b8aabfcc9bdb50b2cbd_Out_1, _Property_42e21c36617ec48ba2d35424c394cb28_Out_0, _Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2);
            float _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            Unity_Clamp_float(_Multiply_cd7fa04cc7ed548bb5434483e09694ba_Out_2, 0, 1, _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3);
            surface.Distortion = _Lerp_76070dea1df2738c9a0abc7abc3e0808_Out_3;
            surface.DistortionBlur = 0;
            surface.BaseColor = _Lerp_9f334e8d59abc78798691219f06b2fdb_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Multiply_ffa35df91e1277898c1160f454087deb_Out_2;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_02403a8fb24f4c8fb8bd6dbe84811d9a_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = _NormalBlend_9f531c87e2e45580b1d0f65f06c23526_Out_2;
            surface.TransmissionMask = 1;
            surface.Thickness = _Clamp_c7495b7c230d3288a54a206d383a2e1d_Out_3;
            surface.DiffusionProfileHash = _DiffusionProfileHash;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.WorldSpaceViewDirection =                    normalize(viewWS);
            float3x3 tangentSpaceTransform =                    float3x3(output.WorldSpaceTangent,output.WorldSpaceBiTangent,output.WorldSpaceNormal);
            output.TangentSpaceViewDirection =                  TransformWorldToTangent(output.WorldSpaceViewDirection, tangentSpaceTransform);
            output.WorldSpacePosition =                         input.positionRWS;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.ScreenPosition = ComputeScreenPos(TransformWorldToHClip(input.positionRWS), _ProjectionParams.x);
        
        #if UNITY_UV_STARTS_AT_TOP
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #else
            output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
            output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
            output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        
            output.uv0 =                                        input.texCoord0;
            output.uv2 =                                        input.texCoord2;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
            surfaceData.thickness =                 surfaceDescription.Thickness;
            surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassPathTracing.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
    }
    CustomEditor "UnityEditor.ShaderGraph.GenericShaderGraphMaterialGUI"
    CustomEditorForRenderPipeline "Rendering.HighDefinition.LitShaderGraphGUI" "UnityEngine.Rendering.HighDefinition.HDRenderPipelineAsset"
    FallBack "Hidden/Shader Graph/FallbackError"
}